
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008530  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd8  08008bd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008bd8  08008bd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bd8  08008bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002348  2000000c  08008bec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20002354  08008bec  00022354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003023  00000000  00000000  0003781a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0003a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0003b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028294  00000000  00000000  0003c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013244  00000000  00000000  0006456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eab07  00000000  00000000  000777b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001622b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  0016230c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086a0 	.word	0x080086a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080086a0 	.word	0x080086a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	f5ad 5dca 	sub.w	sp, sp, #6464	; 0x1940
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SD_CARD sd;
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "STM32 FATFS works great!"; //file buffer
 80001e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80001e4:	4a47      	ldr	r2, [pc, #284]	; (8000304 <main+0x12c>)
 80001e6:	461c      	mov	r4, r3
 80001e8:	4615      	mov	r5, r2
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f2:	c403      	stmia	r4!, {r0, r1}
 80001f4:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fb16 	bl	8000826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f88d 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f933 	bl	8000468 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000202:	f000 f911 	bl	8000428 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000206:	f004 ffa7 	bl	8005158 <MX_FATFS_Init>

/*  if(init_sd(&sd) == -1) {
	  Error_Handler();
*/

  if(init_sd(&sd) != FR_OK) {
 800020a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800020e:	f103 0304 	add.w	r3, r3, #4
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f972 	bl	80004fc <init_sd>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <main+0x4c>
	  Error_Handler();
 800021e:	f000 f967 	bl	80004f0 <Error_Handler>
 8000222:	e012      	b.n	800024a <main+0x72>
  }
  else { //file system already exists, try to open a file

	  read_file(&sd, "sub_test/stm32.txt", 35);
 8000224:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000228:	f103 0304 	add.w	r3, r3, #4
 800022c:	2223      	movs	r2, #35	; 0x23
 800022e:	4936      	ldr	r1, [pc, #216]	; (8000308 <main+0x130>)
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9a3 	bl	800057c <read_file>

	  //open file, create it and write
	  if(f_open(&SDFile, "sub_test/stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8000236:	220a      	movs	r2, #10
 8000238:	4933      	ldr	r1, [pc, #204]	; (8000308 <main+0x130>)
 800023a:	4834      	ldr	r0, [pc, #208]	; (800030c <main+0x134>)
 800023c:	f007 fb7a 	bl	8007934 <f_open>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <main+0x72>
		  Error_Handler();
 8000246:	f000 f953 	bl	80004f0 <Error_Handler>
		  }
	  }

  	  //write to the text file
  	  sd.res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800024a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffba 	bl	80001c8 <strlen>
 8000254:	4602      	mov	r2, r0
 8000256:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800025a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800025e:	482b      	ldr	r0, [pc, #172]	; (800030c <main+0x134>)
 8000260:	f007 fe93 	bl	8007f8a <f_write>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800026c:	f103 0304 	add.w	r3, r3, #4
 8000270:	701a      	strb	r2, [r3, #0]
  	  if((byteswritten == 0) || (sd.res != FR_OK)) {
 8000272:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d006      	beq.n	800028a <main+0xb2>
 800027c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000280:	f103 0304 	add.w	r3, r3, #4
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d002      	beq.n	8000290 <main+0xb8>
  		  Error_Handler();
 800028a:	f000 f931 	bl	80004f0 <Error_Handler>
 800028e:	e032      	b.n	80002f6 <main+0x11e>
  	  } else {
  		  f_close(&SDFile);
 8000290:	481e      	ldr	r0, [pc, #120]	; (800030c <main+0x134>)
 8000292:	f008 f88c 	bl	80083ae <f_close>

	  //test read the file
	  f_open(&SDFile, "stm32.txt", FA_READ);
 8000296:	2201      	movs	r2, #1
 8000298:	491d      	ldr	r1, [pc, #116]	; (8000310 <main+0x138>)
 800029a:	481c      	ldr	r0, [pc, #112]	; (800030c <main+0x134>)
 800029c:	f007 fb4a 	bl	8007934 <f_open>
	  memset(rtext, 0, sizeof(rtext));
 80002a0:	463b      	mov	r3, r7
 80002a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f008 f9f1 	bl	8008690 <memset>
	  sd.res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80002ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002b2:	f103 031c 	add.w	r3, r3, #28
 80002b6:	4639      	mov	r1, r7
 80002b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002bc:	4813      	ldr	r0, [pc, #76]	; (800030c <main+0x134>)
 80002be:	f007 fd05 	bl	8007ccc <f_read>
 80002c2:	4603      	mov	r3, r0
 80002c4:	461a      	mov	r2, r3
 80002c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80002ca:	f103 0304 	add.w	r3, r3, #4
 80002ce:	701a      	strb	r2, [r3, #0]
	  if((bytesread == 0) || (sd.res != FR_OK)) {
 80002d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002d4:	f103 031c 	add.w	r3, r3, #28
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d006      	beq.n	80002ec <main+0x114>
 80002de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80002e2:	f103 0304 	add.w	r3, r3, #4
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <main+0x118>
		  Error_Handler();
 80002ec:	f000 f900 	bl	80004f0 <Error_Handler>
	  }
	  f_close(&SDFile);
 80002f0:	4806      	ldr	r0, [pc, #24]	; (800030c <main+0x134>)
 80002f2:	f008 f85c 	bl	80083ae <f_close>
	  //expect FR_NO_FILE, functions properly
	  stat_test = f_stat("sub_test/stm31.txt", &stat_test_info);
*/
  }
  //unmount disk
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	4806      	ldr	r0, [pc, #24]	; (8000314 <main+0x13c>)
 80002fc:	f007 fad4 	bl	80078a8 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000300:	e7fe      	b.n	8000300 <main+0x128>
 8000302:	bf00      	nop
 8000304:	080086d8 	.word	0x080086d8
 8000308:	080086b8 	.word	0x080086b8
 800030c:	200002ec 	.word	0x200002ec
 8000310:	080086cc 	.word	0x080086cc
 8000314:	2000131c 	.word	0x2000131c

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b0b8      	sub	sp, #224	; 0xe0
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000322:	2244      	movs	r2, #68	; 0x44
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f008 f9b2 	bl	8008690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2288      	movs	r2, #136	; 0x88
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f008 f9a4 	bl	8008690 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000348:	2310      	movs	r3, #16
 800034a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800035a:	2360      	movs	r3, #96	; 0x60
 800035c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000366:	2301      	movs	r3, #1
 8000368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800036c:	2301      	movs	r3, #1
 800036e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000372:	2310      	movs	r3, #16
 8000374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000378:	2307      	movs	r3, #7
 800037a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000384:	2302      	movs	r3, #2
 8000386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fe5a 	bl	8001048 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800039a:	f000 f8a9 	bl	80004f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a4:	2303      	movs	r3, #3
 80003a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fa26 	bl	8001814 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ce:	f000 f88f 	bl	80004f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80003d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80003d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003dc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003de:	2301      	movs	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80003e6:	2310      	movs	r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003ea:	2307      	movs	r3, #7
 80003ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80003ee:	2304      	movs	r3, #4
 80003f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fc:	463b      	mov	r3, r7
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fc0e 	bl	8001c20 <HAL_RCCEx_PeriphCLKConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800040a:	f000 f871 	bl	80004f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800040e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000412:	f000 fdc3 	bl	8000f9c <HAL_PWREx_ControlVoltageScaling>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800041c:	f000 f868 	bl	80004f0 <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	37e0      	adds	r7, #224	; 0xe0
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <MX_SDMMC1_SD_Init+0x3c>)
 8000430:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <MX_SDMMC1_SD_Init+0x38>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
 // hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  /* USER CODE END SDMMC1_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	2000025c 	.word	0x2000025c
 8000464:	40012800 	.word	0x40012800

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_GPIO_Init+0x84>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <MX_GPIO_Init+0x84>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_GPIO_Init+0x84>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_GPIO_Init+0x84>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <MX_GPIO_Init+0x84>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_GPIO_Init+0x84>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_GPIO_Init+0x84>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <MX_GPIO_Init+0x84>)
 80004b4:	f043 0308 	orr.w	r3, r3, #8
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_GPIO_Init+0x84>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0308 	and.w	r3, r3, #8
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004d0:	2302      	movs	r3, #2
 80004d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 fb8d 	bl	8000bfc <HAL_GPIO_Init>

}
 80004e2:	bf00      	nop
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <init_sd>:
 * initialize and mount sd card
 * return -1 for failure and 0 for success
 */

int8_t
init_sd(SD_CARD *sd) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  	 //check that SD Card is slotted correctly
  	 if(!BSP_SD_IsDetected()) {
 8000504:	f004 fee7 	bl	80052d6 <BSP_SD_IsDetected>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d102      	bne.n	8000514 <init_sd+0x18>
  		 return -1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000512:	e02b      	b.n	800056c <init_sd+0x70>
  	 }

  	 //instantly mount SD card on startup
  	 sd->res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	4917      	ldr	r1, [pc, #92]	; (8000574 <init_sd+0x78>)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <init_sd+0x7c>)
 800051a:	f007 f9c5 	bl	80078a8 <f_mount>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	701a      	strb	r2, [r3, #0]
  	 if(sd->res != FR_OK) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <init_sd+0x38>
  		 return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000532:	e01b      	b.n	800056c <init_sd+0x70>
  	 }

  	 //initialize R/W buffers
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800053a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f008 f8a5 	bl	8008690 <memset>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00b      	beq.n	8000564 <init_sd+0x68>
  			 memset(sd->write_buffer, 0, sizeof(sd->write_buffer)) == NULL) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8000552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f008 f899 	bl	8008690 <memset>
 800055e:	4603      	mov	r3, r0
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <init_sd+0x6e>
  		 return -1;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000568:	e000      	b.n	800056c <init_sd+0x70>
  	 }

  	 //return success
  	 return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200002e8 	.word	0x200002e8
 8000578:	2000131c 	.word	0x2000131c

0800057c <read_file>:
 * open a file and read a certain amount of bytes from it (max = buffer size)
 * return -1 for failure and bytes read for sucess
 */

int32_t
read_file(SD_CARD *sd, uint8_t file_path[50], uint16_t read_amount) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	80fb      	strh	r3, [r7, #6]

	UINT bytes_read;

	//open file for reading
	sd->res = f_open(&SDFile, (char*)file_path, FA_READ);
 800058a:	2201      	movs	r2, #1
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <read_file+0x64>)
 8000590:	f007 f9d0 	bl	8007934 <f_open>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	701a      	strb	r2, [r3, #0]
	if(sd->res != FR_OK) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <read_file+0x2e>
		return -1;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a8:	e015      	b.n	80005d6 <read_file+0x5a>
	}

	//prevent out of range access
	if(f_size(&SDFile) < read_amount) {
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <read_file+0x64>)
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d202      	bcs.n	80005ba <read_file+0x3e>
		read_amount = f_size(&SDFile);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <read_file+0x64>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	80fb      	strh	r3, [r7, #6]
	}
	//read bytes from file and store them in read buffer
	sd->res = f_read(&SDFile, &sd->read_buffer, read_amount, &bytes_read);
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 80005c0:	88fa      	ldrh	r2, [r7, #6]
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <read_file+0x64>)
 80005c8:	f007 fb80 	bl	8007ccc <f_read>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	701a      	strb	r2, [r3, #0]

	return bytes_read;
 80005d4:	697b      	ldr	r3, [r7, #20]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200002ec 	.word	0x200002ec

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6613      	str	r3, [r2, #96]	; 0x60
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6593      	str	r3, [r2, #88]	; 0x58
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x44>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <HAL_SD_MspInit+0xc4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d14c      	bne.n	80006e8 <HAL_SD_MspInit+0xbc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000652:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000658:	6613      	str	r3, [r2, #96]	; 0x60
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <HAL_SD_MspInit+0xc8>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000696:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006a8:	230c      	movs	r3, #12
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <HAL_SD_MspInit+0xcc>)
 80006b4:	f000 faa2 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006b8:	2304      	movs	r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006c8:	230c      	movs	r3, #12
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <HAL_SD_MspInit+0xd0>)
 80006d4:	f000 fa92 	bl	8000bfc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2031      	movs	r0, #49	; 0x31
 80006de:	f000 fa16 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006e2:	2031      	movs	r0, #49	; 0x31
 80006e4:	f000 fa2f 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40012800 	.word	0x40012800
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800
 80006fc:	48000c00 	.word	0x48000c00

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8c0 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <SDMMC1_IRQHandler+0x10>)
 800075a:	f003 f9c3 	bl	8003ae4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000025c 	.word	0x2000025c

08000768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <SystemInit+0x64>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <SystemInit+0x64>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SystemInit+0x68>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <SystemInit+0x68>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <SystemInit+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <SystemInit+0x68>)
 8000794:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000798:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800079c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <SystemInit+0x68>)
 80007a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <SystemInit+0x68>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <SystemInit+0x68>)
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <SystemInit+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SystemInit+0x64>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	609a      	str	r2, [r3, #8]
#endif
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	40021000 	.word	0x40021000

080007d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800080c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff ffc6 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
	ldr	r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopForever+0x12>)
	b	LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LoopForever+0x16>)
	cmp	r2, r3
 80007fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f007 ff21 	bl	8008648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000806:	f7ff fce7 	bl	80001d8 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800080c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000810:	08008be0 	.word	0x08008be0
	ldr	r0, =_sdata
 8000814:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000818:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000820:	20002354 	.word	0x20002354

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>

08000826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f961 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	e001      	b.n	800084c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff fecc 	bl	80005e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d023      	beq.n	80008b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_InitTick+0x70>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_InitTick+0x6c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f96d 	bl	8000b62 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10f      	bne.n	80008ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d809      	bhi.n	80008a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089c:	f000 f937 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_InitTick+0x74>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	e001      	b.n	80008b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008
 80008f4:	200002e0 	.word	0x200002e0

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200002e0 	.word	0x200002e0

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff ffee 	bl	80008f8 <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffde 	bl	80008f8 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <__NVIC_EnableIRQ+0x38>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff29 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff3e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff31 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d005      	beq.n	8000b9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2204      	movs	r2, #4
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e029      	b.n	8000bf2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 020e 	bic.w	r2, r2, #14
 8000bac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f003 021c 	and.w	r2, r3, #28
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
    }
  }
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	e17f      	b.n	8000f0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8171 	beq.w	8000f06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d00b      	beq.n	8000c44 <HAL_GPIO_Init+0x48>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	2b11      	cmp	r3, #17
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b12      	cmp	r3, #18
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d118      	bne.n	8000ce4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x128>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80ac 	beq.w	8000f06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b5f      	ldr	r3, [pc, #380]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a5e      	ldr	r2, [pc, #376]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b5c      	ldr	r3, [pc, #368]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc6:	4a5a      	ldr	r2, [pc, #360]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df0:	d025      	beq.n	8000e3e <HAL_GPIO_Init+0x242>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <HAL_GPIO_Init+0x338>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x23e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_GPIO_Init+0x33c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x23a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x340>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x236>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x344>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x232>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x348>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x22e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4a      	ldr	r2, [pc, #296]	; (8000f48 <HAL_GPIO_Init+0x34c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x22a>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00c      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e26:	2307      	movs	r3, #7
 8000e28:	e00a      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x244>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e50:	4937      	ldr	r1, [pc, #220]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e82:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f ae78 	bne.w	8000c0c <HAL_GPIO_Init+0x10>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	48000400 	.word	0x48000400
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48001000 	.word	0x48001000
 8000f44:	48001400 	.word	0x48001400
 8000f48:	48001800 	.word	0x48001800
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e001      	b.n	8000f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000

08000f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000faa:	d130      	bne.n	800100e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb8:	d038      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2232      	movs	r2, #50	; 0x32
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe0:	e002      	b.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff4:	d102      	bne.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f2      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d110      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e00f      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d007      	beq.n	800102c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000
 8001040:	20000000 	.word	0x20000000
 8001044:	431bde83 	.word	0x431bde83

08001048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e3d4      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105a:	4ba1      	ldr	r3, [pc, #644]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001064:	4b9e      	ldr	r3, [pc, #632]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80e4 	beq.w	8001244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x4a>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	f040 808b 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	f040 8087 	bne.w	80011a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001092:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x62>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e3ac      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_RCC_OscConfig+0x7c>
 80010ba:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c2:	e005      	b.n	80010d0 <HAL_RCC_OscConfig+0x88>
 80010c4:	4b86      	ldr	r3, [pc, #536]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d223      	bcs.n	800111c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fd41 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e38d      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4b7d      	ldr	r3, [pc, #500]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a7c      	ldr	r2, [pc, #496]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b7a      	ldr	r3, [pc, #488]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4977      	ldr	r1, [pc, #476]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4972      	ldr	r1, [pc, #456]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e025      	b.n	8001168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	496a      	ldr	r1, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4965      	ldr	r1, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd01 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e34d      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001168:	f000 fc36 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800116c:	4602      	mov	r2, r0
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	495a      	ldr	r1, [pc, #360]	; (80012e4 <HAL_RCC_OscConfig+0x29c>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_RCC_OscConfig+0x2a0>)
 8001186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <HAL_RCC_OscConfig+0x2a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fb63 	bl	8000858 <HAL_InitTick>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d052      	beq.n	8001242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	e331      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d032      	beq.n	800120e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a8:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fba0 	bl	80008f8 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011bc:	f7ff fb9c 	bl	80008f8 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e31a      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	493b      	ldr	r1, [pc, #236]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	4936      	ldr	r1, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e01a      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb6d 	bl	80008f8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fb69 	bl	80008f8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e2e7      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x1da>
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d074      	beq.n	800133a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x21a>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d10e      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d064      	beq.n	8001338 <HAL_RCC_OscConfig+0x2f0>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d160      	bne.n	8001338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2c4      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x24a>
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e01d      	b.n	80012ce <HAL_RCC_OscConfig+0x286>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129a:	d10c      	bne.n	80012b6 <HAL_RCC_OscConfig+0x26e>
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e00b      	b.n	80012ce <HAL_RCC_OscConfig+0x286>
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_RCC_OscConfig+0x298>)
 80012c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01c      	beq.n	8001310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb0f 	bl	80008f8 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012dc:	e011      	b.n	8001302 <HAL_RCC_OscConfig+0x2ba>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	0800873c 	.word	0x0800873c
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fb02 	bl	80008f8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e280      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	4baf      	ldr	r3, [pc, #700]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2a8>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff faf2 	bl	80008f8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff faee 	bl	80008f8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e26c      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132a:	4ba5      	ldr	r3, [pc, #660]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x2d0>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d060      	beq.n	8001408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x310>
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d119      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d116      	bne.n	8001386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x328>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e249      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b93      	ldr	r3, [pc, #588]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	4990      	ldr	r1, [pc, #576]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001384:	e040      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d023      	beq.n	80013d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a8b      	ldr	r2, [pc, #556]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff faad 	bl	80008f8 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff faa9 	bl	80008f8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e227      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	497c      	ldr	r1, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e018      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a79      	ldr	r2, [pc, #484]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fa89 	bl	80008f8 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fa85 	bl	80008f8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e203      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03c      	beq.n	800148e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01c      	beq.n	8001456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fa64 	bl	80008f8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fa60 	bl	80008f8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1de      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0ef      	beq.n	8001434 <HAL_RCC_OscConfig+0x3ec>
 8001454:	e01b      	b.n	800148e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fa47 	bl	80008f8 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fa43 	bl	80008f8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1c1      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ef      	bne.n	800146e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80a6 	beq.w	80015e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014a0:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6593      	str	r3, [r2, #88]	; 0x58
 80014b8:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <HAL_RCC_OscConfig+0x57c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d118      	bne.n	8001506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x57c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3a      	ldr	r2, [pc, #232]	; (80015c4 <HAL_RCC_OscConfig+0x57c>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa0a 	bl	80008f8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fa06 	bl	80008f8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e184      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_RCC_OscConfig+0x57c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x4d8>
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151e:	e024      	b.n	800156a <HAL_RCC_OscConfig+0x522>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d110      	bne.n	800154a <HAL_RCC_OscConfig+0x502>
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001548:	e00f      	b.n	800156a <HAL_RCC_OscConfig+0x522>
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff f9c1 	bl	80008f8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff f9bd 	bl	80008f8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e139      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x578>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ed      	beq.n	800157a <HAL_RCC_OscConfig+0x532>
 800159e:	e01a      	b.n	80015d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff f9aa 	bl	80008f8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff f9a6 	bl	80008f8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d906      	bls.n	80015c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e122      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c8:	4b90      	ldr	r3, [pc, #576]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e8      	bne.n	80015a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a8a      	ldr	r2, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8108 	beq.w	8001802 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f040 80d0 	bne.w	800179c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015fc:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d130      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	3b01      	subs	r3, #1
 800161c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d127      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11f      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800163c:	2a07      	cmp	r2, #7
 800163e:	bf14      	ite	ne
 8001640:	2201      	movne	r2, #1
 8001642:	2200      	moveq	r2, #0
 8001644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d06e      	beq.n	8001750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d069      	beq.n	800174c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001684:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b7      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a5c      	ldr	r2, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016a0:	f7ff f92a 	bl	80008f8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f926 	bl	80008f8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0a4      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <HAL_RCC_OscConfig+0x7c8>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016e0:	0212      	lsls	r2, r2, #8
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016e8:	0852      	lsrs	r2, r2, #1
 80016ea:	3a01      	subs	r2, #1
 80016ec:	0552      	lsls	r2, r2, #21
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016f4:	0852      	lsrs	r2, r2, #1
 80016f6:	3a01      	subs	r2, #1
 80016f8:	0652      	lsls	r2, r2, #25
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001700:	0912      	lsrs	r2, r2, #4
 8001702:	0452      	lsls	r2, r2, #17
 8001704:	430a      	orrs	r2, r1
 8001706:	4941      	ldr	r1, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a3b      	ldr	r2, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001724:	f7ff f8e8 	bl	80008f8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f8e4 	bl	80008f8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e062      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174a:	e05a      	b.n	8001802 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e059      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d152      	bne.n	8001802 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001774:	f7ff f8c0 	bl	80008f8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f8bc 	bl	80008f8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e03a      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x734>
 800179a:	e032      	b.n	8001802 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d02d      	beq.n	80017fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff f88f 	bl	80008f8 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff f88b 	bl	80008f8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e009      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x7c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x796>
 80017fc:	e001      	b.n	8001802 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	f99d808c 	.word	0xf99d808c

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0c8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4961      	ldr	r1, [pc, #388]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b0      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d04c      	beq.n	80018fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d107      	bne.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d121      	bne.n	80018bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e09e      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d107      	bne.n	8001894 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d115      	bne.n	80018bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e092      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e086      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e07e      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 0203 	bic.w	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	493f      	ldr	r1, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ce:	f7ff f813 	bl	80008f8 <HAL_GetTick>
 80018d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f80f 	bl	80008f8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e066      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 020c 	and.w	r2, r3, #12
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d1eb      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	492c      	ldr	r1, [pc, #176]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d210      	bcs.n	800194c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4924      	ldr	r1, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1b0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e036      	b.n	80019ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4910      	ldr	r1, [pc, #64]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198a:	f000 f825 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	490c      	ldr	r1, [pc, #48]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe ff52 	bl	8000858 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80019b8:	7afb      	ldrb	r3, [r7, #11]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	0800873c 	.word	0x0800873c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e6:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d11e      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a34:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	e004      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d134      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d003      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xac>
 8001a7c:	e005      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a80:	617b      	str	r3, [r7, #20]
      break;
 8001a82:	e005      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_GetSysClockFreq+0x114>)
 8001a86:	617b      	str	r3, [r7, #20]
      break;
 8001a88:	e002      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	617b      	str	r3, [r7, #20]
      break;
 8001a8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	fb02 f203 	mul.w	r2, r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	0e5b      	lsrs	r3, r3, #25
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08008754 	.word	0x08008754
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4904      	ldr	r1, [pc, #16]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	0800874c 	.word	0x0800874c

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b38:	f7ff ffda 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0adb      	lsrs	r3, r3, #11
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4904      	ldr	r1, [pc, #16]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	0800874c 	.word	0x0800874c

08001b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b78:	f7ff fa02 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001b7c:	6178      	str	r0, [r7, #20]
 8001b7e:	e014      	b.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff f9f2 	bl	8000f80 <HAL_PWREx_GetVoltageRange>
 8001b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb0:	d10b      	bne.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b80      	cmp	r3, #128	; 0x80
 8001bb6:	d919      	bls.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2ba0      	cmp	r3, #160	; 0xa0
 8001bbc:	d902      	bls.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	e013      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e010      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d902      	bls.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e00a      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b80      	cmp	r3, #128	; 0x80
 8001bda:	d102      	bne.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e004      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b70      	cmp	r3, #112	; 0x70
 8001be6:	d101      	bne.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0207 	bic.w	r2, r3, #7
 8001bf4:	4909      	ldr	r1, [pc, #36]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c28:	2300      	movs	r3, #0
 8001c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d041      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c44:	d02a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c4a:	d824      	bhi.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c50:	d008      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c56:	d81e      	bhi.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c60:	d010      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c62:	e018      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c64:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a85      	ldr	r2, [pc, #532]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c70:	e015      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f825 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c82:	e00c      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3320      	adds	r3, #32
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 f910 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c94:	e003      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	74fb      	strb	r3, [r7, #19]
      break;
 8001c9a:	e000      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb2:	4973      	ldr	r1, [pc, #460]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cba:	e001      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d041      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cd4:	d02a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cda:	d824      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce6:	d81e      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d00:	e015      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 ffdd 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d12:	e00c      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3320      	adds	r3, #32
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 f8c8 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d24:	e003      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	74fb      	strb	r3, [r7, #19]
      break;
 8001d2a:	e000      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d34:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d42:	494f      	ldr	r1, [pc, #316]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d4a:	e001      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a0 	beq.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001da0:	f7fe fdaa 	bl	80008f8 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da6:	e009      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7fe fda6 	bl	80008f8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d902      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	74fb      	strb	r3, [r7, #19]
        break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d15c      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d019      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d016      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fd65 	bl	80008f8 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	e00b      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fd61 	bl	80008f8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d902      	bls.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	74fb      	strb	r3, [r7, #19]
            break;
 8001e48:	e006      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ec      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6e:	4904      	ldr	r1, [pc, #16]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e76:	e009      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	74bb      	strb	r3, [r7, #18]
 8001e7c:	e006      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8c:	7c7b      	ldrb	r3, [r7, #17]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b9e      	ldr	r3, [pc, #632]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	4a9d      	ldr	r2, [pc, #628]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eaa:	4b98      	ldr	r3, [pc, #608]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	4994      	ldr	r1, [pc, #592]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ecc:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	f023 020c 	bic.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	498c      	ldr	r1, [pc, #560]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eee:	4b87      	ldr	r3, [pc, #540]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4983      	ldr	r1, [pc, #524]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f10:	4b7e      	ldr	r3, [pc, #504]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	497b      	ldr	r1, [pc, #492]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f32:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	4972      	ldr	r1, [pc, #456]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f54:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	496a      	ldr	r1, [pc, #424]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f76:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	4961      	ldr	r1, [pc, #388]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f98:	4b5c      	ldr	r3, [pc, #368]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	4959      	ldr	r1, [pc, #356]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	4950      	ldr	r1, [pc, #320]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	4948      	ldr	r1, [pc, #288]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	493f      	ldr	r1, [pc, #252]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d028      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202e:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203e:	d106      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
 800204c:	e011      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002056:	d10c      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fe32 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d028      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	491f      	ldr	r1, [pc, #124]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209c:	d106      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a8:	60d3      	str	r3, [r2, #12]
 80020aa:	e011      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fe03 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 80020c2:	4603      	mov	r3, r0
 80020c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020fa:	d109      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a02      	ldr	r2, [pc, #8]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002106:	60d3      	str	r3, [r2, #12]
 8002108:	e014      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fdd1 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800214e:	4928      	ldr	r1, [pc, #160]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800215a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215e:	d10d      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	2102      	movs	r1, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fdae 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d014      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	74bb      	strb	r3, [r7, #18]
 800217a:	e011      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3320      	adds	r3, #32
 800218a:	2102      	movs	r1, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fe8f 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021de:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002206:	d13e      	bne.n	8002286 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002208:	4bbe      	ldr	r3, [pc, #760]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800221a:	d028      	beq.n	800226e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002222:	f200 853e 	bhi.w	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222c:	d005      	beq.n	800223a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d00e      	beq.n	8002254 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002236:	f000 bd34 	b.w	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800223a:	4bb2      	ldr	r3, [pc, #712]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 852e 	bne.w	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800224a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224e:	61fb      	str	r3, [r7, #28]
      break;
 8002250:	f000 bd29 	b.w	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002254:	4bab      	ldr	r3, [pc, #684]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	f040 8523 	bne.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002268:	61fb      	str	r3, [r7, #28]
      break;
 800226a:	f000 bd1e 	b.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800226e:	4ba5      	ldr	r3, [pc, #660]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800227a:	f040 8518 	bne.w	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800227e:	4ba2      	ldr	r3, [pc, #648]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002280:	61fb      	str	r3, [r7, #28]
      break;
 8002282:	f000 bd14 	b.w	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002286:	4b9f      	ldr	r3, [pc, #636]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d036      	beq.n	8002304 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d840      	bhi.n	800231e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d003      	beq.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d020      	beq.n	80022ea <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80022a8:	e039      	b.n	800231e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80022aa:	4b96      	ldr	r3, [pc, #600]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d116      	bne.n	80022e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80022b6:	4b93      	ldr	r3, [pc, #588]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80022c2:	4b90      	ldr	r3, [pc, #576]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	e005      	b.n	80022da <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80022ce:	4b8d      	ldr	r3, [pc, #564]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4a8c      	ldr	r2, [pc, #560]	; (800250c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80022e2:	e01f      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
      break;
 80022e8:	e01c      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80022ea:	4b86      	ldr	r3, [pc, #536]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d102      	bne.n	80022fe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80022f8:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80022fa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80022fc:	e012      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
      break;
 8002302:	e00f      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002304:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002310:	d102      	bne.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002312:	4b80      	ldr	r3, [pc, #512]	; (8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
      break;
 8002322:	bf00      	nop
    }

    switch(PeriphClk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800232a:	f000 80d2 	beq.w	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002334:	f200 84bd 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800233e:	f000 80c8 	beq.w	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002348:	f200 84b3 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002352:	f000 835b 	beq.w	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	f200 84a9 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002366:	f000 847f 	beq.w	8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002370:	f200 849f 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237a:	f000 82ce 	beq.w	800291a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002384:	f200 8495 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238e:	f000 80a0 	beq.w	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	f200 848b 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	f000 808f 	beq.w	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	f200 8481 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b6:	d07e      	beq.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023be:	f200 8478 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	f000 8404 	beq.w	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	f200 846e 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	f000 83b0 	beq.w	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e6:	f200 8464 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f0:	f000 837a 	beq.w	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	f200 845a 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b80      	cmp	r3, #128	; 0x80
 8002402:	f000 8345 	beq.w	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	f200 8452 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b20      	cmp	r3, #32
 8002412:	d84b      	bhi.n	80024ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 844b 	beq.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	2b1f      	cmp	r3, #31
 8002422:	f200 8446 	bhi.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	08002617 	.word	0x08002617
 8002430:	08002687 	.word	0x08002687
 8002434:	08002cb3 	.word	0x08002cb3
 8002438:	0800271b 	.word	0x0800271b
 800243c:	08002cb3 	.word	0x08002cb3
 8002440:	08002cb3 	.word	0x08002cb3
 8002444:	08002cb3 	.word	0x08002cb3
 8002448:	08002793 	.word	0x08002793
 800244c:	08002cb3 	.word	0x08002cb3
 8002450:	08002cb3 	.word	0x08002cb3
 8002454:	08002cb3 	.word	0x08002cb3
 8002458:	08002cb3 	.word	0x08002cb3
 800245c:	08002cb3 	.word	0x08002cb3
 8002460:	08002cb3 	.word	0x08002cb3
 8002464:	08002cb3 	.word	0x08002cb3
 8002468:	08002817 	.word	0x08002817
 800246c:	08002cb3 	.word	0x08002cb3
 8002470:	08002cb3 	.word	0x08002cb3
 8002474:	08002cb3 	.word	0x08002cb3
 8002478:	08002cb3 	.word	0x08002cb3
 800247c:	08002cb3 	.word	0x08002cb3
 8002480:	08002cb3 	.word	0x08002cb3
 8002484:	08002cb3 	.word	0x08002cb3
 8002488:	08002cb3 	.word	0x08002cb3
 800248c:	08002cb3 	.word	0x08002cb3
 8002490:	08002cb3 	.word	0x08002cb3
 8002494:	08002cb3 	.word	0x08002cb3
 8002498:	08002cb3 	.word	0x08002cb3
 800249c:	08002cb3 	.word	0x08002cb3
 80024a0:	08002cb3 	.word	0x08002cb3
 80024a4:	08002cb3 	.word	0x08002cb3
 80024a8:	08002899 	.word	0x08002899
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	f000 82bd 	beq.w	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80024b4:	e3fd      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024bc:	f000 fdd6 	bl	800306c <RCCEx_GetSAIxPeriphCLKFreq>
 80024c0:	61f8      	str	r0, [r7, #28]
      break;
 80024c2:	e3f7      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80024c4:	69b9      	ldr	r1, [r7, #24]
 80024c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024ca:	f000 fdcf 	bl	800306c <RCCEx_GetSAIxPeriphCLKFreq>
 80024ce:	61f8      	str	r0, [r7, #28]
      break;
 80024d0:	e3f0      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80024e4:	d018      	beq.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80024ec:	f200 808b 	bhi.w	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f6:	d059      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fe:	d028      	beq.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8002500:	e081      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	0003d090 	.word	0x0003d090
 800250c:	08008754 	.word	0x08008754
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002518:	4bae      	ldr	r3, [pc, #696]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d172      	bne.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002524:	4bab      	ldr	r3, [pc, #684]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002530:	4ba8      	ldr	r3, [pc, #672]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	e005      	b.n	8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800253c:	4ba5      	ldr	r3, [pc, #660]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	4aa3      	ldr	r2, [pc, #652]	; (80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	61fb      	str	r3, [r7, #28]
          break;
 8002550:	e05b      	b.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002552:	4ba0      	ldr	r3, [pc, #640]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800255e:	d156      	bne.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002560:	4b9c      	ldr	r3, [pc, #624]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256c:	d14f      	bne.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800256e:	4b99      	ldr	r3, [pc, #612]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002578:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	fb02 f203 	mul.w	r2, r2, r3
 8002582:	4b94      	ldr	r3, [pc, #592]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	3301      	adds	r3, #1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0d5b      	lsrs	r3, r3, #21
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	61fb      	str	r3, [r7, #28]
          break;
 80025aa:	e030      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80025ac:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b8:	d12b      	bne.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80025ba:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c6:	d124      	bne.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80025c8:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	fb02 f203 	mul.w	r2, r2, r3
 80025dc:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	3301      	adds	r3, #1
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80025ee:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	0d5b      	lsrs	r3, r3, #21
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	3301      	adds	r3, #1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	61fb      	str	r3, [r7, #28]
          break;
 8002604:	e005      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002606:	bf00      	nop
 8002608:	e354      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800260a:	bf00      	nop
 800260c:	e352      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800260e:	bf00      	nop
 8002610:	e350      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002612:	bf00      	nop
        break;
 8002614:	e34e      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002616:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d828      	bhi.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002649 	.word	0x08002649
 8002638:	08002651 	.word	0x08002651
 800263c:	08002665 	.word	0x08002665
          frequency = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fa78 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002644:	61f8      	str	r0, [r7, #28]
          break;
 8002646:	e01d      	b.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002648:	f7ff f9c6 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800264c:	61f8      	str	r0, [r7, #28]
          break;
 800264e:	e019      	b.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d10f      	bne.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800265e:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002660:	61fb      	str	r3, [r7, #28]
          break;
 8002662:	e00c      	b.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002664:	4b5b      	ldr	r3, [pc, #364]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	61fb      	str	r3, [r7, #28]
          break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800267a:	bf00      	nop
 800267c:	e31a      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800267e:	bf00      	nop
 8002680:	e318      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002682:	bf00      	nop
        break;
 8002684:	e316      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b0c      	cmp	r3, #12
 8002696:	d83a      	bhi.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026d5 	.word	0x080026d5
 80026a4:	0800270f 	.word	0x0800270f
 80026a8:	0800270f 	.word	0x0800270f
 80026ac:	0800270f 	.word	0x0800270f
 80026b0:	080026dd 	.word	0x080026dd
 80026b4:	0800270f 	.word	0x0800270f
 80026b8:	0800270f 	.word	0x0800270f
 80026bc:	0800270f 	.word	0x0800270f
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	0800270f 	.word	0x0800270f
 80026c8:	0800270f 	.word	0x0800270f
 80026cc:	0800270f 	.word	0x0800270f
 80026d0:	080026f9 	.word	0x080026f9
          frequency = HAL_RCC_GetPCLK1Freq();
 80026d4:	f7ff fa18 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80026d8:	61f8      	str	r0, [r7, #28]
          break;
 80026da:	e01d      	b.n	8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 80026dc:	f7ff f97c 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 80026e0:	61f8      	str	r0, [r7, #28]
          break;
 80026e2:	e019      	b.n	8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026e4:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d10f      	bne.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80026f4:	61fb      	str	r3, [r7, #28]
          break;
 80026f6:	e00c      	b.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270a:	61fb      	str	r3, [r7, #28]
          break;
 800270c:	e003      	b.n	8002716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800270e:	bf00      	nop
 8002710:	e2d0      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002712:	bf00      	nop
 8002714:	e2ce      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002716:	bf00      	nop
        break;
 8002718:	e2cc      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b30      	cmp	r3, #48	; 0x30
 800272a:	d021      	beq.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b30      	cmp	r3, #48	; 0x30
 8002730:	d829      	bhi.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b20      	cmp	r3, #32
 8002736:	d011      	beq.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d823      	bhi.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b10      	cmp	r3, #16
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800274a:	e01c      	b.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800274c:	f7ff f9dc 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002750:	61f8      	str	r0, [r7, #28]
          break;
 8002752:	e01d      	b.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002754:	f7ff f940 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002758:	61f8      	str	r0, [r7, #28]
          break;
 800275a:	e019      	b.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d10f      	bne.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800276c:	61fb      	str	r3, [r7, #28]
          break;
 800276e:	e00c      	b.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800277e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002782:	61fb      	str	r3, [r7, #28]
          break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002786:	bf00      	nop
 8002788:	e294      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800278a:	bf00      	nop
 800278c:	e292      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800278e:	bf00      	nop
        break;
 8002790:	e290      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2bc0      	cmp	r3, #192	; 0xc0
 80027a2:	d027      	beq.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2bc0      	cmp	r3, #192	; 0xc0
 80027a8:	d82f      	bhi.n	800280a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d017      	beq.n	80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d829      	bhi.n	800280a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d004      	beq.n	80027cc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 80027c2:	e022      	b.n	800280a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 80027c4:	f7ff f9a0 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80027c8:	61f8      	str	r0, [r7, #28]
          break;
 80027ca:	e023      	b.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 80027cc:	f7ff f904 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 80027d0:	61f8      	str	r0, [r7, #28]
          break;
 80027d2:	e01f      	b.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08008754 	.word	0x08008754
 80027dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027e0:	4ba9      	ldr	r3, [pc, #676]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d10f      	bne.n	800280e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 80027ee:	4ba7      	ldr	r3, [pc, #668]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80027f0:	61fb      	str	r3, [r7, #28]
          break;
 80027f2:	e00c      	b.n	800280e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80027f4:	4ba4      	ldr	r3, [pc, #656]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002806:	61fb      	str	r3, [r7, #28]
          break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 800280a:	bf00      	nop
 800280c:	e252      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800280e:	bf00      	nop
 8002810:	e250      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002812:	bf00      	nop
        break;
 8002814:	e24e      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002816:	4b9c      	ldr	r3, [pc, #624]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002828:	d025      	beq.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002830:	d82c      	bhi.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002838:	d013      	beq.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d824      	bhi.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284e:	d004      	beq.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8002850:	e01c      	b.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002852:	f7ff f959 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002856:	61f8      	str	r0, [r7, #28]
          break;
 8002858:	e01d      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800285a:	f7ff f8bd 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800285e:	61f8      	str	r0, [r7, #28]
          break;
 8002860:	e019      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002862:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	d10f      	bne.n	8002890 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002872:	61fb      	str	r3, [r7, #28]
          break;
 8002874:	e00c      	b.n	8002890 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002876:	4b84      	ldr	r3, [pc, #528]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d107      	bne.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8002884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002888:	61fb      	str	r3, [r7, #28]
          break;
 800288a:	e003      	b.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800288c:	bf00      	nop
 800288e:	e211      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002890:	bf00      	nop
 8002892:	e20f      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002894:	bf00      	nop
        break;
 8002896:	e20d      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002898:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028aa:	d025      	beq.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028b2:	d82c      	bhi.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d013      	beq.n	80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c2:	d824      	bhi.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d004      	beq.n	80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 80028d2:	e01c      	b.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80028d4:	f7ff f918 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80028d8:	61f8      	str	r0, [r7, #28]
          break;
 80028da:	e01d      	b.n	8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 80028dc:	f7ff f87c 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 80028e0:	61f8      	str	r0, [r7, #28]
          break;
 80028e2:	e019      	b.n	8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d10f      	bne.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 80028f2:	4b66      	ldr	r3, [pc, #408]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80028f4:	61fb      	str	r3, [r7, #28]
          break;
 80028f6:	e00c      	b.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028f8:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8002906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290a:	61fb      	str	r3, [r7, #28]
          break;
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800290e:	bf00      	nop
 8002910:	e1d0      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002912:	bf00      	nop
 8002914:	e1ce      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002916:	bf00      	nop
        break;
 8002918:	e1cc      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800292c:	d00c      	beq.n	8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002934:	d864      	bhi.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800293c:	d008      	beq.n	8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d030      	beq.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8002946:	e05b      	b.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002948:	f7ff f846 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800294c:	61f8      	str	r0, [r7, #28]
          break;
 800294e:	e05c      	b.n	8002a0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002950:	4b4d      	ldr	r3, [pc, #308]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800295c:	d152      	bne.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04c      	beq.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002974:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	fb02 f203 	mul.w	r2, r2, r3
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	3301      	adds	r3, #1
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	0e5b      	lsrs	r3, r3, #25
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	61fb      	str	r3, [r7, #28]
          break;
 80029a6:	e02d      	b.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d128      	bne.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d022      	beq.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029cc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	fb02 f203 	mul.w	r2, r2, r3
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	3301      	adds	r3, #1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	0e5b      	lsrs	r3, r3, #25
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	3301      	adds	r3, #1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]
          break;
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 8002a00:	bf00      	nop
 8002a02:	e157      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a04:	bf00      	nop
 8002a06:	e155      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a08:	bf00      	nop
        break;
 8002a0a:	e153      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002a1e:	f7ff f889 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002a22:	61f8      	str	r0, [r7, #28]
        break;
 8002a24:	e146      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a26:	f7fe ffd7 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002a2a:	61f8      	str	r0, [r7, #28]
        break;
 8002a2c:	e142      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a40:	d013      	beq.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a48:	d819      	bhi.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	d004      	beq.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8002a58:	e011      	b.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a5a:	f7ff f855 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002a5e:	61f8      	str	r0, [r7, #28]
          break;
 8002a60:	e010      	b.n	8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a62:	f7fe ffb9 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002a66:	61f8      	str	r0, [r7, #28]
          break;
 8002a68:	e00c      	b.n	8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a76:	d104      	bne.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002a7a:	61fb      	str	r3, [r7, #28]
          break;
 8002a7c:	e001      	b.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8002a7e:	bf00      	nop
 8002a80:	e118      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a82:	bf00      	nop
        break;
 8002a84:	e116      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002a90:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d013      	beq.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aaa:	d819      	bhi.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8002aba:	e011      	b.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff f824 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	61f8      	str	r0, [r7, #28]
          break;
 8002ac2:	e010      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ac4:	f7fe ff88 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002ac8:	61f8      	str	r0, [r7, #28]
          break;
 8002aca:	e00c      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002acc:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d104      	bne.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002ada:	4b7a      	ldr	r3, [pc, #488]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002adc:	61fb      	str	r3, [r7, #28]
          break;
 8002ade:	e001      	b.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8002ae0:	bf00      	nop
 8002ae2:	e0e7      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ae4:	bf00      	nop
        break;
 8002ae6:	e0e5      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002ae8:	4b75      	ldr	r3, [pc, #468]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002afa:	d013      	beq.n	8002b24 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b02:	d819      	bhi.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d004      	beq.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b14:	f7fe fff8 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002b18:	61f8      	str	r0, [r7, #28]
          break;
 8002b1a:	e010      	b.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b1c:	f7fe ff5c 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002b20:	61f8      	str	r0, [r7, #28]
          break;
 8002b22:	e00c      	b.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b24:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d104      	bne.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8002b32:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002b34:	61fb      	str	r3, [r7, #28]
          break;
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8002b38:	bf00      	nop
 8002b3a:	e0bb      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b3c:	bf00      	nop
        break;
 8002b3e:	e0b9      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002b40:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b52:	d02c      	beq.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b5a:	d833      	bhi.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b62:	d01a      	beq.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b6a:	d82b      	bhi.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b78:	d004      	beq.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8002b7a:	e023      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7fe ffc4 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61f8      	str	r0, [r7, #28]
          break;
 8002b82:	e026      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b84:	4b4e      	ldr	r3, [pc, #312]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d11a      	bne.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8002b92:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002b96:	61fb      	str	r3, [r7, #28]
          break;
 8002b98:	e016      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002baa:	61fb      	str	r3, [r7, #28]
          break;
 8002bac:	e00e      	b.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8002bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc0:	61fb      	str	r3, [r7, #28]
          break;
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8002bc4:	bf00      	nop
 8002bc6:	e075      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bc8:	bf00      	nop
 8002bca:	e073      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bcc:	bf00      	nop
 8002bce:	e071      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bd0:	bf00      	nop
        break;
 8002bd2:	e06f      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002be6:	d02c      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bee:	d833      	bhi.n	8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf6:	d01a      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bfe:	d82b      	bhi.n	8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0c:	d004      	beq.n	8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8002c0e:	e023      	b.n	8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7fe ff7a 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002c14:	61f8      	str	r0, [r7, #28]
          break;
 8002c16:	e026      	b.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8002c26:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002c2a:	61fb      	str	r3, [r7, #28]
          break;
 8002c2c:	e016      	b.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002c3e:	61fb      	str	r3, [r7, #28]
          break;
 8002c40:	e00e      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8002c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c54:	61fb      	str	r3, [r7, #28]
          break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8002c58:	bf00      	nop
 8002c5a:	e02b      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c5c:	bf00      	nop
 8002c5e:	e029      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c60:	bf00      	nop
 8002c62:	e027      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c64:	bf00      	nop
        break;
 8002c66:	e025      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d004      	beq.n	8002c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7fe ff40 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002c88:	61f8      	str	r0, [r7, #28]
          break;
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002c9c:	61fb      	str	r3, [r7, #28]
          break;
 8002c9e:	bf00      	nop
        break;
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002cb2:	bf00      	nop
    }
  }

  return(frequency);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cd6:	4b75      	ldr	r3, [pc, #468]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ce2:	4b72      	ldr	r3, [pc, #456]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0203 	and.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10d      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d047      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e044      	b.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d018      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x86>
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d825      	bhi.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x62>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d009      	beq.n	8002d3c <RCCEx_PLLSAI1_Config+0x74>
 8002d28:	e020      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2a:	4b60      	ldr	r3, [pc, #384]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3a:	e01a      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e013      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6a:	e006      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e004      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	430b      	orrs	r3, r1
 8002d98:	4944      	ldr	r1, [pc, #272]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d17d      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da4:	4b41      	ldr	r3, [pc, #260]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a40      	ldr	r2, [pc, #256]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fd fda2 	bl	80008f8 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fd fd9e 	bl	80008f8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dcc:	4b37      	ldr	r3, [pc, #220]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d160      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	0912      	lsrs	r2, r2, #4
 8002dfc:	0452      	lsls	r2, r2, #17
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	492a      	ldr	r1, [pc, #168]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]
 8002e06:	e027      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d112      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	0211      	lsls	r1, r2, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6912      	ldr	r2, [r2, #16]
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0552      	lsls	r2, r2, #21
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	491f      	ldr	r1, [pc, #124]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	610b      	str	r3, [r1, #16]
 8002e32:	e011      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	0211      	lsls	r1, r2, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6952      	ldr	r2, [r2, #20]
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0652      	lsls	r2, r2, #25
 8002e50:	430a      	orrs	r2, r1
 8002e52:	4916      	ldr	r1, [pc, #88]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fd fd48 	bl	80008f8 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6a:	e009      	b.n	8002e80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6c:	f7fd fd44 	bl	80008f8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e7e:	e005      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ef      	beq.n	8002e6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4904      	ldr	r1, [pc, #16]	; (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000

08002eb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10d      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d047      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e044      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d018      	beq.n	8002f36 <RCCEx_PLLSAI2_Config+0x86>
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d825      	bhi.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d002      	beq.n	8002f12 <RCCEx_PLLSAI2_Config+0x62>
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d009      	beq.n	8002f24 <RCCEx_PLLSAI2_Config+0x74>
 8002f10:	e020      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f12:	4b55      	ldr	r3, [pc, #340]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11d      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f22:	e01a      	b.n	8002f5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e013      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f36:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f42:	4b49      	ldr	r3, [pc, #292]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f52:	e006      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	e004      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	4939      	ldr	r1, [pc, #228]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d167      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a35      	ldr	r2, [pc, #212]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fd fcae 	bl	80008f8 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa0:	f7fd fcaa 	bl	80008f8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ef      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d14a      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	0211      	lsls	r1, r2, #8
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	0912      	lsrs	r2, r2, #4
 8002fe4:	0452      	lsls	r2, r2, #17
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	491f      	ldr	r1, [pc, #124]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	614b      	str	r3, [r1, #20]
 8002fee:	e011      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	0211      	lsls	r1, r2, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	0852      	lsrs	r2, r2, #1
 8003008:	3a01      	subs	r2, #1
 800300a:	0652      	lsls	r2, r2, #25
 800300c:	430a      	orrs	r2, r1
 800300e:	4916      	ldr	r1, [pc, #88]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fd fc6a 	bl	80008f8 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003028:	f7fd fc66 	bl	80008f8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
          break;
 800303a:	e005      	b.n	8003048 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4904      	ldr	r1, [pc, #16]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003088:	d10c      	bne.n	80030a4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800308a:	4b6e      	ldr	r3, [pc, #440]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003094:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800309c:	d112      	bne.n	80030c4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e00f      	b.n	80030c4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d10b      	bne.n	80030c4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80030b6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030be:	d101      	bne.n	80030c4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80030c0:	4b61      	ldr	r3, [pc, #388]	; (8003248 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80030c2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80b4 	bne.w	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d6:	d003      	beq.n	80030e0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030de:	d135      	bne.n	800314c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ec:	f040 80a1 	bne.w	8003232 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80030f0:	4b54      	ldr	r3, [pc, #336]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 809a 	beq.w	8003232 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	3301      	adds	r3, #1
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800311c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003124:	4b47      	ldr	r3, [pc, #284]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003130:	2311      	movs	r3, #17
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e001      	b.n	800313a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003136:	2307      	movs	r3, #7
 8003138:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	fb02 f203 	mul.w	r2, r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800314a:	e072      	b.n	8003232 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d133      	bne.n	80031ba <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315e:	d169      	bne.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d063      	beq.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	3301      	adds	r3, #1
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003180:	4b30      	ldr	r3, [pc, #192]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800319e:	2311      	movs	r3, #17
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e001      	b.n	80031a8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80031a4:	2307      	movs	r3, #7
 80031a6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	fb02 f203 	mul.w	r2, r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e03c      	b.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d003      	beq.n	80031ca <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c8:	d134      	bne.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d6:	d12d      	bne.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d027      	beq.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	3301      	adds	r3, #1
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003202:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003216:	2311      	movs	r3, #17
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e001      	b.n	8003220 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800321c:	2307      	movs	r3, #7
 800321e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	fb02 f203 	mul.w	r2, r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e000      	b.n	8003234 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003232:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003234:	69fb      	ldr	r3, [r7, #28]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	001fff68 	.word	0x001fff68

0800324c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e022      	b.n	80032a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd f9db 	bl	800062c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f814 	bl	80032ac <HAL_SD_InitCard>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00a      	b.n	80032a4 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b090      	sub	sp, #64	; 0x40
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80032c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032cc:	f7fe ff92 	bl	80021f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e08d      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	09db      	lsrs	r3, r3, #7
 80032f0:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_SD_InitCard+0x164>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	3b02      	subs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681d      	ldr	r5, [r3, #0]
 8003300:	466c      	mov	r4, sp
 8003302:	f107 0318 	add.w	r3, r7, #24
 8003306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800330a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003314:	4628      	mov	r0, r5
 8003316:	f001 f9eb 	bl	80046f0 <SDMMC_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e06d      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fa20 	bl	8004786 <SDMMC_PowerState_ON>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800334c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e057      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003366:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	3302      	adds	r3, #2
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_SD_InitCard+0x168>)
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	3301      	adds	r3, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fac6 	bl	8000910 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f857 	bl	8004438 <SD_PowerON>
 800338a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02e      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 ff78 	bl	80042a0 <SD_InitCard>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01b      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fa67 	bl	80048ac <SDMMC_CmdBlockLength>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00f      	beq.n	8003406 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_SD_InitCard+0x16c>)
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	014f8b59 	.word	0x014f8b59
 8003414:	00012110 	.word	0x00012110
 8003418:	004005ff 	.word	0x004005ff

0800341c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b092      	sub	sp, #72	; 0x48
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800342a:	f7fd fa65 	bl	80008f8 <HAL_GetTick>
 800342e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1bd      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 81b0 	bne.w	80037bc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	429a      	cmp	r2, r3
 800346e:	d907      	bls.n	8003480 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e1a4      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2203      	movs	r2, #3
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	2b01      	cmp	r3, #1
 8003496:	d002      	beq.n	800349e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	025b      	lsls	r3, r3, #9
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80034aa:	2390      	movs	r3, #144	; 0x90
 80034ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80034ae:	2302      	movs	r3, #2
 80034b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80034b6:	2301      	movs	r3, #1
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f107 0214 	add.w	r2, r7, #20
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f9c5 	bl	8004854 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d90a      	bls.n	80034e6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fa29 	bl	8004934 <SDMMC_CmdReadMultiBlock>
 80034e2:	6478      	str	r0, [r7, #68]	; 0x44
 80034e4:	e009      	b.n	80034fa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f9fc 	bl	80048f0 <SDMMC_CmdReadSingleBlock>
 80034f8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a7a      	ldr	r2, [pc, #488]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e151      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800352a:	e061      	b.n	80035f0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03c      	beq.n	80035b4 <HAL_SD_ReadBlocks+0x198>
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d039      	beq.n	80035b4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003540:	2300      	movs	r3, #0
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
 8003544:	e033      	b.n	80035ae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f001 f8fd 	bl	800474a <SDMMC_ReadFIFO>
 8003550:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	b2da      	uxtb	r2, r3
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	3301      	adds	r3, #1
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003562:	3b01      	subs	r3, #1
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b2da      	uxtb	r2, r3
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	3301      	adds	r3, #1
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	3b01      	subs	r3, #1
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	b2da      	uxtb	r2, r3
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	3301      	adds	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	3b01      	subs	r3, #1
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	0e1b      	lsrs	r3, r3, #24
 8003596:	b2da      	uxtb	r2, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	3301      	adds	r3, #1
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	3b01      	subs	r3, #1
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	3301      	adds	r3, #1
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	2b07      	cmp	r3, #7
 80035b2:	d9c8      	bls.n	8003546 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035b4:	f7fd f9a0 	bl	80008f8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d902      	bls.n	80035ca <HAL_SD_ReadBlocks+0x1ae>
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d112      	bne.n	80035f0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0ec      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d096      	beq.n	800352c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_SD_ReadBlocks+0x236>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d91f      	bls.n	8003652 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	2b03      	cmp	r3, #3
 8003618:	d01b      	beq.n	8003652 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f9ee 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8003624:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363a:	431a      	orrs	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0bb      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f043 0208 	orr.w	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0a1      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f043 0202 	orr.w	r2, r3, #2
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e087      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d064      	beq.n	8003792 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <HAL_SD_ReadBlocks+0x2d4>)
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06d      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
 80036ee:	bf00      	nop
 80036f0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f826 	bl	800474a <SDMMC_ReadFIFO>
 80036fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	b2da      	uxtb	r2, r3
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	3301      	adds	r3, #1
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	3b01      	subs	r3, #1
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2da      	uxtb	r2, r3
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	3301      	adds	r3, #1
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003726:	3b01      	subs	r3, #1
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b2da      	uxtb	r2, r3
 8003730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003732:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	3301      	adds	r3, #1
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	3b01      	subs	r3, #1
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	0e1b      	lsrs	r3, r3, #24
 8003744:	b2da      	uxtb	r2, r3
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	3301      	adds	r3, #1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003752:	3b01      	subs	r3, #1
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003756:	f7fd f8cf 	bl	80008f8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003762:	429a      	cmp	r2, r3
 8003764:	d902      	bls.n	800376c <HAL_SD_ReadBlocks+0x350>
 8003766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d112      	bne.n	8003792 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_SD_ReadBlocks+0x3b8>)
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e01b      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SD_ReadBlocks+0x38a>
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1a6      	bne.n	80036f4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e006      	b.n	80037ca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3748      	adds	r7, #72	; 0x48
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	004005ff 	.word	0x004005ff

080037d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b092      	sub	sp, #72	; 0x48
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037e6:	f7fd f887 	bl	80008f8 <HAL_GetTick>
 80037ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e165      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 8158 	bne.w	8003ac8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800381e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	429a      	cmp	r2, r3
 800382a:	d907      	bls.n	800383c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e14c      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	2b01      	cmp	r3, #1
 8003852:	d002      	beq.n	800385a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	025b      	lsls	r3, r3, #9
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800385e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003866:	2390      	movs	r3, #144	; 0x90
 8003868:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003872:	2301      	movs	r3, #1
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f107 0218 	add.w	r2, r7, #24
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 ffe7 	bl	8004854 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d90a      	bls.n	80038a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003898:	4618      	mov	r0, r3
 800389a:	f001 f88f 	bl	80049bc <SDMMC_CmdWriteMultiBlock>
 800389e:	6478      	str	r0, [r7, #68]	; 0x44
 80038a0:	e009      	b.n	80038b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2210      	movs	r2, #16
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f862 	bl	8004978 <SDMMC_CmdWriteSingleBlock>
 80038b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d012      	beq.n	80038e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a87      	ldr	r2, [pc, #540]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0f9      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80038e6:	e065      	b.n	80039b4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <HAL_SD_WriteBlocks+0x1a0>
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03d      	beq.n	8003978 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003900:	e037      	b.n	8003972 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	3301      	adds	r3, #1
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	3b01      	subs	r3, #1
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	021a      	lsls	r2, r3, #8
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	3301      	adds	r3, #1
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	3b01      	subs	r3, #1
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	3301      	adds	r3, #1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003940:	3b01      	subs	r3, #1
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	061a      	lsls	r2, r3, #24
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	3301      	adds	r3, #1
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	3b01      	subs	r3, #1
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f107 0214 	add.w	r2, r7, #20
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fefc 	bl	8004764 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	3301      	adds	r3, #1
 8003970:	643b      	str	r3, [r7, #64]	; 0x40
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	2b07      	cmp	r3, #7
 8003976:	d9c4      	bls.n	8003902 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003978:	f7fc ffbe 	bl	80008f8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003984:	429a      	cmp	r2, r3
 8003986:	d902      	bls.n	800398e <HAL_SD_WriteBlocks+0x1b6>
 8003988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398a:	2b00      	cmp	r3, #0
 800398c:	d112      	bne.n	80039b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a53      	ldr	r2, [pc, #332]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e090      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d092      	beq.n	80038e8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d022      	beq.n	8003a16 <HAL_SD_WriteBlocks+0x23e>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d91f      	bls.n	8003a16 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d01b      	beq.n	8003a16 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f80c 	bl	8004a00 <SDMMC_CmdStopTransfer>
 80039e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3a      	ldr	r2, [pc, #232]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e05f      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f043 0208 	orr.w	r2, r3, #8
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e045      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d012      	beq.n	8003a7e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	f043 0202 	orr.w	r2, r3, #2
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02b      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d012      	beq.n	8003ab2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <HAL_SD_WriteBlocks+0x308>)
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e011      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e006      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3748      	adds	r7, #72	; 0x48
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	004005ff 	.word	0x004005ff

08003ae4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_SD_IRQHandler+0x2e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fd4a 	bl	80045a4 <SD_Read_IT>
 8003b10:	e155      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808f 	beq.w	8003c40 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003b3a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003b3e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d039      	beq.n	8003bce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_SD_IRQHandler+0x8a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d011      	beq.n	8003b92 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff44 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8003b78:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f91f 	bl	8003dd0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_SD_IRQHandler+0xda>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f001 fb6a 	bl	8005298 <HAL_SD_RxCpltCallback>
 8003bc4:	e0fb      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 fb5c 	bl	8005284 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003bcc:	e0f7      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80f2 	beq.w	8003dbe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d011      	beq.n	8003c08 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ff09 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8003bee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8e4 	bl	8003dd0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 80d5 	bne.w	8003dbe <HAL_SD_IRQHandler+0x2da>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 80cf 	bne.w	8003dbe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0208 	bic.w	r2, r2, #8
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 fb23 	bl	8005284 <HAL_SD_TxCpltCallback>
}
 8003c3e:	e0be      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_SD_IRQHandler+0x17c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fcf4 	bl	8004646 <SD_Write_IT>
 8003c5e:	e0ae      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a7 	beq.w	8003dbe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	f043 0208 	orr.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fe82 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f855 	bl	8003dd0 <HAL_SD_ErrorCallback>
}
 8003d26:	e04a      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d045      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_SD_IRQHandler+0x262>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d011      	beq.n	8003d6a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_SD_IRQHandler+0x2e4>)
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc ff11 	bl	8000b7a <HAL_DMA_Abort_IT>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02f      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fa2e 	bl	80041c4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d68:	e029      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_SD_IRQHandler+0x29a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d011      	beq.n	8003da2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_SD_IRQHandler+0x2e8>)
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fef5 	bl	8000b7a <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fa49 	bl	8004232 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003da0:	e00d      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 fa5a 	bl	8005270 <HAL_SD_AbortCallback>
}
 8003dbc:	e7ff      	b.n	8003dbe <HAL_SD_IRQHandler+0x2da>
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	080041c5 	.word	0x080041c5
 8003dcc:	08004233 	.word	0x08004233

08003dd0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df2:	0f9b      	lsrs	r3, r3, #30
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e10:	0e1b      	lsrs	r3, r3, #24
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	0d1b      	lsrs	r3, r3, #20
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e62:	0bdb      	lsrs	r3, r3, #15
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e74:	0b9b      	lsrs	r3, r3, #14
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e86:	0b5b      	lsrs	r3, r3, #13
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e98:	0b1b      	lsrs	r3, r3, #12
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d163      	bne.n	8003f7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb8:	009a      	lsls	r2, r3, #2
 8003eba:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ec4:	0f92      	lsrs	r2, r2, #30
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed0:	0edb      	lsrs	r3, r3, #27
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	0e1b      	lsrs	r3, r3, #24
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef4:	0d5b      	lsrs	r3, r3, #21
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	0c9b      	lsrs	r3, r3, #18
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f18:	0bdb      	lsrs	r3, r3, #15
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	7e1b      	ldrb	r3, [r3, #24]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f46:	fb02 f203 	mul.w	r2, r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	7a1b      	ldrb	r3, [r3, #8]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f68:	0a52      	lsrs	r2, r2, #9
 8003f6a:	fb02 f203 	mul.w	r2, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
 8003f7a:	e031      	b.n	8003fe0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11d      	bne.n	8003fc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	029a      	lsls	r2, r3, #10
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
 8003fbe:	e00f      	b.n	8003fe0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	; (8004128 <HAL_SD_GetCardCSD+0x344>)
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e09d      	b.n	800411c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe4:	0b9b      	lsrs	r3, r3, #14
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	09db      	lsrs	r3, r3, #7
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400e:	b2da      	uxtb	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	0fdb      	lsrs	r3, r3, #31
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	0f5b      	lsrs	r3, r3, #29
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	b2da      	uxtb	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	0e9b      	lsrs	r3, r3, #26
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	b2da      	uxtb	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	0d9b      	lsrs	r3, r3, #22
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	0d5b      	lsrs	r3, r3, #21
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	0bdb      	lsrs	r3, r3, #15
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	0b9b      	lsrs	r3, r3, #14
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	0b5b      	lsrs	r3, r3, #13
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	0b1b      	lsrs	r3, r3, #12
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	004005ff 	.word	0x004005ff

0800412c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004190:	f107 030c 	add.w	r3, r7, #12
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9dc 	bl	8004554 <SD_SendStatus>
 800419c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	0a5b      	lsrs	r3, r3, #9
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80041ba:	693b      	ldr	r3, [r7, #16]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80041da:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ffd1 	bl	8004184 <HAL_SD_GetCardState>
 80041e2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d002      	beq.n	80041fe <SD_DMATxAbort+0x3a>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d10a      	bne.n	8004214 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fbfc 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	431a      	orrs	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f001 f827 	bl	8005270 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004222:	e002      	b.n	800422a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fdd3 	bl	8003dd0 <HAL_SD_ErrorCallback>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f240 523a 	movw	r2, #1338	; 0x53a
 8004248:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff9a 	bl	8004184 <HAL_SD_GetCardState>
 8004250:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b06      	cmp	r3, #6
 8004264:	d002      	beq.n	800426c <SD_DMARxAbort+0x3a>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d10a      	bne.n	8004282 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fbc5 	bl	8004a00 <SDMMC_CmdStopTransfer>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fff0 	bl	8005270 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004290:	e002      	b.n	8004298 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fd9c 	bl	8003dd0 <HAL_SD_ErrorCallback>
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b094      	sub	sp, #80	; 0x50
 80042a4:	af04      	add	r7, sp, #16
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fa77 	bl	80047a4 <SDMMC_GetPowerState>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042c0:	e0b6      	b.n	8004430 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d02f      	beq.n	800432a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fc5d 	bl	8004b8e <SDMMC_CmdSendCID>
 80042d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80042dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042de:	e0a7      	b.n	8004430 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 faa1 	bl	800482e <SDMMC_GetResponse>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2104      	movs	r1, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fa98 	bl	800482e <SDMMC_GetResponse>
 80042fe:	4602      	mov	r2, r0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2108      	movs	r1, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fa8f 	bl	800482e <SDMMC_GetResponse>
 8004310:	4602      	mov	r2, r0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	210c      	movs	r1, #12
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa86 	bl	800482e <SDMMC_GetResponse>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	2b03      	cmp	r3, #3
 8004330:	d00d      	beq.n	800434e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f107 020e 	add.w	r2, r7, #14
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fc63 	bl	8004c08 <SDMMC_CmdSetRelAdd>
 8004342:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <SD_InitCard+0xae>
    {
      return errorstate;
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	e070      	b.n	8004430 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	2b03      	cmp	r3, #3
 8004354:	d036      	beq.n	80043c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004356:	89fb      	ldrh	r3, [r7, #14]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f000 fc2d 	bl	8004bca <SDMMC_CmdSendCSD>
 8004370:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	e059      	b.n	8004430 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa53 	bl	800482e <SDMMC_GetResponse>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2104      	movs	r1, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa4a 	bl	800482e <SDMMC_GetResponse>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2108      	movs	r1, #8
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fa41 	bl	800482e <SDMMC_GetResponse>
 80043ac:	4602      	mov	r2, r0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	210c      	movs	r1, #12
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fa38 	bl	800482e <SDMMC_GetResponse>
 80043be:	4602      	mov	r2, r0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2104      	movs	r1, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa2f 	bl	800482e <SDMMC_GetResponse>
 80043d0:	4603      	mov	r3, r0
 80043d2:	0d1a      	lsrs	r2, r3, #20
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fd00 	bl	8003de4 <HAL_SD_GetCardCSD>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ee:	e01f      	b.n	8004430 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	4608      	mov	r0, r1
 8004402:	f000 fb1f 	bl	8004a44 <SDMMC_CmdSelDesel>
 8004406:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <SD_InitCard+0x172>
  {
    return errorstate;
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004410:	e00e      	b.n	8004430 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681d      	ldr	r5, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	466c      	mov	r4, sp
 800441a:	f103 0210 	add.w	r2, r3, #16
 800441e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004424:	3304      	adds	r3, #4
 8004426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004428:	4628      	mov	r0, r5
 800442a:	f000 f961 	bl	80046f0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	; 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bdb0      	pop	{r4, r5, r7, pc}

08004438 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fb1a 	bl	8004a8a <SDMMC_CmdGoIdleState>
 8004456:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <SD_PowerON+0x2a>
  {
    return errorstate;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	e072      	b.n	8004548 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fb2d 	bl	8004ac6 <SDMMC_CmdOperCond>
 800446c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb03 	bl	8004a8a <SDMMC_CmdGoIdleState>
 8004484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <SD_PowerON+0x5e>
    {
      return errorstate;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	e05b      	b.n	8004548 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	2b01      	cmp	r3, #1
 800449c:	d137      	bne.n	800450e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb2d 	bl	8004b04 <SDMMC_CmdAppCommand>
 80044aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02d      	beq.n	800450e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044b6:	e047      	b.n	8004548 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb20 	bl	8004b04 <SDMMC_CmdAppCommand>
 80044c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	e03b      	b.n	8004548 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	491e      	ldr	r1, [pc, #120]	; (8004550 <SD_PowerON+0x118>)
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb36 	bl	8004b48 <SDMMC_CmdAppOperCommand>
 80044dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044e8:	e02e      	b.n	8004548 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f99c 	bl	800482e <SDMMC_GetResponse>
 80044f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	0fdb      	lsrs	r3, r3, #31
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <SD_PowerON+0xcc>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <SD_PowerON+0xce>
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]

    count++;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004514:	4293      	cmp	r3, r2
 8004516:	d802      	bhi.n	800451e <SD_PowerON+0xe6>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0cc      	beq.n	80044b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004524:	4293      	cmp	r3, r2
 8004526:	d902      	bls.n	800452e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452c:	e00c      	b.n	8004548 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
 800453e:	e002      	b.n	8004546 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	c1100000 	.word	0xc1100000

08004554 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004568:	e018      	b.n	800459c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f000 fb67 	bl	8004c4a <SDMMC_CmdSendStatus>
 800457c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	e009      	b.n	800459c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f94d 	bl	800482e <SDMMC_GetResponse>
 8004594:	4602      	mov	r2, r0
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d03f      	beq.n	800463e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e033      	b.n	800462c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f8be 	bl	800474a <SDMMC_ReadFIFO>
 80045ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3b01      	subs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
      tmp++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3b01      	subs	r3, #1
 8004624:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3301      	adds	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b07      	cmp	r3, #7
 8004630:	d9c8      	bls.n	80045c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d043      	beq.n	80046e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e037      	b.n	80046d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3b01      	subs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3b01      	subs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	061a      	lsls	r2, r3, #24
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3b01      	subs	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f107 0208 	add.w	r2, r7, #8
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f84a 	bl	8004764 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d9c4      	bls.n	8004666 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80046f0:	b084      	sub	sp, #16
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	f107 001c 	add.w	r0, r7, #28
 80046fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800470e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8004712:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004716:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800471a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800471e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800472e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	b004      	add	sp, #16
 8004748:	4770      	bx	lr

0800474a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004794:	2002      	movs	r0, #2
 8004796:	f7fc f8bb 	bl	8000910 <HAL_Delay>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0303 	and.w	r3, r3, #3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80047e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80047ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80047fa:	f023 030f 	bic.w	r3, r3, #15
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	b2db      	uxtb	r3, r3
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3314      	adds	r3, #20
 800483c:	461a      	mov	r2, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800487a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004880:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004886:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800489e:	2300      	movs	r3, #0

}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048ba:	2310      	movs	r3, #16
 80048bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048be:	2340      	movs	r3, #64	; 0x40
 80048c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff74 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	2110      	movs	r1, #16
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9d6 	bl	8004c90 <SDMMC_GetCmdResp1>
 80048e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048e6:	69fb      	ldr	r3, [r7, #28]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048fe:	2311      	movs	r3, #17
 8004900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004902:	2340      	movs	r3, #64	; 0x40
 8004904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800490a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004910:	f107 0308 	add.w	r3, r7, #8
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff52 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	2111      	movs	r1, #17
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9b4 	bl	8004c90 <SDMMC_GetCmdResp1>
 8004928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800492a:	69fb      	ldr	r3, [r7, #28]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004942:	2312      	movs	r3, #18
 8004944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004954:	f107 0308 	add.w	r3, r7, #8
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff30 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	2112      	movs	r1, #18
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f992 	bl	8004c90 <SDMMC_GetCmdResp1>
 800496c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496e:	69fb      	ldr	r3, [r7, #28]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004986:	2318      	movs	r3, #24
 8004988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ff0e 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	2118      	movs	r1, #24
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f970 	bl	8004c90 <SDMMC_GetCmdResp1>
 80049b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049b2:	69fb      	ldr	r3, [r7, #28]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049ca:	2319      	movs	r3, #25
 80049cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff feec 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	2119      	movs	r1, #25
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f94e 	bl	8004c90 <SDMMC_GetCmdResp1>
 80049f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a10:	2340      	movs	r3, #64	; 0x40
 8004a12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fecb 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <SDMMC_CmdStopTransfer+0x40>)
 8004a2c:	210c      	movs	r1, #12
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f92e 	bl	8004c90 <SDMMC_GetCmdResp1>
 8004a34:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	05f5e100 	.word	0x05f5e100

08004a44 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a54:	2307      	movs	r3, #7
 8004a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a58:	2340      	movs	r3, #64	; 0x40
 8004a5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a64:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a66:	f107 0310 	add.w	r3, r7, #16
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fea7 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	2107      	movs	r1, #7
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f909 	bl	8004c90 <SDMMC_GetCmdResp1>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fe86 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb23 	bl	8005100 <SDMMC_GetCmdError>
 8004aba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004abc:	69fb      	ldr	r3, [r7, #28]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b088      	sub	sp, #32
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004ace:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ad8:	2340      	movs	r3, #64	; 0x40
 8004ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fe67 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fab6 	bl	8005064 <SDMMC_GetCmdResp7>
 8004af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afa:	69fb      	ldr	r3, [r7, #28]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b12:	2337      	movs	r3, #55	; 0x37
 8004b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fe48 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	2137      	movs	r1, #55	; 0x37
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8aa 	bl	8004c90 <SDMMC_GetCmdResp1>
 8004b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b5e:	2329      	movs	r3, #41	; 0x29
 8004b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b70:	f107 0308 	add.w	r3, r7, #8
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fe22 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f9bd 	bl	8004efc <SDMMC_GetCmdResp3>
 8004b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b84:	69fb      	ldr	r3, [r7, #28]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b088      	sub	sp, #32
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b9e:	23c0      	movs	r3, #192	; 0xc0
 8004ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe04 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f957 	bl	8004e6c <SDMMC_GetCmdResp2>
 8004bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b088      	sub	sp, #32
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004bd8:	2309      	movs	r3, #9
 8004bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004bdc:	23c0      	movs	r3, #192	; 0xc0
 8004bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fde5 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f938 	bl	8004e6c <SDMMC_GetCmdResp2>
 8004bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c16:	2303      	movs	r3, #3
 8004c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fdc6 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	2103      	movs	r1, #3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f99d 	bl	8004f78 <SDMMC_GetCmdResp6>
 8004c3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c40:	69fb      	ldr	r3, [r7, #28]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004c58:	230d      	movs	r3, #13
 8004c5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fda5 	bl	80047c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	210d      	movs	r1, #13
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f807 	bl	8004c90 <SDMMC_GetCmdResp1>
 8004c82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c84:	69fb      	ldr	r3, [r7, #28]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c9e:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <SDMMC_GetCmdResp1+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	; (8004e64 <SDMMC_GetCmdResp1+0x1d4>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	0a5a      	lsrs	r2, r3, #9
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1e5a      	subs	r2, r3, #1
 8004cb6:	61fa      	str	r2, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cc0:	e0c9      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ef      	beq.n	8004cb2 <SDMMC_GetCmdResp1+0x22>
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ea      	bne.n	8004cb2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2204      	movs	r2, #4
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	e0b1      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d004      	beq.n	8004d08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0a6      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	22c5      	movs	r2, #197	; 0xc5
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fd80 	bl	8004814 <SDMMC_GetCommandResponse>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	7afb      	ldrb	r3, [r7, #11]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d001      	beq.n	8004d22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e099      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004d22:	2100      	movs	r1, #0
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fd82 	bl	800482e <SDMMC_GetResponse>
 8004d2a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <SDMMC_GetCmdResp1+0x1d8>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e08d      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	da02      	bge.n	8004d46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d44:	e087      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	e080      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	e079      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d70:	e071      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d80:	e069      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d90:	e061      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da0:	e059      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db0:	e051      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dc0:	e049      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dd0:	e041      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de0:	e039      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df0:	e031      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004dfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e00:	e029      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e10:	e021      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e20:	e019      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e30:	e011      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e40:	e009      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004e4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e50:	e001      	b.n	8004e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000
 8004e64:	10624dd3 	.word	0x10624dd3
 8004e68:	fdffe008 	.word	0xfdffe008

08004e6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e74:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <SDMMC_GetCmdResp2+0x88>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <SDMMC_GetCmdResp2+0x8c>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0a5b      	lsrs	r3, r3, #9
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1e5a      	subs	r2, r3, #1
 8004e8e:	60fa      	str	r2, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e98:	e026      	b.n	8004ee8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ef      	beq.n	8004e8a <SDMMC_GetCmdResp2+0x1e>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	e00e      	b.n	8004ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e003      	b.n	8004ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	22c5      	movs	r2, #197	; 0xc5
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	10624dd3 	.word	0x10624dd3

08004efc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <SDMMC_GetCmdResp3+0x74>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <SDMMC_GetCmdResp3+0x78>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0a5b      	lsrs	r3, r3, #9
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f28:	e01b      	b.n	8004f62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <SDMMC_GetCmdResp3+0x1e>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ea      	bne.n	8004f1a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f56:	2304      	movs	r3, #4
 8004f58:	e003      	b.n	8004f62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	22c5      	movs	r2, #197	; 0xc5
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000000 	.word	0x20000000
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	460b      	mov	r3, r1
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f86:	4b35      	ldr	r3, [pc, #212]	; (800505c <SDMMC_GetCmdResp6+0xe4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a35      	ldr	r2, [pc, #212]	; (8005060 <SDMMC_GetCmdResp6+0xe8>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	0a5b      	lsrs	r3, r3, #9
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	61fa      	str	r2, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fa6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004faa:	e052      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ef      	beq.n	8004f9c <SDMMC_GetCmdResp6+0x24>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ea      	bne.n	8004f9c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fd8:	2304      	movs	r3, #4
 8004fda:	e03a      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02f      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fc0e 	bl	8004814 <SDMMC_GetCommandResponse>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d001      	beq.n	8005006 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005002:	2301      	movs	r3, #1
 8005004:	e025      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	22c5      	movs	r2, #197	; 0xc5
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800500c:	2100      	movs	r1, #0
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fc0d 	bl	800482e <SDMMC_GetResponse>
 8005014:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	e011      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503c:	e009      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800504c:	e001      	b.n	8005052 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800504e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000000 	.word	0x20000000
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800506c:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <SDMMC_GetCmdResp7+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <SDMMC_GetCmdResp7+0x98>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0a5b      	lsrs	r3, r3, #9
 8005078:	f241 3288 	movw	r2, #5000	; 0x1388
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1e5a      	subs	r2, r3, #1
 8005086:	60fa      	str	r2, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800508c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005090:	e02c      	b.n	80050ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <SDMMC_GetCmdResp7+0x1e>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ea      	bne.n	8005082 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2204      	movs	r2, #4
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050be:	2304      	movs	r3, #4
 80050c0:	e014      	b.n	80050ec <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e009      	b.n	80050ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050ea:	2300      	movs	r3, #0

}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000000 	.word	0x20000000
 80050fc:	10624dd3 	.word	0x10624dd3

08005100 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005108:	4b11      	ldr	r3, [pc, #68]	; (8005150 <SDMMC_GetCmdError+0x50>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <SDMMC_GetCmdError+0x54>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0a5b      	lsrs	r3, r3, #9
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	60fa      	str	r2, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800512c:	e009      	b.n	8005142 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f1      	beq.n	800511e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	22c5      	movs	r2, #197	; 0xc5
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000000 	.word	0x20000000
 8005154:	10624dd3 	.word	0x10624dd3

08005158 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800515c:	4904      	ldr	r1, [pc, #16]	; (8005170 <MX_FATFS_Init+0x18>)
 800515e:	4805      	ldr	r0, [pc, #20]	; (8005174 <MX_FATFS_Init+0x1c>)
 8005160:	f003 f99c 	bl	800849c <FATFS_LinkDriver>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <MX_FATFS_Init+0x20>)
 800516a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200002e8 	.word	0x200002e8
 8005174:	08008784 	.word	0x08008784
 8005178:	200002e4 	.word	0x200002e4

0800517c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005180:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005196:	f000 f89e 	bl	80052d6 <BSP_SD_IsDetected>
 800519a:	4603      	mov	r3, r0
 800519c:	2b01      	cmp	r3, #1
 800519e:	d001      	beq.n	80051a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e005      	b.n	80051b0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80051a4:	4804      	ldr	r0, [pc, #16]	; (80051b8 <BSP_SD_Init+0x2c>)
 80051a6:	f7fe f851 	bl	800324c <HAL_SD_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	2000025c 	.word	0x2000025c

080051bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	4806      	ldr	r0, [pc, #24]	; (80051f4 <BSP_SD_ReadBlocks+0x38>)
 80051da:	f7fe f91f 	bl	800341c <HAL_SD_ReadBlocks>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	2000025c 	.word	0x2000025c

080051f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	4806      	ldr	r0, [pc, #24]	; (8005230 <BSP_SD_WriteBlocks+0x38>)
 8005216:	f7fe fadf 	bl	80037d8 <HAL_SD_WriteBlocks>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2000025c 	.word	0x2000025c

08005234 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005238:	4805      	ldr	r0, [pc, #20]	; (8005250 <BSP_SD_GetCardState+0x1c>)
 800523a:	f7fe ffa3 	bl	8004184 <HAL_SD_GetCardState>
 800523e:	4603      	mov	r3, r0
 8005240:	2b04      	cmp	r3, #4
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000025c 	.word	0x2000025c

08005254 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4803      	ldr	r0, [pc, #12]	; (800526c <BSP_SD_GetCardInfo+0x18>)
 8005260:	f7fe ff64 	bl	800412c <HAL_SD_GetCardInfo>
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	2000025c 	.word	0x2000025c

08005270 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005278:	f000 f818 	bl	80052ac <BSP_SD_AbortCallback>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800528c:	f000 f815 	bl	80052ba <BSP_SD_WriteCpltCallback>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80052a0:	f000 f812 	bl	80052c8 <BSP_SD_ReadCpltCallback>
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0

}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80052ba:	b480      	push	{r7}
 80052bc:	af00      	add	r7, sp, #0

}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0

}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80052dc:	2301      	movs	r3, #1
 80052de:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80052e0:	f000 f80b 	bl	80052fa <BSP_PlatformIsDetected>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80052ea:	2300      	movs	r3, #0
 80052ec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	b2db      	uxtb	r3, r3
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005300:	2301      	movs	r3, #1
 8005302:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800530c:	f7fb fe20 	bl	8000f50 <HAL_GPIO_ReadPin>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005316:	2300      	movs	r3, #0
 8005318:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800531a:	79fb      	ldrb	r3, [r7, #7]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <SD_CheckStatus+0x38>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005334:	f7ff ff7e 	bl	8005234 <BSP_SD_GetCardState>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <SD_CheckStatus+0x38>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	4b04      	ldr	r3, [pc, #16]	; (800535c <SD_CheckStatus+0x38>)
 800534c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800534e:	4b03      	ldr	r3, [pc, #12]	; (800535c <SD_CheckStatus+0x38>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20000009 	.word	0x20000009

08005360 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <SD_initialize+0x38>)
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005370:	f7ff ff0c 	bl	800518c <BSP_SD_Init>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ffd1 	bl	8005324 <SD_CheckStatus>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	4b04      	ldr	r3, [pc, #16]	; (8005398 <SD_initialize+0x38>)
 8005388:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <SD_initialize+0x38>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000009 	.word	0x20000009

0800539c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ffbb 	bl	8005324 <SD_CheckStatus>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7ff fef1 	bl	80051bc <BSP_SD_ReadBlocks>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d107      	bne.n	80053f0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80053e0:	bf00      	nop
 80053e2:	f7ff ff27 	bl	8005234 <BSP_SD_GetCardState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1fa      	bne.n	80053e2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	68b8      	ldr	r0, [r7, #8]
 8005418:	f7ff feee 	bl	80051f8 <BSP_SD_WriteBlocks>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005422:	bf00      	nop
 8005424:	f7ff ff06 	bl	8005234 <BSP_SD_GetCardState>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1fa      	bne.n	8005424 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	603a      	str	r2, [r7, #0]
 8005446:	71fb      	strb	r3, [r7, #7]
 8005448:	460b      	mov	r3, r1
 800544a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005452:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <SD_ioctl+0xac>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <SD_ioctl+0x28>
 8005460:	2303      	movs	r3, #3
 8005462:	e03c      	b.n	80054de <SD_ioctl+0xa2>

  switch (cmd)
 8005464:	79bb      	ldrb	r3, [r7, #6]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d834      	bhi.n	80054d4 <SD_ioctl+0x98>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <SD_ioctl+0x34>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005481 	.word	0x08005481
 8005474:	08005489 	.word	0x08005489
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054bb 	.word	0x080054bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005486:	e028      	b.n	80054da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005488:	f107 030c 	add.w	r3, r7, #12
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fee1 	bl	8005254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800549e:	e01c      	b.n	80054da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80054a0:	f107 030c 	add.w	r3, r7, #12
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fed5 	bl	8005254 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80054b8:	e00f      	b.n	80054da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fec8 	bl	8005254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	0a5a      	lsrs	r2, r3, #9
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80054d2:	e002      	b.n	80054da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80054da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3730      	adds	r7, #48	; 0x30
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000009 	.word	0x20000009

080054ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	4a08      	ldr	r2, [pc, #32]	; (800551c <disk_status+0x30>)
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	79fa      	ldrb	r2, [r7, #7]
 8005504:	4905      	ldr	r1, [pc, #20]	; (800551c <disk_status+0x30>)
 8005506:	440a      	add	r2, r1
 8005508:	7a12      	ldrb	r2, [r2, #8]
 800550a:	4610      	mov	r0, r2
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000250 	.word	0x20000250

08005520 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <disk_initialize+0x48>)
 8005532:	5cd3      	ldrb	r3, [r2, r3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d111      	bne.n	800555c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <disk_initialize+0x48>)
 800553c:	2101      	movs	r1, #1
 800553e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <disk_initialize+0x48>)
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	79fa      	ldrb	r2, [r7, #7]
 800554e:	4906      	ldr	r1, [pc, #24]	; (8005568 <disk_initialize+0x48>)
 8005550:	440a      	add	r2, r1
 8005552:	7a12      	ldrb	r2, [r2, #8]
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000250 	.word	0x20000250

0800556c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <disk_read+0x3c>)
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	689c      	ldr	r4, [r3, #8]
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <disk_read+0x3c>)
 800558c:	4413      	add	r3, r2
 800558e:	7a18      	ldrb	r0, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	47a0      	blx	r4
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]
  return res;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000250 	.word	0x20000250

080055ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	4a0a      	ldr	r2, [pc, #40]	; (80055e8 <disk_write+0x3c>)
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68dc      	ldr	r4, [r3, #12]
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	4a07      	ldr	r2, [pc, #28]	; (80055e8 <disk_write+0x3c>)
 80055cc:	4413      	add	r3, r2
 80055ce:	7a18      	ldrb	r0, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	47a0      	blx	r4
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]
  return res;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd90      	pop	{r4, r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000250 	.word	0x20000250

080055ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	603a      	str	r2, [r7, #0]
 80055f6:	71fb      	strb	r3, [r7, #7]
 80055f8:	460b      	mov	r3, r1
 80055fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <disk_ioctl+0x38>)
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	79fa      	ldrb	r2, [r7, #7]
 800560a:	4906      	ldr	r1, [pc, #24]	; (8005624 <disk_ioctl+0x38>)
 800560c:	440a      	add	r2, r1
 800560e:	7a10      	ldrb	r0, [r2, #8]
 8005610:	79b9      	ldrb	r1, [r7, #6]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4798      	blx	r3
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]
  return res;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000250 	.word	0x20000250

08005628 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3301      	adds	r3, #1
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005638:	89fb      	ldrh	r3, [r7, #14]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	b21a      	sxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	b21b      	sxth	r3, r3
 8005644:	4313      	orrs	r3, r2
 8005646:	b21b      	sxth	r3, r3
 8005648:	81fb      	strh	r3, [r7, #14]
	return rv;
 800564a:	89fb      	ldrh	r3, [r7, #14]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3303      	adds	r3, #3
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	3202      	adds	r2, #2
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	3201      	adds	r2, #1
 800567e:	7812      	ldrb	r2, [r2, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	887a      	ldrh	r2, [r7, #2]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	1c53      	adds	r3, r2, #1
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1c59      	adds	r1, r3, #1
 8005750:	6179      	str	r1, [r7, #20]
 8005752:	7812      	ldrb	r2, [r2, #0]
 8005754:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3b01      	subs	r3, #1
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f1      	bne.n	8005746 <mem_cpy+0x1a>
	}
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	617a      	str	r2, [r7, #20]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3b01      	subs	r3, #1
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f3      	bne.n	800577e <mem_set+0x10>
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	61fa      	str	r2, [r7, #28]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	61ba      	str	r2, [r7, #24]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <mem_cmp+0x40>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0eb      	beq.n	80057bc <mem_cmp+0x18>

	return r;
 80057e4:	697b      	ldr	r3, [r7, #20]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3724      	adds	r7, #36	; 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057fc:	e002      	b.n	8005804 <chk_chr+0x12>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3301      	adds	r3, #1
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <chk_chr+0x26>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4293      	cmp	r3, r2
 8005816:	d1f2      	bne.n	80057fe <chk_chr+0xc>
	return *str;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	781b      	ldrb	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e029      	b.n	8005890 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <chk_lock+0xb4>)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	4413      	add	r3, r2
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01d      	beq.n	8005886 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800584a:	4a24      	ldr	r2, [pc, #144]	; (80058dc <chk_lock+0xb4>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4413      	add	r3, r2
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d116      	bne.n	800588a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800585c:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <chk_lock+0xb4>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	4413      	add	r3, r2
 8005864:	3304      	adds	r3, #4
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800586c:	429a      	cmp	r2, r3
 800586e:	d10c      	bne.n	800588a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <chk_lock+0xb4>)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4413      	add	r3, r2
 8005878:	3308      	adds	r3, #8
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005880:	429a      	cmp	r2, r3
 8005882:	d102      	bne.n	800588a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005884:	e007      	b.n	8005896 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005886:	2301      	movs	r3, #1
 8005888:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d9d2      	bls.n	800583c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d109      	bne.n	80058b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <chk_lock+0x80>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d101      	bne.n	80058ac <chk_lock+0x84>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e010      	b.n	80058ce <chk_lock+0xa6>
 80058ac:	2312      	movs	r3, #18
 80058ae:	e00e      	b.n	80058ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <chk_lock+0xa0>
 80058b6:	4a09      	ldr	r2, [pc, #36]	; (80058dc <chk_lock+0xb4>)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4413      	add	r3, r2
 80058be:	330c      	adds	r3, #12
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d101      	bne.n	80058cc <chk_lock+0xa4>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e000      	b.n	80058ce <chk_lock+0xa6>
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000030 	.word	0x20000030

080058e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	e002      	b.n	80058f2 <enq_lock+0x12>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3301      	adds	r3, #1
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d806      	bhi.n	8005906 <enq_lock+0x26>
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <enq_lock+0x40>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	4413      	add	r3, r2
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f2      	bne.n	80058ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b02      	cmp	r3, #2
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000030 	.word	0x20000030

08005924 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e01f      	b.n	8005974 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005934:	4a41      	ldr	r2, [pc, #260]	; (8005a3c <inc_lock+0x118>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	4413      	add	r3, r2
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d113      	bne.n	800596e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <inc_lock+0x118>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	4413      	add	r3, r2
 800594e:	3304      	adds	r3, #4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005956:	429a      	cmp	r2, r3
 8005958:	d109      	bne.n	800596e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800595a:	4a38      	ldr	r2, [pc, #224]	; (8005a3c <inc_lock+0x118>)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4413      	add	r3, r2
 8005962:	3308      	adds	r3, #8
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800596a:	429a      	cmp	r2, r3
 800596c:	d006      	beq.n	800597c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d9dc      	bls.n	8005934 <inc_lock+0x10>
 800597a:	e000      	b.n	800597e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800597c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d132      	bne.n	80059ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e002      	b.n	8005990 <inc_lock+0x6c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3301      	adds	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d806      	bhi.n	80059a4 <inc_lock+0x80>
 8005996:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <inc_lock+0x118>)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	4413      	add	r3, r2
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f2      	bne.n	800598a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d101      	bne.n	80059ae <inc_lock+0x8a>
 80059aa:	2300      	movs	r3, #0
 80059ac:	e040      	b.n	8005a30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4922      	ldr	r1, [pc, #136]	; (8005a3c <inc_lock+0x118>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	440b      	add	r3, r1
 80059ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	491e      	ldr	r1, [pc, #120]	; (8005a3c <inc_lock+0x118>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	440b      	add	r3, r1
 80059c8:	3304      	adds	r3, #4
 80059ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	491a      	ldr	r1, [pc, #104]	; (8005a3c <inc_lock+0x118>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	440b      	add	r3, r1
 80059d8:	3308      	adds	r3, #8
 80059da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <inc_lock+0x118>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	4413      	add	r3, r2
 80059e4:	330c      	adds	r3, #12
 80059e6:	2200      	movs	r2, #0
 80059e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <inc_lock+0xe0>
 80059f0:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <inc_lock+0x118>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	4413      	add	r3, r2
 80059f8:	330c      	adds	r3, #12
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <inc_lock+0xe0>
 8005a00:	2300      	movs	r3, #0
 8005a02:	e015      	b.n	8005a30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d108      	bne.n	8005a1c <inc_lock+0xf8>
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <inc_lock+0x118>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	330c      	adds	r3, #12
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	e001      	b.n	8005a20 <inc_lock+0xfc>
 8005a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a20:	4906      	ldr	r1, [pc, #24]	; (8005a3c <inc_lock+0x118>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	440b      	add	r3, r1
 8005a28:	330c      	adds	r3, #12
 8005a2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	20000030 	.word	0x20000030

08005a40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d825      	bhi.n	8005aa0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <dec_lock+0x74>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	4413      	add	r3, r2
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a62:	89fb      	ldrh	r3, [r7, #14]
 8005a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a68:	d101      	bne.n	8005a6e <dec_lock+0x2e>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a6e:	89fb      	ldrh	r3, [r7, #14]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <dec_lock+0x3a>
 8005a74:	89fb      	ldrh	r3, [r7, #14]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a7a:	4a0e      	ldr	r2, [pc, #56]	; (8005ab4 <dec_lock+0x74>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	330c      	adds	r3, #12
 8005a84:	89fa      	ldrh	r2, [r7, #14]
 8005a86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a88:	89fb      	ldrh	r3, [r7, #14]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <dec_lock+0x5a>
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <dec_lock+0x74>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4413      	add	r3, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	737b      	strb	r3, [r7, #13]
 8005a9e:	e001      	b.n	8005aa4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005aa4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000030 	.word	0x20000030

08005ab8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e010      	b.n	8005ae8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <clear_lock+0x44>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	4413      	add	r3, r2
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d105      	bne.n	8005ae2 <clear_lock+0x2a>
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <clear_lock+0x44>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	4413      	add	r3, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d9eb      	bls.n	8005ac6 <clear_lock+0xe>
	}
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000030 	.word	0x20000030

08005b00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d034      	beq.n	8005b7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7858      	ldrb	r0, [r3, #1]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b24:	2301      	movs	r3, #1
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	f7ff fd40 	bl	80055ac <disk_write>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	e022      	b.n	8005b7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d217      	bcs.n	8005b7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e010      	b.n	8005b78 <sync_window+0x78>
					wsect += fs->fsize;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7858      	ldrb	r0, [r3, #1]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	f7ff fd1d 	bl	80055ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d8eb      	bhi.n	8005b56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d01b      	beq.n	8005bd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ffad 	bl	8005b00 <sync_window>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7858      	ldrb	r0, [r3, #1]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bba:	2301      	movs	r3, #1
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	f7ff fcd5 	bl	800556c <disk_read>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff87 	bl	8005b00 <sync_window>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d159      	bne.n	8005cb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d149      	bne.n	8005c98 <sync_fs+0xb4>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d145      	bne.n	8005c98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	899b      	ldrh	r3, [r3, #12]
 8005c16:	461a      	mov	r2, r3
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f7ff fda8 	bl	800576e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3338      	adds	r3, #56	; 0x38
 8005c22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c26:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fd37 	bl	800569e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3338      	adds	r3, #56	; 0x38
 8005c34:	4921      	ldr	r1, [pc, #132]	; (8005cbc <sync_fs+0xd8>)
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fd4c 	bl	80056d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3338      	adds	r3, #56	; 0x38
 8005c40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005c44:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <sync_fs+0xdc>)
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fd44 	bl	80056d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3338      	adds	r3, #56	; 0x38
 8005c50:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7ff fd3a 	bl	80056d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3338      	adds	r3, #56	; 0x38
 8005c64:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7ff fd30 	bl	80056d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7858      	ldrb	r0, [r3, #1]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f7ff fc8d 	bl	80055ac <disk_write>
			fs->fsi_flag = 0;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fca3 	bl	80055ec <disk_ioctl>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <sync_fs+0xcc>
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	41615252 	.word	0x41615252
 8005cc0:	61417272 	.word	0x61417272

08005cc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	3b02      	subs	r3, #2
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d301      	bcc.n	8005ce4 <clust2sect+0x20>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e008      	b.n	8005cf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	895b      	ldrh	r3, [r3, #10]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	fb03 f202 	mul.w	r2, r3, r2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	4413      	add	r3, r2
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d904      	bls.n	8005d22 <get_fat+0x20>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e0bb      	b.n	8005ea0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	f000 8083 	beq.w	8005e3e <get_fat+0x13c>
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	f300 80a7 	bgt.w	8005e8c <get_fat+0x18a>
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d002      	beq.n	8005d48 <get_fat+0x46>
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d056      	beq.n	8005df4 <get_fat+0xf2>
 8005d46:	e0a1      	b.n	8005e8c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	899b      	ldrh	r3, [r3, #12]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d66:	4413      	add	r3, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f7ff ff0c 	bl	8005b88 <move_window>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 808d 	bne.w	8005e92 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	60fa      	str	r2, [r7, #12]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	8992      	ldrh	r2, [r2, #12]
 8005d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d86:	fb02 f201 	mul.w	r2, r2, r1
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	899b      	ldrh	r3, [r3, #12]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da6:	4413      	add	r3, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f7ff feec 	bl	8005b88 <move_window>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d16f      	bne.n	8005e96 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	899b      	ldrh	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dc2:	fb02 f201 	mul.w	r2, r2, r1
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <get_fat+0xe8>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	e002      	b.n	8005df0 <get_fat+0xee>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df0:	617b      	str	r3, [r7, #20]
			break;
 8005df2:	e055      	b.n	8005ea0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	899b      	ldrh	r3, [r3, #12]
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e08:	4413      	add	r3, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6938      	ldr	r0, [r7, #16]
 8005e0e:	f7ff febb 	bl	8005b88 <move_window>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d140      	bne.n	8005e9a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	8992      	ldrh	r2, [r2, #12]
 8005e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e2a:	fb02 f200 	mul.w	r2, r2, r0
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	440b      	add	r3, r1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fbf8 	bl	8005628 <ld_word>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	617b      	str	r3, [r7, #20]
			break;
 8005e3c:	e030      	b.n	8005ea0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e52:	4413      	add	r3, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	6938      	ldr	r0, [r7, #16]
 8005e58:	f7ff fe96 	bl	8005b88 <move_window>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d11d      	bne.n	8005e9e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	8992      	ldrh	r2, [r2, #12]
 8005e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e74:	fb02 f200 	mul.w	r2, r2, r0
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fbeb 	bl	8005658 <ld_dword>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e88:	617b      	str	r3, [r7, #20]
			break;
 8005e8a:	e009      	b.n	8005ea0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e006      	b.n	8005ea0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e92:	bf00      	nop
 8005e94:	e004      	b.n	8005ea0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e96:	bf00      	nop
 8005e98:	e002      	b.n	8005ea0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e9e:	bf00      	nop
		}
	}

	return val;
 8005ea0:	697b      	ldr	r3, [r7, #20]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005eaa:	b590      	push	{r4, r7, lr}
 8005eac:	b089      	sub	sp, #36	; 0x24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	f240 8102 	bls.w	80060c6 <put_fat+0x21c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	f080 80fc 	bcs.w	80060c6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	f000 80b6 	beq.w	8006044 <put_fat+0x19a>
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	f300 80fd 	bgt.w	80060d8 <put_fat+0x22e>
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d003      	beq.n	8005eea <put_fat+0x40>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	f000 8083 	beq.w	8005fee <put_fat+0x144>
 8005ee8:	e0f6      	b.n	80060d8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	899b      	ldrh	r3, [r3, #12]
 8005f00:	4619      	mov	r1, r3
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f08:	4413      	add	r3, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fe3b 	bl	8005b88 <move_window>
 8005f12:	4603      	mov	r3, r0
 8005f14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 80d6 	bne.w	80060ca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	61ba      	str	r2, [r7, #24]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	8992      	ldrh	r2, [r2, #12]
 8005f2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f32:	fb02 f200 	mul.w	r2, r2, r0
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	440b      	add	r3, r1
 8005f3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <put_fat+0xb8>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	b25a      	sxtb	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e001      	b.n	8005f66 <put_fat+0xbc>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	899b      	ldrh	r3, [r3, #12]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f80:	4413      	add	r3, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fdff 	bl	8005b88 <move_window>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 809c 	bne.w	80060ce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	899b      	ldrh	r3, [r3, #12]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fa8:	fb02 f200 	mul.w	r2, r2, r0
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	440b      	add	r3, r1
 8005fb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <put_fat+0x11a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	091b      	lsrs	r3, r3, #4
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e00e      	b.n	8005fe2 <put_fat+0x138>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	f023 030f 	bic.w	r3, r3, #15
 8005fce:	b25a      	sxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	70da      	strb	r2, [r3, #3]
			break;
 8005fec:	e074      	b.n	80060d8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	899b      	ldrh	r3, [r3, #12]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006002:	4413      	add	r3, r2
 8006004:	4619      	mov	r1, r3
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fdbe 	bl	8005b88 <move_window>
 800600c:	4603      	mov	r3, r0
 800600e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006010:	7ffb      	ldrb	r3, [r7, #31]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d15d      	bne.n	80060d2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	8992      	ldrh	r2, [r2, #12]
 8006024:	fbb3 f0f2 	udiv	r0, r3, r2
 8006028:	fb02 f200 	mul.w	r2, r2, r0
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	440b      	add	r3, r1
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	b292      	uxth	r2, r2
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fb31 	bl	800569e <st_word>
			fs->wflag = 1;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	70da      	strb	r2, [r3, #3]
			break;
 8006042:	e049      	b.n	80060d8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	899b      	ldrh	r3, [r3, #12]
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	b29b      	uxth	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	fbb3 f3f1 	udiv	r3, r3, r1
 8006058:	4413      	add	r3, r2
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fd93 	bl	8005b88 <move_window>
 8006062:	4603      	mov	r3, r0
 8006064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006066:	7ffb      	ldrb	r3, [r7, #31]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d134      	bne.n	80060d6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	8992      	ldrh	r2, [r2, #12]
 8006080:	fbb3 f0f2 	udiv	r0, r3, r2
 8006084:	fb02 f200 	mul.w	r2, r2, r0
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	440b      	add	r3, r1
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fae3 	bl	8005658 <ld_dword>
 8006092:	4603      	mov	r3, r0
 8006094:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006098:	4323      	orrs	r3, r4
 800609a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	8992      	ldrh	r2, [r2, #12]
 80060aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80060ae:	fb02 f200 	mul.w	r2, r2, r0
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	440b      	add	r3, r1
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fb0b 	bl	80056d4 <st_dword>
			fs->wflag = 1;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	70da      	strb	r2, [r3, #3]
			break;
 80060c4:	e008      	b.n	80060d8 <put_fat+0x22e>
		}
	}
 80060c6:	bf00      	nop
 80060c8:	e006      	b.n	80060d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80060d6:	bf00      	nop
	return res;
 80060d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3724      	adds	r7, #36	; 0x24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd90      	pop	{r4, r7, pc}

080060e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b088      	sub	sp, #32
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d904      	bls.n	8006108 <remove_chain+0x26>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d301      	bcc.n	800610c <remove_chain+0x2a>
 8006108:	2302      	movs	r3, #2
 800610a:	e04b      	b.n	80061a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	69b8      	ldr	r0, [r7, #24]
 800611a:	f7ff fec6 	bl	8005eaa <put_fat>
 800611e:	4603      	mov	r3, r0
 8006120:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <remove_chain+0x4a>
 8006128:	7ffb      	ldrb	r3, [r7, #31]
 800612a:	e03b      	b.n	80061a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fde7 	bl	8005d02 <get_fat>
 8006134:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d031      	beq.n	80061a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <remove_chain+0x64>
 8006142:	2302      	movs	r3, #2
 8006144:	e02e      	b.n	80061a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614c:	d101      	bne.n	8006152 <remove_chain+0x70>
 800614e:	2301      	movs	r3, #1
 8006150:	e028      	b.n	80061a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006152:	2200      	movs	r2, #0
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	69b8      	ldr	r0, [r7, #24]
 8006158:	f7ff fea7 	bl	8005eaa <put_fat>
 800615c:	4603      	mov	r3, r0
 800615e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006160:	7ffb      	ldrb	r3, [r7, #31]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <remove_chain+0x88>
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	e01c      	b.n	80061a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	3b02      	subs	r3, #2
 8006174:	429a      	cmp	r2, r3
 8006176:	d20b      	bcs.n	8006190 <remove_chain+0xae>
			fs->free_clst++;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	791b      	ldrb	r3, [r3, #4]
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3c6      	bcc.n	800612c <remove_chain+0x4a>
 800619e:	e000      	b.n	80061a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80061a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <create_chain+0x2c>
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d31b      	bcc.n	8006210 <create_chain+0x64>
 80061d8:	2301      	movs	r3, #1
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e018      	b.n	8006210 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fd8e 	bl	8005d02 <get_fat>
 80061e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d801      	bhi.n	80061f2 <create_chain+0x46>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e070      	b.n	80062d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f8:	d101      	bne.n	80061fe <create_chain+0x52>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e06a      	b.n	80062d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	429a      	cmp	r2, r3
 8006206:	d201      	bcs.n	800620c <create_chain+0x60>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	e063      	b.n	80062d4 <create_chain+0x128>
		scl = clst;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3301      	adds	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	429a      	cmp	r2, r3
 8006222:	d307      	bcc.n	8006234 <create_chain+0x88>
				ncl = 2;
 8006224:	2302      	movs	r3, #2
 8006226:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	d901      	bls.n	8006234 <create_chain+0x88>
 8006230:	2300      	movs	r3, #0
 8006232:	e04f      	b.n	80062d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006234:	69f9      	ldr	r1, [r7, #28]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fd63 	bl	8005d02 <get_fat>
 800623c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d003      	beq.n	8006252 <create_chain+0xa6>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006250:	d101      	bne.n	8006256 <create_chain+0xaa>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	e03e      	b.n	80062d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	429a      	cmp	r2, r3
 800625c:	d1da      	bne.n	8006214 <create_chain+0x68>
 800625e:	2300      	movs	r3, #0
 8006260:	e038      	b.n	80062d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006262:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	6938      	ldr	r0, [r7, #16]
 800626c:	f7ff fe1d 	bl	8005eaa <put_fat>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <create_chain+0xe2>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6938      	ldr	r0, [r7, #16]
 8006286:	f7ff fe10 	bl	8005eaa <put_fat>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d116      	bne.n	80062c2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	3b02      	subs	r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d804      	bhi.n	80062b2 <create_chain+0x106>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	1e5a      	subs	r2, r3, #1
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	711a      	strb	r2, [r3, #4]
 80062c0:	e007      	b.n	80062d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <create_chain+0x122>
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062cc:	e000      	b.n	80062d0 <create_chain+0x124>
 80062ce:	2301      	movs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80062d2:	69fb      	ldr	r3, [r7, #28]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	3304      	adds	r3, #4
 80062f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	899b      	ldrh	r3, [r3, #12]
 80062f8:	461a      	mov	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	8952      	ldrh	r2, [r2, #10]
 8006304:	fbb3 f3f2 	udiv	r3, r3, r2
 8006308:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1d1a      	adds	r2, r3, #4
 800630e:	613a      	str	r2, [r7, #16]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <clmt_clust+0x42>
 800631a:	2300      	movs	r3, #0
 800631c:	e010      	b.n	8006340 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d307      	bcc.n	8006336 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3304      	adds	r3, #4
 8006332:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006334:	e7e9      	b.n	800630a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006336:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006362:	d204      	bcs.n	800636e <dir_sdi+0x22>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <dir_sdi+0x26>
		return FR_INT_ERR;
 800636e:	2302      	movs	r3, #2
 8006370:	e071      	b.n	8006456 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <dir_sdi+0x46>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d902      	bls.n	8006392 <dir_sdi+0x46>
		clst = fs->dirbase;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	8912      	ldrh	r2, [r2, #8]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d301      	bcc.n	80063a8 <dir_sdi+0x5c>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e056      	b.n	8006456 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	61da      	str	r2, [r3, #28]
 80063b0:	e02d      	b.n	800640e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	895b      	ldrh	r3, [r3, #10]
 80063b6:	461a      	mov	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	899b      	ldrh	r3, [r3, #12]
 80063bc:	fb03 f302 	mul.w	r3, r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063c2:	e019      	b.n	80063f8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6979      	ldr	r1, [r7, #20]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fc9a 	bl	8005d02 <get_fat>
 80063ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d6:	d101      	bne.n	80063dc <dir_sdi+0x90>
 80063d8:	2301      	movs	r3, #1
 80063da:	e03c      	b.n	8006456 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d904      	bls.n	80063ec <dir_sdi+0xa0>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d301      	bcc.n	80063f0 <dir_sdi+0xa4>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e032      	b.n	8006456 <dir_sdi+0x10a>
			ofs -= csz;
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d2e1      	bcs.n	80063c4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	6938      	ldr	r0, [r7, #16]
 8006404:	f7ff fc5e 	bl	8005cc4 <clust2sect>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <dir_sdi+0xd4>
 800641c:	2302      	movs	r3, #2
 800641e:	e01a      	b.n	8006456 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	899b      	ldrh	r3, [r3, #12]
 8006428:	4619      	mov	r1, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	899b      	ldrh	r3, [r3, #12]
 8006440:	461a      	mov	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	fbb3 f0f2 	udiv	r0, r3, r2
 8006448:	fb02 f200 	mul.w	r2, r2, r0
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	18ca      	adds	r2, r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	3320      	adds	r3, #32
 8006474:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <dir_next+0x28>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006484:	d301      	bcc.n	800648a <dir_next+0x2c>
 8006486:	2304      	movs	r3, #4
 8006488:	e0bb      	b.n	8006602 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	899b      	ldrh	r3, [r3, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	fbb3 f1f2 	udiv	r1, r3, r2
 8006496:	fb02 f201 	mul.w	r2, r2, r1
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 809d 	bne.w	80065dc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	8912      	ldrh	r2, [r2, #8]
 80064bc:	4293      	cmp	r3, r2
 80064be:	f0c0 808d 	bcc.w	80065dc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	61da      	str	r2, [r3, #28]
 80064c8:	2304      	movs	r3, #4
 80064ca:	e09a      	b.n	8006602 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	899b      	ldrh	r3, [r3, #12]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	8952      	ldrh	r2, [r2, #10]
 80064dc:	3a01      	subs	r2, #1
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d17b      	bne.n	80065dc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7ff fc08 	bl	8005d02 <get_fat>
 80064f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d801      	bhi.n	80064fe <dir_next+0xa0>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e081      	b.n	8006602 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006504:	d101      	bne.n	800650a <dir_next+0xac>
 8006506:	2301      	movs	r3, #1
 8006508:	e07b      	b.n	8006602 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d359      	bcc.n	80065c8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	61da      	str	r2, [r3, #28]
 8006520:	2304      	movs	r3, #4
 8006522:	e06e      	b.n	8006602 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7ff fe3d 	bl	80061ac <create_chain>
 8006532:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <dir_next+0xe0>
 800653a:	2307      	movs	r3, #7
 800653c:	e061      	b.n	8006602 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <dir_next+0xea>
 8006544:	2302      	movs	r3, #2
 8006546:	e05c      	b.n	8006602 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654e:	d101      	bne.n	8006554 <dir_next+0xf6>
 8006550:	2301      	movs	r3, #1
 8006552:	e056      	b.n	8006602 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fad3 	bl	8005b00 <sync_window>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <dir_next+0x106>
 8006560:	2301      	movs	r3, #1
 8006562:	e04e      	b.n	8006602 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	899b      	ldrh	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	2100      	movs	r1, #0
 8006572:	f7ff f8fc 	bl	800576e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fba1 	bl	8005cc4 <clust2sect>
 8006582:	4602      	mov	r2, r0
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	635a      	str	r2, [r3, #52]	; 0x34
 8006588:	e012      	b.n	80065b0 <dir_next+0x152>
						fs->wflag = 1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7ff fab5 	bl	8005b00 <sync_window>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <dir_next+0x142>
 800659c:	2301      	movs	r3, #1
 800659e:	e030      	b.n	8006602 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3301      	adds	r3, #1
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	895b      	ldrh	r3, [r3, #10]
 80065b4:	461a      	mov	r2, r3
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d3e6      	bcc.n	800658a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80065ce:	6979      	ldr	r1, [r7, #20]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fb77 	bl	8005cc4 <clust2sect>
 80065d6:	4602      	mov	r2, r0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	899b      	ldrh	r3, [r3, #12]
 80065ec:	461a      	mov	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065f4:	fb02 f200 	mul.w	r2, r2, r0
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	18ca      	adds	r2, r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800661a:	2100      	movs	r1, #0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fe95 	bl	800634c <dir_sdi>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d12b      	bne.n	8006684 <dir_alloc+0x7a>
		n = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	4619      	mov	r1, r3
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff faa6 	bl	8005b88 <move_window>
 800663c:	4603      	mov	r3, r0
 800663e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11d      	bne.n	8006682 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2be5      	cmp	r3, #229	; 0xe5
 800664e:	d004      	beq.n	800665a <dir_alloc+0x50>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d102      	bne.n	800666e <dir_alloc+0x64>
 8006668:	e00c      	b.n	8006684 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800666e:	2101      	movs	r1, #1
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fef4 	bl	800645e <dir_next>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0d7      	beq.n	8006630 <dir_alloc+0x26>
 8006680:	e000      	b.n	8006684 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006682:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d101      	bne.n	800668e <dir_alloc+0x84>
 800668a:	2307      	movs	r3, #7
 800668c:	75fb      	strb	r3, [r7, #23]
	return res;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	331a      	adds	r3, #26
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe ffbe 	bl	8005628 <ld_word>
 80066ac:	4603      	mov	r3, r0
 80066ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d109      	bne.n	80066cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	3314      	adds	r3, #20
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe ffb3 	bl	8005628 <ld_word>
 80066c2:	4603      	mov	r3, r0
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	331a      	adds	r3, #26
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	b292      	uxth	r2, r2
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe ffd6 	bl	800569e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d109      	bne.n	800670e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f103 0214 	add.w	r2, r3, #20
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	b29b      	uxth	r3, r3
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fe ffc8 	bl	800569e <st_word>
	}
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	331a      	adds	r3, #26
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe ff7e 	bl	8005628 <ld_word>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <cmp_lfn+0x1e>
 8006732:	2300      	movs	r3, #0
 8006734:	e059      	b.n	80067ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800673e:	1e5a      	subs	r2, r3, #1
 8006740:	4613      	mov	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800674c:	2301      	movs	r3, #1
 800674e:	81fb      	strh	r3, [r7, #14]
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	e033      	b.n	80067be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <cmp_lfn+0xdc>)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4413      	add	r3, r2
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	4413      	add	r3, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe ff5f 	bl	8005628 <ld_word>
 800676a:	4603      	mov	r3, r0
 800676c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800676e:	89fb      	ldrh	r3, [r7, #14]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2bfe      	cmp	r3, #254	; 0xfe
 8006778:	d812      	bhi.n	80067a0 <cmp_lfn+0x88>
 800677a:	89bb      	ldrh	r3, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fed9 	bl	8008534 <ff_wtoupper>
 8006782:	4603      	mov	r3, r0
 8006784:	461c      	mov	r4, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	617a      	str	r2, [r7, #20]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f001 fecd 	bl	8008534 <ff_wtoupper>
 800679a:	4603      	mov	r3, r0
 800679c:	429c      	cmp	r4, r3
 800679e:	d001      	beq.n	80067a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80067a0:	2300      	movs	r3, #0
 80067a2:	e022      	b.n	80067ea <cmp_lfn+0xd2>
			}
			wc = uc;
 80067a4:	89bb      	ldrh	r3, [r7, #12]
 80067a6:	81fb      	strh	r3, [r7, #14]
 80067a8:	e006      	b.n	80067b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80067aa:	89bb      	ldrh	r3, [r7, #12]
 80067ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d001      	beq.n	80067b8 <cmp_lfn+0xa0>
 80067b4:	2300      	movs	r3, #0
 80067b6:	e018      	b.n	80067ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d9c8      	bls.n	8006756 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <cmp_lfn+0xd0>
 80067d0:	89fb      	ldrh	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <cmp_lfn+0xd0>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <cmp_lfn+0xd0>
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80067e8:	2301      	movs	r3, #1
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd90      	pop	{r4, r7, pc}
 80067f2:	bf00      	nop
 80067f4:	08008818 	.word	0x08008818

080067f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	460b      	mov	r3, r1
 8006808:	71fb      	strb	r3, [r7, #7]
 800680a:	4613      	mov	r3, r2
 800680c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	330d      	adds	r3, #13
 8006812:	79ba      	ldrb	r2, [r7, #6]
 8006814:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	330b      	adds	r3, #11
 800681a:	220f      	movs	r2, #15
 800681c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	330c      	adds	r3, #12
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	331a      	adds	r3, #26
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe ff36 	bl	800569e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	4613      	mov	r3, r2
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	82fb      	strh	r3, [r7, #22]
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800684a:	8afb      	ldrh	r3, [r7, #22]
 800684c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <put_lfn+0x6c>
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	61fa      	str	r2, [r7, #28]
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <put_lfn+0xcc>)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	8afa      	ldrh	r2, [r7, #22]
 8006874:	4611      	mov	r1, r2
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ff11 	bl	800569e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800687c:	8afb      	ldrh	r3, [r7, #22]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <put_lfn+0x90>
 8006882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006886:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	3301      	adds	r3, #1
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d9da      	bls.n	800684a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006894:	8afb      	ldrh	r3, [r7, #22]
 8006896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800689a:	4293      	cmp	r3, r2
 800689c:	d006      	beq.n	80068ac <put_lfn+0xb4>
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <put_lfn+0xbc>
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	79fa      	ldrb	r2, [r7, #7]
 80068b8:	701a      	strb	r2, [r3, #0]
}
 80068ba:	bf00      	nop
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	08008818 	.word	0x08008818

080068c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	; 0x30
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80068d6:	220b      	movs	r2, #11
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7fe ff26 	bl	800572c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d92b      	bls.n	800693e <gen_numname+0x76>
		sr = seq;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80068ea:	e022      	b.n	8006932 <gen_numname+0x6a>
			wc = *lfn++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80068f6:	2300      	movs	r3, #0
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fa:	e017      	b.n	800692c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	005a      	lsls	r2, r3, #1
 8006900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	4413      	add	r3, r2
 8006908:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800690a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <gen_numname+0x5e>
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006920:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006924:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	3301      	adds	r3, #1
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b0f      	cmp	r3, #15
 8006930:	d9e4      	bls.n	80068fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1d8      	bne.n	80068ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800693e:	2307      	movs	r3, #7
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	b2db      	uxtb	r3, r3
 800694c:	3330      	adds	r3, #48	; 0x30
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006956:	2b39      	cmp	r3, #57	; 0x39
 8006958:	d904      	bls.n	8006964 <gen_numname+0x9c>
 800695a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800695e:	3307      	adds	r3, #7
 8006960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	1e5a      	subs	r2, r3, #1
 8006968:	62ba      	str	r2, [r7, #40]	; 0x28
 800696a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800696e:	4413      	add	r3, r2
 8006970:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006974:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1de      	bne.n	8006942 <gen_numname+0x7a>
	ns[i] = '~';
 8006984:	f107 0214 	add.w	r2, r7, #20
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	4413      	add	r3, r2
 800698c:	227e      	movs	r2, #126	; 0x7e
 800698e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006990:	2300      	movs	r3, #0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	e002      	b.n	800699c <gen_numname+0xd4>
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	3301      	adds	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d205      	bcs.n	80069b0 <gen_numname+0xe8>
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	4413      	add	r3, r2
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d1f2      	bne.n	8006996 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	d808      	bhi.n	80069c8 <gen_numname+0x100>
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80069bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069c0:	4413      	add	r3, r2
 80069c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80069c6:	e000      	b.n	80069ca <gen_numname+0x102>
 80069c8:	2120      	movs	r1, #32
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	627a      	str	r2, [r7, #36]	; 0x24
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	460a      	mov	r2, r1
 80069d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	2b07      	cmp	r3, #7
 80069dc:	d9e8      	bls.n	80069b0 <gen_numname+0xe8>
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	3730      	adds	r7, #48	; 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80069f4:	230b      	movs	r3, #11
 80069f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	0852      	lsrs	r2, r2, #1
 80069fe:	01db      	lsls	r3, r3, #7
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	6079      	str	r1, [r7, #4]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ed      	bne.n	80069f8 <sum_sfn+0x10>
	return sum;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fc86 	bl	800634c <dir_sdi>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <dir_find+0x24>
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	e0a9      	b.n	8006ba2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a4e:	23ff      	movs	r3, #255	; 0xff
 8006a50:	753b      	strb	r3, [r7, #20]
 8006a52:	7d3b      	ldrb	r3, [r7, #20]
 8006a54:	757b      	strb	r3, [r7, #21]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6938      	ldr	r0, [r7, #16]
 8006a66:	f7ff f88f 	bl	8005b88 <move_window>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8090 	bne.w	8006b96 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a7e:	7dbb      	ldrb	r3, [r7, #22]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <dir_find+0x60>
 8006a84:	2304      	movs	r3, #4
 8006a86:	75fb      	strb	r3, [r7, #23]
 8006a88:	e08a      	b.n	8006ba0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	330b      	adds	r3, #11
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a96:	73fb      	strb	r3, [r7, #15]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a9e:	7dbb      	ldrb	r3, [r7, #22]
 8006aa0:	2be5      	cmp	r3, #229	; 0xe5
 8006aa2:	d007      	beq.n	8006ab4 <dir_find+0x8a>
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	f003 0308 	and.w	r3, r3, #8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <dir_find+0x98>
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b0f      	cmp	r3, #15
 8006ab2:	d006      	beq.n	8006ac2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ab4:	23ff      	movs	r3, #255	; 0xff
 8006ab6:	757b      	strb	r3, [r7, #21]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac0:	e05e      	b.n	8006b80 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b0f      	cmp	r3, #15
 8006ac6:	d136      	bne.n	8006b36 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d154      	bne.n	8006b80 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006ad6:	7dbb      	ldrb	r3, [r7, #22]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	7b5b      	ldrb	r3, [r3, #13]
 8006ae6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006ae8:	7dbb      	ldrb	r3, [r7, #22]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	75bb      	strb	r3, [r7, #22]
 8006af0:	7dbb      	ldrb	r3, [r7, #22]
 8006af2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006afc:	7dba      	ldrb	r2, [r7, #22]
 8006afe:	7d7b      	ldrb	r3, [r7, #21]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d115      	bne.n	8006b30 <dir_find+0x106>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	330d      	adds	r3, #13
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	7d3a      	ldrb	r2, [r7, #20]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d10e      	bne.n	8006b30 <dir_find+0x106>
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7ff fdfb 	bl	8006718 <cmp_lfn>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <dir_find+0x106>
 8006b28:	7d7b      	ldrb	r3, [r7, #21]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	e000      	b.n	8006b32 <dir_find+0x108>
 8006b30:	23ff      	movs	r3, #255	; 0xff
 8006b32:	757b      	strb	r3, [r7, #21]
 8006b34:	e024      	b.n	8006b80 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b36:	7d7b      	ldrb	r3, [r7, #21]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <dir_find+0x126>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff ff51 	bl	80069e8 <sum_sfn>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	7d3b      	ldrb	r3, [r7, #20]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d024      	beq.n	8006b9a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <dir_find+0x14a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a18      	ldr	r0, [r3, #32]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	220b      	movs	r2, #11
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f7fe fe1b 	bl	80057a4 <mem_cmp>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d014      	beq.n	8006b9e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b74:	23ff      	movs	r3, #255	; 0xff
 8006b76:	757b      	strb	r3, [r7, #21]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b80:	2100      	movs	r1, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fc6b 	bl	800645e <dir_next>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f43f af65 	beq.w	8006a5e <dir_find+0x34>
 8006b94:	e004      	b.n	8006ba0 <dir_find+0x176>
		if (res != FR_OK) break;
 8006b96:	bf00      	nop
 8006b98:	e002      	b.n	8006ba0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b9e:	bf00      	nop

	return res;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08c      	sub	sp, #48	; 0x30
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bc0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <dir_register+0x20>
 8006bc8:	2306      	movs	r3, #6
 8006bca:	e0e0      	b.n	8006d8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006bcc:	2300      	movs	r3, #0
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd0:	e002      	b.n	8006bd8 <dir_register+0x2c>
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f4      	bne.n	8006bd2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	220c      	movs	r2, #12
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd99 	bl	800572c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d032      	beq.n	8006c6a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2240      	movs	r2, #64	; 0x40
 8006c08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c10:	e016      	b.n	8006c40 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	f107 010c 	add.w	r1, r7, #12
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f7ff fe51 	bl	80068c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff feff 	bl	8006a2a <dir_find>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b63      	cmp	r3, #99	; 0x63
 8006c44:	d9e5      	bls.n	8006c12 <dir_register+0x66>
 8006c46:	e000      	b.n	8006c4a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006c48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b64      	cmp	r3, #100	; 0x64
 8006c4e:	d101      	bne.n	8006c54 <dir_register+0xa8>
 8006c50:	2307      	movs	r3, #7
 8006c52:	e09c      	b.n	8006d8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d002      	beq.n	8006c62 <dir_register+0xb6>
 8006c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c60:	e095      	b.n	8006d8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006c62:	7dfa      	ldrb	r2, [r7, #23]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <dir_register+0xd8>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	330c      	adds	r3, #12
 8006c78:	4a47      	ldr	r2, [pc, #284]	; (8006d98 <dir_register+0x1ec>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	3301      	adds	r3, #1
 8006c82:	e000      	b.n	8006c86 <dir_register+0xda>
 8006c84:	2301      	movs	r3, #1
 8006c86:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006c88:	6a39      	ldr	r1, [r7, #32]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fcbd 	bl	800660a <dir_alloc>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d148      	bne.n	8006d30 <dir_register+0x184>
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	623b      	str	r3, [r7, #32]
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d042      	beq.n	8006d30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	015b      	lsls	r3, r3, #5
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fb48 	bl	800634c <dir_sdi>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d132      	bne.n	8006d30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fe8a 	bl	80069e8 <sum_sfn>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	69f8      	ldr	r0, [r7, #28]
 8006ce0:	f7fe ff52 	bl	8005b88 <move_window>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11d      	bne.n	8006d2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	6918      	ldr	r0, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a19      	ldr	r1, [r3, #32]
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	7efb      	ldrb	r3, [r7, #27]
 8006d00:	f7ff fd7a 	bl	80067f8 <put_lfn>
				fs->wflag = 1;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2201      	movs	r2, #1
 8006d08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fba6 	bl	800645e <dir_next>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d107      	bne.n	8006d30 <dir_register+0x184>
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1d5      	bne.n	8006cd8 <dir_register+0x12c>
 8006d2c:	e000      	b.n	8006d30 <dir_register+0x184>
				if (res != FR_OK) break;
 8006d2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d128      	bne.n	8006d8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	69f8      	ldr	r0, [r7, #28]
 8006d40:	f7fe ff22 	bl	8005b88 <move_window>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11b      	bne.n	8006d8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	2220      	movs	r2, #32
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fd07 	bl	800576e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a18      	ldr	r0, [r3, #32]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3324      	adds	r3, #36	; 0x24
 8006d68:	220b      	movs	r2, #11
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f7fe fcde 	bl	800572c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	f002 0218 	and.w	r2, r2, #24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2201      	movs	r2, #1
 8006d88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3730      	adds	r7, #48	; 0x30
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	4ec4ec4f 	.word	0x4ec4ec4f

08006d9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	61ba      	str	r2, [r7, #24]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dcc:	2b1f      	cmp	r3, #31
 8006dce:	d940      	bls.n	8006e52 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8006dd4:	d006      	beq.n	8006de4 <create_name+0x48>
 8006dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8006dda:	d110      	bne.n	8006dfe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ddc:	e002      	b.n	8006de4 <create_name+0x48>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	4413      	add	r3, r2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b2f      	cmp	r3, #47	; 0x2f
 8006dee:	d0f6      	beq.n	8006dde <create_name+0x42>
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	4413      	add	r3, r2
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b5c      	cmp	r3, #92	; 0x5c
 8006dfa:	d0f0      	beq.n	8006dde <create_name+0x42>
			break;
 8006dfc:	e02a      	b.n	8006e54 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2bfe      	cmp	r3, #254	; 0xfe
 8006e02:	d901      	bls.n	8006e08 <create_name+0x6c>
 8006e04:	2306      	movs	r3, #6
 8006e06:	e177      	b.n	80070f8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fb52 	bl	80084bc <ff_convert>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <create_name+0x8a>
 8006e22:	2306      	movs	r3, #6
 8006e24:	e168      	b.n	80070f8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e28:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2a:	d809      	bhi.n	8006e40 <create_name+0xa4>
 8006e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2e:	4619      	mov	r1, r3
 8006e30:	48b3      	ldr	r0, [pc, #716]	; (8007100 <create_name+0x364>)
 8006e32:	f7fe fcde 	bl	80057f2 <chk_chr>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <create_name+0xa4>
 8006e3c:	2306      	movs	r3, #6
 8006e3e:	e15b      	b.n	80070f8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	617a      	str	r2, [r7, #20]
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e4e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006e50:	e7b4      	b.n	8006dbc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006e52:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	441a      	add	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e60:	2b1f      	cmp	r3, #31
 8006e62:	d801      	bhi.n	8006e68 <create_name+0xcc>
 8006e64:	2304      	movs	r3, #4
 8006e66:	e000      	b.n	8006e6a <create_name+0xce>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006e6e:	e011      	b.n	8006e94 <create_name+0xf8>
		w = lfn[di - 1];
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e76:	3b01      	subs	r3, #1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d002      	beq.n	8006e8e <create_name+0xf2>
 8006e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8c:	d106      	bne.n	8006e9c <create_name+0x100>
		di--;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ea      	bne.n	8006e70 <create_name+0xd4>
 8006e9a:	e000      	b.n	8006e9e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006e9c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <create_name+0x118>
 8006eb0:	2306      	movs	r3, #6
 8006eb2:	e121      	b.n	80070f8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	220b      	movs	r2, #11
 8006eba:	2120      	movs	r1, #32
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe fc56 	bl	800576e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e002      	b.n	8006ece <create_name+0x132>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d0f5      	beq.n	8006ec8 <create_name+0x12c>
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ee8:	d0ee      	beq.n	8006ec8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <create_name+0x168>
 8006ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef4:	f043 0303 	orr.w	r3, r3, #3
 8006ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006efc:	e002      	b.n	8006f04 <create_name+0x168>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <create_name+0x182>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f10:	3b01      	subs	r3, #1
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f1c:	d1ef      	bne.n	8006efe <create_name+0x162>

	i = b = 0; ni = 8;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f24:	2300      	movs	r3, #0
 8006f26:	623b      	str	r3, [r7, #32]
 8006f28:	2308      	movs	r3, #8
 8006f2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	61ba      	str	r2, [r7, #24]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8090 	beq.w	8007064 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d006      	beq.n	8006f58 <create_name+0x1bc>
 8006f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4e:	d10a      	bne.n	8006f66 <create_name+0x1ca>
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d006      	beq.n	8006f66 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f5c:	f043 0303 	orr.w	r3, r3, #3
 8006f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f64:	e07d      	b.n	8007062 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d203      	bcs.n	8006f76 <create_name+0x1da>
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d123      	bne.n	8006fbe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b0b      	cmp	r3, #11
 8006f7a:	d106      	bne.n	8006f8a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f80:	f043 0303 	orr.w	r3, r3, #3
 8006f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f88:	e06f      	b.n	800706a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d005      	beq.n	8006f9e <create_name+0x202>
 8006f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f96:	f043 0303 	orr.w	r3, r3, #3
 8006f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d860      	bhi.n	8007068 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	2308      	movs	r3, #8
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	230b      	movs	r3, #11
 8006fb0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fbc:	e051      	b.n	8007062 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc2:	d914      	bls.n	8006fee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fa77 	bl	80084bc <ff_convert>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <create_name+0x246>
 8006fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fda:	3b80      	subs	r3, #128	; 0x80
 8006fdc:	4a49      	ldr	r2, [pc, #292]	; (8007104 <create_name+0x368>)
 8006fde:	5cd3      	ldrb	r3, [r2, r3]
 8006fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe6:	f043 0302 	orr.w	r3, r3, #2
 8006fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <create_name+0x268>
 8006ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4843      	ldr	r0, [pc, #268]	; (8007108 <create_name+0x36c>)
 8006ffa:	f7fe fbfa 	bl	80057f2 <chk_chr>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007004:	235f      	movs	r3, #95	; 0x5f
 8007006:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800700c:	f043 0303 	orr.w	r3, r3, #3
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007014:	e01b      	b.n	800704e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d909      	bls.n	8007030 <create_name+0x294>
 800701c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800701e:	2b5a      	cmp	r3, #90	; 0x5a
 8007020:	d806      	bhi.n	8007030 <create_name+0x294>
					b |= 2;
 8007022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007026:	f043 0302 	orr.w	r3, r3, #2
 800702a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800702e:	e00e      	b.n	800704e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007032:	2b60      	cmp	r3, #96	; 0x60
 8007034:	d90b      	bls.n	800704e <create_name+0x2b2>
 8007036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007038:	2b7a      	cmp	r3, #122	; 0x7a
 800703a:	d808      	bhi.n	800704e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800703c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704a:	3b20      	subs	r3, #32
 800704c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	623a      	str	r2, [r7, #32]
 8007054:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007056:	b2d1      	uxtb	r1, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4413      	add	r3, r2
 800705c:	460a      	mov	r2, r1
 800705e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007062:	e763      	b.n	8006f2c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007068:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007070:	2be5      	cmp	r3, #229	; 0xe5
 8007072:	d103      	bne.n	800707c <create_name+0x2e0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2205      	movs	r2, #5
 8007078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	2b08      	cmp	r3, #8
 8007080:	d104      	bne.n	800708c <create_name+0x2f0>
 8007082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800708c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007090:	f003 030c 	and.w	r3, r3, #12
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d005      	beq.n	80070a4 <create_name+0x308>
 8007098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d105      	bne.n	80070b0 <create_name+0x314>
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80070b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d117      	bne.n	80070ec <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80070bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d105      	bne.n	80070d4 <create_name+0x338>
 80070c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070cc:	f043 0310 	orr.w	r3, r3, #16
 80070d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80070d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070d8:	f003 030c 	and.w	r3, r3, #12
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d105      	bne.n	80070ec <create_name+0x350>
 80070e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e4:	f043 0308 	orr.w	r3, r3, #8
 80070e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80070f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	; 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	080086f4 	.word	0x080086f4
 8007104:	08008798 	.word	0x08008798
 8007108:	08008700 	.word	0x08008700

0800710c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007120:	e002      	b.n	8007128 <follow_path+0x1c>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b2f      	cmp	r3, #47	; 0x2f
 800712e:	d0f8      	beq.n	8007122 <follow_path+0x16>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b5c      	cmp	r3, #92	; 0x5c
 8007136:	d0f4      	beq.n	8007122 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b1f      	cmp	r3, #31
 8007144:	d80a      	bhi.n	800715c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800714e:	2100      	movs	r1, #0
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff f8fb 	bl	800634c <dir_sdi>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]
 800715a:	e048      	b.n	80071ee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800715c:	463b      	mov	r3, r7
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff fe1b 	bl	8006d9c <create_name>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d139      	bne.n	80071e4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fc5a 	bl	8006a2a <dir_find>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007180:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d12c      	bne.n	80071e8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d127      	bne.n	80071e8 <follow_path+0xdc>
 8007198:	2305      	movs	r3, #5
 800719a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800719c:	e024      	b.n	80071e8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d121      	bne.n	80071ec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	799b      	ldrb	r3, [r3, #6]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80071b4:	2305      	movs	r3, #5
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	e019      	b.n	80071ee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	8992      	ldrh	r2, [r2, #12]
 80071c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80071cc:	fb02 f200 	mul.w	r2, r2, r0
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	440b      	add	r3, r1
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fa5e 	bl	8006698 <ld_clust>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071e2:	e7bb      	b.n	800715c <follow_path+0x50>
			if (res != FR_OK) break;
 80071e4:	bf00      	nop
 80071e6:	e002      	b.n	80071ee <follow_path+0xe2>
				break;
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071ec:	bf00      	nop
			}
		}
	}

	return res;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007204:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d031      	beq.n	8007272 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e002      	b.n	800721c <get_ldnumber+0x24>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3301      	adds	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b1f      	cmp	r3, #31
 8007222:	d903      	bls.n	800722c <get_ldnumber+0x34>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b3a      	cmp	r3, #58	; 0x3a
 800722a:	d1f4      	bne.n	8007216 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b3a      	cmp	r3, #58	; 0x3a
 8007232:	d11c      	bne.n	800726e <get_ldnumber+0x76>
			tp = *path;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	60fa      	str	r2, [r7, #12]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	3b30      	subs	r3, #48	; 0x30
 8007244:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b09      	cmp	r3, #9
 800724a:	d80e      	bhi.n	800726a <get_ldnumber+0x72>
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	429a      	cmp	r2, r3
 8007252:	d10a      	bne.n	800726a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d107      	bne.n	800726a <get_ldnumber+0x72>
					vol = (int)i;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	e002      	b.n	8007274 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007272:	693b      	ldr	r3, [r7, #16]
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	70da      	strb	r2, [r3, #3]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007296:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fc74 	bl	8005b88 <move_window>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <check_fs+0x2a>
 80072a6:	2304      	movs	r3, #4
 80072a8:	e038      	b.n	800731c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3338      	adds	r3, #56	; 0x38
 80072ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe f9b8 	bl	8005628 <ld_word>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d001      	beq.n	80072c8 <check_fs+0x48>
 80072c4:	2303      	movs	r3, #3
 80072c6:	e029      	b.n	800731c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072ce:	2be9      	cmp	r3, #233	; 0xe9
 80072d0:	d009      	beq.n	80072e6 <check_fs+0x66>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072d8:	2beb      	cmp	r3, #235	; 0xeb
 80072da:	d11e      	bne.n	800731a <check_fs+0x9a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072e2:	2b90      	cmp	r3, #144	; 0x90
 80072e4:	d119      	bne.n	800731a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3338      	adds	r3, #56	; 0x38
 80072ea:	3336      	adds	r3, #54	; 0x36
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe f9b3 	bl	8005658 <ld_dword>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072f8:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <check_fs+0xa4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d101      	bne.n	8007302 <check_fs+0x82>
 80072fe:	2300      	movs	r3, #0
 8007300:	e00c      	b.n	800731c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3338      	adds	r3, #56	; 0x38
 8007306:	3352      	adds	r3, #82	; 0x52
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe f9a5 	bl	8005658 <ld_dword>
 800730e:	4603      	mov	r3, r0
 8007310:	4a05      	ldr	r2, [pc, #20]	; (8007328 <check_fs+0xa8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d101      	bne.n	800731a <check_fs+0x9a>
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800731a:	2302      	movs	r3, #2
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	00544146 	.word	0x00544146
 8007328:	33544146 	.word	0x33544146

0800732c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b096      	sub	sp, #88	; 0x58
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ff59 	bl	80071f8 <get_ldnumber>
 8007346:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	da01      	bge.n	8007352 <find_volume+0x26>
 800734e:	230b      	movs	r3, #11
 8007350:	e268      	b.n	8007824 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007352:	4ab0      	ldr	r2, [pc, #704]	; (8007614 <find_volume+0x2e8>)
 8007354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <find_volume+0x3a>
 8007362:	230c      	movs	r3, #12
 8007364:	e25e      	b.n	8007824 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800736a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01a      	beq.n	80073b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe f8b3 	bl	80054ec <disk_status>
 8007386:	4603      	mov	r3, r0
 8007388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800738c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10c      	bne.n	80073b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <find_volume+0x82>
 800739e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80073aa:	230a      	movs	r3, #10
 80073ac:	e23a      	b.n	8007824 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80073ae:	2300      	movs	r3, #0
 80073b0:	e238      	b.n	8007824 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe f8ab 	bl	8005520 <disk_initialize>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80073d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80073dc:	2303      	movs	r3, #3
 80073de:	e221      	b.n	8007824 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <find_volume+0xca>
 80073e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80073f2:	230a      	movs	r3, #10
 80073f4:	e216      	b.n	8007824 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	7858      	ldrb	r0, [r3, #1]
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	330c      	adds	r3, #12
 80073fe:	461a      	mov	r2, r3
 8007400:	2102      	movs	r1, #2
 8007402:	f7fe f8f3 	bl	80055ec <disk_ioctl>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <find_volume+0xe4>
 800740c:	2301      	movs	r3, #1
 800740e:	e209      	b.n	8007824 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	899b      	ldrh	r3, [r3, #12]
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007418:	d80d      	bhi.n	8007436 <find_volume+0x10a>
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	899b      	ldrh	r3, [r3, #12]
 800741e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007422:	d308      	bcc.n	8007436 <find_volume+0x10a>
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	899b      	ldrh	r3, [r3, #12]
 8007428:	461a      	mov	r2, r3
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	899b      	ldrh	r3, [r3, #12]
 800742e:	3b01      	subs	r3, #1
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <find_volume+0x10e>
 8007436:	2301      	movs	r3, #1
 8007438:	e1f4      	b.n	8007824 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800743e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007442:	f7ff ff1d 	bl	8007280 <check_fs>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800744c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007450:	2b02      	cmp	r3, #2
 8007452:	d14b      	bne.n	80074ec <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007454:	2300      	movs	r3, #0
 8007456:	643b      	str	r3, [r7, #64]	; 0x40
 8007458:	e01f      	b.n	800749a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007468:	4413      	add	r3, r2
 800746a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	3304      	adds	r3, #4
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <find_volume+0x158>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	3308      	adds	r3, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe f8ec 	bl	8005658 <ld_dword>
 8007480:	4602      	mov	r2, r0
 8007482:	e000      	b.n	8007486 <find_volume+0x15a>
 8007484:	2200      	movs	r2, #0
 8007486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800748e:	440b      	add	r3, r1
 8007490:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007496:	3301      	adds	r3, #1
 8007498:	643b      	str	r3, [r7, #64]	; 0x40
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	2b03      	cmp	r3, #3
 800749e:	d9dc      	bls.n	800745a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80074a0:	2300      	movs	r3, #0
 80074a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80074a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <find_volume+0x184>
 80074aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ac:	3b01      	subs	r3, #1
 80074ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80074b8:	4413      	add	r3, r2
 80074ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <find_volume+0x1a6>
 80074c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ca:	f7ff fed9 	bl	8007280 <check_fs>
 80074ce:	4603      	mov	r3, r0
 80074d0:	e000      	b.n	80074d4 <find_volume+0x1a8>
 80074d2:	2303      	movs	r3, #3
 80074d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80074d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d905      	bls.n	80074ec <find_volume+0x1c0>
 80074e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e2:	3301      	adds	r3, #1
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d9e1      	bls.n	80074b0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d101      	bne.n	80074f8 <find_volume+0x1cc>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e195      	b.n	8007824 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d901      	bls.n	8007504 <find_volume+0x1d8>
 8007500:	230d      	movs	r3, #13
 8007502:	e18f      	b.n	8007824 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	3338      	adds	r3, #56	; 0x38
 8007508:	330b      	adds	r3, #11
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe f88c 	bl	8005628 <ld_word>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	899b      	ldrh	r3, [r3, #12]
 8007518:	429a      	cmp	r2, r3
 800751a:	d001      	beq.n	8007520 <find_volume+0x1f4>
 800751c:	230d      	movs	r3, #13
 800751e:	e181      	b.n	8007824 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	3338      	adds	r3, #56	; 0x38
 8007524:	3316      	adds	r3, #22
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe f87e 	bl	8005628 <ld_word>
 800752c:	4603      	mov	r3, r0
 800752e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <find_volume+0x218>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	3338      	adds	r3, #56	; 0x38
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe f88b 	bl	8005658 <ld_dword>
 8007542:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007548:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	789b      	ldrb	r3, [r3, #2]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d005      	beq.n	8007568 <find_volume+0x23c>
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	789b      	ldrb	r3, [r3, #2]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d001      	beq.n	8007568 <find_volume+0x23c>
 8007564:	230d      	movs	r3, #13
 8007566:	e15d      	b.n	8007824 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	789b      	ldrb	r3, [r3, #2]
 800756c:	461a      	mov	r2, r3
 800756e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800757c:	b29a      	uxth	r2, r3
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	895b      	ldrh	r3, [r3, #10]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <find_volume+0x270>
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	895b      	ldrh	r3, [r3, #10]
 800758e:	461a      	mov	r2, r3
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	895b      	ldrh	r3, [r3, #10]
 8007594:	3b01      	subs	r3, #1
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <find_volume+0x274>
 800759c:	230d      	movs	r3, #13
 800759e:	e141      	b.n	8007824 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	3338      	adds	r3, #56	; 0x38
 80075a4:	3311      	adds	r3, #17
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe f83e 	bl	8005628 <ld_word>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	891b      	ldrh	r3, [r3, #8]
 80075b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ba:	8992      	ldrh	r2, [r2, #12]
 80075bc:	0952      	lsrs	r2, r2, #5
 80075be:	b292      	uxth	r2, r2
 80075c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80075c4:	fb02 f201 	mul.w	r2, r2, r1
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <find_volume+0x2a8>
 80075d0:	230d      	movs	r3, #13
 80075d2:	e127      	b.n	8007824 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	3338      	adds	r3, #56	; 0x38
 80075d8:	3313      	adds	r3, #19
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe f824 	bl	8005628 <ld_word>
 80075e0:	4603      	mov	r3, r0
 80075e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80075e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <find_volume+0x2cc>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	3338      	adds	r3, #56	; 0x38
 80075ee:	3320      	adds	r3, #32
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe f831 	bl	8005658 <ld_dword>
 80075f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	3338      	adds	r3, #56	; 0x38
 80075fc:	330e      	adds	r3, #14
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe f812 	bl	8005628 <ld_word>
 8007604:	4603      	mov	r3, r0
 8007606:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <find_volume+0x2ec>
 800760e:	230d      	movs	r3, #13
 8007610:	e108      	b.n	8007824 <find_volume+0x4f8>
 8007612:	bf00      	nop
 8007614:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	4413      	add	r3, r2
 800761e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007620:	8911      	ldrh	r1, [r2, #8]
 8007622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007624:	8992      	ldrh	r2, [r2, #12]
 8007626:	0952      	lsrs	r2, r2, #5
 8007628:	b292      	uxth	r2, r2
 800762a:	fbb1 f2f2 	udiv	r2, r1, r2
 800762e:	b292      	uxth	r2, r2
 8007630:	4413      	add	r3, r2
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	429a      	cmp	r2, r3
 800763a:	d201      	bcs.n	8007640 <find_volume+0x314>
 800763c:	230d      	movs	r3, #13
 800763e:	e0f1      	b.n	8007824 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007648:	8952      	ldrh	r2, [r2, #10]
 800764a:	fbb3 f3f2 	udiv	r3, r3, r2
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <find_volume+0x32e>
 8007656:	230d      	movs	r3, #13
 8007658:	e0e4      	b.n	8007824 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800765a:	2303      	movs	r3, #3
 800765c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007666:	4293      	cmp	r3, r2
 8007668:	d802      	bhi.n	8007670 <find_volume+0x344>
 800766a:	2302      	movs	r3, #2
 800766c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007676:	4293      	cmp	r3, r2
 8007678:	d802      	bhi.n	8007680 <find_volume+0x354>
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800768c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800768e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007692:	441a      	add	r2, r3
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	441a      	add	r2, r3
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80076a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d11e      	bne.n	80076e8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	3338      	adds	r3, #56	; 0x38
 80076ae:	332a      	adds	r3, #42	; 0x2a
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fd ffb9 	bl	8005628 <ld_word>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <find_volume+0x394>
 80076bc:	230d      	movs	r3, #13
 80076be:	e0b1      	b.n	8007824 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	891b      	ldrh	r3, [r3, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <find_volume+0x3a0>
 80076c8:	230d      	movs	r3, #13
 80076ca:	e0ab      	b.n	8007824 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	3338      	adds	r3, #56	; 0x38
 80076d0:	332c      	adds	r3, #44	; 0x2c
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd ffc0 	bl	8005658 <ld_dword>
 80076d8:	4602      	mov	r2, r0
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	e01f      	b.n	8007728 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	891b      	ldrh	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <find_volume+0x3c8>
 80076f0:	230d      	movs	r3, #13
 80076f2:	e097      	b.n	8007824 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	441a      	add	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007704:	2b02      	cmp	r3, #2
 8007706:	d103      	bne.n	8007710 <find_volume+0x3e4>
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	e00a      	b.n	8007726 <find_volume+0x3fa>
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	085a      	lsrs	r2, r3, #1
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007726:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	6a1a      	ldr	r2, [r3, #32]
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	899b      	ldrh	r3, [r3, #12]
 8007730:	4619      	mov	r1, r3
 8007732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007734:	440b      	add	r3, r1
 8007736:	3b01      	subs	r3, #1
 8007738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800773a:	8989      	ldrh	r1, [r1, #12]
 800773c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007740:	429a      	cmp	r2, r3
 8007742:	d201      	bcs.n	8007748 <find_volume+0x41c>
 8007744:	230d      	movs	r3, #13
 8007746:	e06d      	b.n	8007824 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800774e:	619a      	str	r2, [r3, #24]
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800775e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007762:	2b03      	cmp	r3, #3
 8007764:	d149      	bne.n	80077fa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	3338      	adds	r3, #56	; 0x38
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd ff5b 	bl	8005628 <ld_word>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d140      	bne.n	80077fa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777a:	3301      	adds	r3, #1
 800777c:	4619      	mov	r1, r3
 800777e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007780:	f7fe fa02 	bl	8005b88 <move_window>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d137      	bne.n	80077fa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	2200      	movs	r2, #0
 800778e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	3338      	adds	r3, #56	; 0x38
 8007794:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd ff45 	bl	8005628 <ld_word>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d127      	bne.n	80077fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	3338      	adds	r3, #56	; 0x38
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd ff52 	bl	8005658 <ld_dword>
 80077b4:	4603      	mov	r3, r0
 80077b6:	4a1d      	ldr	r2, [pc, #116]	; (800782c <find_volume+0x500>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d11e      	bne.n	80077fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	3338      	adds	r3, #56	; 0x38
 80077c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd ff47 	bl	8005658 <ld_dword>
 80077ca:	4603      	mov	r3, r0
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <find_volume+0x504>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d113      	bne.n	80077fa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	3338      	adds	r3, #56	; 0x38
 80077d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fd ff3c 	bl	8005658 <ld_dword>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	3338      	adds	r3, #56	; 0x38
 80077ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd ff32 	bl	8005658 <ld_dword>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007800:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <find_volume+0x508>)
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <find_volume+0x508>)
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <find_volume+0x508>)
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	4a07      	ldr	r2, [pc, #28]	; (8007838 <find_volume+0x50c>)
 800781a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800781c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800781e:	f7fe f94b 	bl	8005ab8 <clear_lock>
#endif
	return FR_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3758      	adds	r7, #88	; 0x58
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	41615252 	.word	0x41615252
 8007830:	61417272 	.word	0x61417272
 8007834:	2000002c 	.word	0x2000002c
 8007838:	20000050 	.word	0x20000050

0800783c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007846:	2309      	movs	r3, #9
 8007848:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <validate+0x4e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d018      	beq.n	800788a <validate+0x4e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d013      	beq.n	800788a <validate+0x4e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	889a      	ldrh	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	88db      	ldrh	r3, [r3, #6]
 800786c:	429a      	cmp	r2, r3
 800786e:	d10c      	bne.n	800788a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fe38 	bl	80054ec <disk_status>
 800787c:	4603      	mov	r3, r0
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <validate+0x4e>
			res = FR_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <validate+0x5a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	e000      	b.n	8007898 <validate+0x5c>
 8007896:	2300      	movs	r3, #0
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	6013      	str	r3, [r2, #0]
	return res;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fc9a 	bl	80071f8 <get_ldnumber>
 80078c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da01      	bge.n	80078d0 <f_mount+0x28>
 80078cc:	230b      	movs	r3, #11
 80078ce:	e02b      	b.n	8007928 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078d0:	4a17      	ldr	r2, [pc, #92]	; (8007930 <f_mount+0x88>)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80078e0:	69b8      	ldr	r0, [r7, #24]
 80078e2:	f7fe f8e9 	bl	8005ab8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	490d      	ldr	r1, [pc, #52]	; (8007930 <f_mount+0x88>)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <f_mount+0x66>
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <f_mount+0x6a>
 800790e:	2300      	movs	r3, #0
 8007910:	e00a      	b.n	8007928 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007912:	f107 010c 	add.w	r1, r7, #12
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	2200      	movs	r2, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff fd05 	bl	800732c <find_volume>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007926:	7dfb      	ldrb	r3, [r7, #23]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000028 	.word	0x20000028

08007934 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b09a      	sub	sp, #104	; 0x68
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <f_open+0x18>
 8007948:	2309      	movs	r3, #9
 800794a:	e1bb      	b.n	8007cc4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007952:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007954:	79fa      	ldrb	r2, [r7, #7]
 8007956:	f107 0114 	add.w	r1, r7, #20
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fce4 	bl	800732c <find_volume>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800796a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 819f 	bne.w	8007cb2 <f_open+0x37e>
		dj.obj.fs = fs;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fbc3 	bl	800710c <follow_path>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800798c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11a      	bne.n	80079ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007998:	b25b      	sxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	da03      	bge.n	80079a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800799e:	2306      	movs	r3, #6
 80079a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80079a4:	e011      	b.n	80079ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	f107 0318 	add.w	r3, r7, #24
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd ff32 	bl	8005828 <chk_lock>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	f003 031c 	and.w	r3, r3, #28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d07f      	beq.n	8007ad4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80079d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d017      	beq.n	8007a0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80079dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d10e      	bne.n	8007a02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079e4:	f7fd ff7c 	bl	80058e0 <enq_lock>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <f_open+0xc8>
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff f8da 	bl	8006bac <dir_register>
 80079f8:	4603      	mov	r3, r0
 80079fa:	e000      	b.n	80079fe <f_open+0xca>
 80079fc:	2312      	movs	r3, #18
 80079fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	f043 0308 	orr.w	r3, r3, #8
 8007a08:	71fb      	strb	r3, [r7, #7]
 8007a0a:	e010      	b.n	8007a2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a0c:	7fbb      	ldrb	r3, [r7, #30]
 8007a0e:	f003 0311 	and.w	r3, r3, #17
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <f_open+0xea>
					res = FR_DENIED;
 8007a16:	2307      	movs	r3, #7
 8007a18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a1c:	e007      	b.n	8007a2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <f_open+0xfa>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d168      	bne.n	8007b08 <f_open+0x1d4>
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d063      	beq.n	8007b08 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007a40:	f7fd fb9c 	bl	800517c <get_fattime>
 8007a44:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	330e      	adds	r3, #14
 8007a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fd fe41 	bl	80056d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	3316      	adds	r3, #22
 8007a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fd fe3b 	bl	80056d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	330b      	adds	r3, #11
 8007a62:	2220      	movs	r2, #32
 8007a64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fe13 	bl	8006698 <ld_clust>
 8007a72:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fe2b 	bl	80066d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	331c      	adds	r3, #28
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd fe24 	bl	80056d4 <st_dword>
					fs->wflag = 1;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d037      	beq.n	8007b08 <f_open+0x1d4>
						dw = fs->winsect;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007a9e:	f107 0318 	add.w	r3, r7, #24
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fb1b 	bl	80060e2 <remove_chain>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d126      	bne.n	8007b08 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe f862 	bl	8005b88 <move_window>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	615a      	str	r2, [r3, #20]
 8007ad2:	e019      	b.n	8007b08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ad4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d115      	bne.n	8007b08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007adc:	7fbb      	ldrb	r3, [r7, #30]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <f_open+0x1ba>
					res = FR_NO_FILE;
 8007ae6:	2304      	movs	r3, #4
 8007ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007aec:	e00c      	b.n	8007b08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <f_open+0x1d4>
 8007af8:	7fbb      	ldrb	r3, [r7, #30]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <f_open+0x1d4>
						res = FR_DENIED;
 8007b02:	2307      	movs	r3, #7
 8007b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d128      	bne.n	8007b62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	f107 0318 	add.w	r3, r7, #24
 8007b46:	4611      	mov	r1, r2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd feeb 	bl	8005924 <inc_lock>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <f_open+0x22e>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f040 80a3 	bne.w	8007cb2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fd90 	bl	8006698 <ld_clust>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	331c      	adds	r3, #28
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd fd68 	bl	8005658 <ld_dword>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	88da      	ldrh	r2, [r3, #6]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	79fa      	ldrb	r2, [r7, #7]
 8007ba6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3330      	adds	r3, #48	; 0x30
 8007bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd fdd2 	bl	800576e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d06e      	beq.n	8007cb2 <f_open+0x37e>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d06a      	beq.n	8007cb2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	895b      	ldrh	r3, [r3, #10]
 8007be8:	461a      	mov	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	899b      	ldrh	r3, [r3, #12]
 8007bee:	fb03 f302 	mul.w	r3, r3, r2
 8007bf2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c00:	e016      	b.n	8007c30 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe f87b 	bl	8005d02 <get_fat>
 8007c0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d802      	bhi.n	8007c1a <f_open+0x2e6>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c20:	d102      	bne.n	8007c28 <f_open+0x2f4>
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <f_open+0x30c>
 8007c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d8e0      	bhi.n	8007c02 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d131      	bne.n	8007cb2 <f_open+0x37e>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	899b      	ldrh	r3, [r3, #12]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c5a:	fb02 f201 	mul.w	r2, r2, r1
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d026      	beq.n	8007cb2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe f82b 	bl	8005cc4 <clust2sect>
 8007c6e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <f_open+0x34a>
						res = FR_INT_ERR;
 8007c76:	2302      	movs	r3, #2
 8007c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007c7c:	e019      	b.n	8007cb2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	899b      	ldrh	r3, [r3, #12]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	441a      	add	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	7858      	ldrb	r0, [r3, #1]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f7fd fc63 	bl	800556c <disk_read>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <f_open+0x37e>
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <f_open+0x38c>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3768      	adds	r7, #104	; 0x68
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	; 0x38
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f107 0214 	add.w	r2, r7, #20
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fda5 	bl	800783c <validate>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <f_read+0x44>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	7d5b      	ldrb	r3, [r3, #21]
 8007d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <f_read+0x4a>
 8007d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d14:	e135      	b.n	8007f82 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	7d1b      	ldrb	r3, [r3, #20]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <f_read+0x5a>
 8007d22:	2307      	movs	r3, #7
 8007d24:	e12d      	b.n	8007f82 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	f240 811e 	bls.w	8007f78 <f_read+0x2ac>
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007d40:	e11a      	b.n	8007f78 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	8992      	ldrh	r2, [r2, #12]
 8007d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d4e:	fb02 f201 	mul.w	r2, r2, r1
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 80d5 	bne.w	8007f04 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	8992      	ldrh	r2, [r2, #12]
 8007d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	8952      	ldrh	r2, [r2, #10]
 8007d6a:	3a01      	subs	r2, #1
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d12f      	bne.n	8007dd6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d103      	bne.n	8007d86 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30
 8007d84:	e013      	b.n	8007dae <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	4619      	mov	r1, r3
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7fe faa1 	bl	80062dc <clmt_clust>
 8007d9a:	6338      	str	r0, [r7, #48]	; 0x30
 8007d9c:	e007      	b.n	8007dae <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f7fd ffab 	bl	8005d02 <get_fat>
 8007dac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d804      	bhi.n	8007dbe <f_read+0xf2>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2202      	movs	r2, #2
 8007db8:	755a      	strb	r2, [r3, #21]
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e0e1      	b.n	8007f82 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc4:	d104      	bne.n	8007dd0 <f_read+0x104>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	755a      	strb	r2, [r3, #21]
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0d8      	b.n	8007f82 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fd ff70 	bl	8005cc4 <clust2sect>
 8007de4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <f_read+0x12a>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2202      	movs	r2, #2
 8007df0:	755a      	strb	r2, [r3, #21]
 8007df2:	2302      	movs	r3, #2
 8007df4:	e0c5      	b.n	8007f82 <f_read+0x2b6>
			sect += csect;
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	899b      	ldrh	r3, [r3, #12]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d041      	beq.n	8007e96 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	4413      	add	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	8952      	ldrh	r2, [r2, #10]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d905      	bls.n	8007e2c <f_read+0x160>
					cc = fs->csize - csect;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	895b      	ldrh	r3, [r3, #10]
 8007e24:	461a      	mov	r2, r3
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	7858      	ldrb	r0, [r3, #1]
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e36:	f7fd fb99 	bl	800556c <disk_read>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <f_read+0x17e>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	755a      	strb	r2, [r3, #21]
 8007e46:	2301      	movs	r3, #1
 8007e48:	e09b      	b.n	8007f82 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7d1b      	ldrb	r3, [r3, #20]
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da18      	bge.n	8007e86 <f_read+0x1ba>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1a      	ldr	r2, [r3, #32]
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d911      	bls.n	8007e86 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	8992      	ldrh	r2, [r2, #12]
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e74:	18d0      	adds	r0, r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	899b      	ldrh	r3, [r3, #12]
 8007e80:	461a      	mov	r2, r3
 8007e82:	f7fd fc53 	bl	800572c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	899b      	ldrh	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	fb02 f303 	mul.w	r3, r2, r3
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007e94:	e05c      	b.n	8007f50 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d02e      	beq.n	8007efe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	7d1b      	ldrb	r3, [r3, #20]
 8007ea4:	b25b      	sxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da18      	bge.n	8007edc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	7858      	ldrb	r0, [r3, #1]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f7fd fb77 	bl	80055ac <disk_write>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <f_read+0x202>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	755a      	strb	r2, [r3, #21]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e059      	b.n	8007f82 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	7d1b      	ldrb	r3, [r3, #20]
 8007ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	7858      	ldrb	r0, [r3, #1]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	f7fd fb3f 	bl	800556c <disk_read>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <f_read+0x232>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	755a      	strb	r2, [r3, #21]
 8007efa:	2301      	movs	r3, #1
 8007efc:	e041      	b.n	8007f82 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	899b      	ldrh	r3, [r3, #12]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	8992      	ldrh	r2, [r2, #12]
 8007f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f16:	fb02 f201 	mul.w	r2, r2, r1
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	1ac3      	subs	r3, r0, r3
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d901      	bls.n	8007f2c <f_read+0x260>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	8992      	ldrh	r2, [r2, #12]
 8007f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f3e:	fb02 f200 	mul.w	r2, r2, r0
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	440b      	add	r3, r1
 8007f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f4c:	f7fd fbee 	bl	800572c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	4413      	add	r3, r2
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	441a      	add	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	619a      	str	r2, [r3, #24]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	441a      	add	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f47f aee1 	bne.w	8007d42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3738      	adds	r7, #56	; 0x38
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08c      	sub	sp, #48	; 0x30
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f107 0210 	add.w	r2, r7, #16
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff fc46 	bl	800783c <validate>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d107      	bne.n	8007fce <f_write+0x44>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	7d5b      	ldrb	r3, [r3, #21]
 8007fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <f_write+0x4a>
 8007fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fd2:	e16a      	b.n	80082aa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	7d1b      	ldrb	r3, [r3, #20]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <f_write+0x5a>
 8007fe0:	2307      	movs	r3, #7
 8007fe2:	e162      	b.n	80082aa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	f080 814c 	bcs.w	800828e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007ffe:	e146      	b.n	800828e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	8992      	ldrh	r2, [r2, #12]
 8008008:	fbb3 f1f2 	udiv	r1, r3, r2
 800800c:	fb02 f201 	mul.w	r2, r2, r1
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 80f1 	bne.w	80081fa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	8992      	ldrh	r2, [r2, #12]
 8008020:	fbb3 f3f2 	udiv	r3, r3, r2
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	8952      	ldrh	r2, [r2, #10]
 8008028:	3a01      	subs	r2, #1
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d143      	bne.n	80080bc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11a      	bne.n	800807e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe f8ad 	bl	80061ac <create_chain>
 8008052:	62b8      	str	r0, [r7, #40]	; 0x28
 8008054:	e013      	b.n	800807e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	4619      	mov	r1, r3
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7fe f939 	bl	80062dc <clmt_clust>
 800806a:	62b8      	str	r0, [r7, #40]	; 0x28
 800806c:	e007      	b.n	800807e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7fe f898 	bl	80061ac <create_chain>
 800807c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8109 	beq.w	8008298 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	2b01      	cmp	r3, #1
 800808a:	d104      	bne.n	8008096 <f_write+0x10c>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2202      	movs	r2, #2
 8008090:	755a      	strb	r2, [r3, #21]
 8008092:	2302      	movs	r3, #2
 8008094:	e109      	b.n	80082aa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800809c:	d104      	bne.n	80080a8 <f_write+0x11e>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	755a      	strb	r2, [r3, #21]
 80080a4:	2301      	movs	r3, #1
 80080a6:	e100      	b.n	80082aa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <f_write+0x132>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	7d1b      	ldrb	r3, [r3, #20]
 80080c0:	b25b      	sxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da18      	bge.n	80080f8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	7858      	ldrb	r0, [r3, #1]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	2301      	movs	r3, #1
 80080d6:	f7fd fa69 	bl	80055ac <disk_write>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <f_write+0x160>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	755a      	strb	r2, [r3, #21]
 80080e6:	2301      	movs	r3, #1
 80080e8:	e0df      	b.n	80082aa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	7d1b      	ldrb	r3, [r3, #20]
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7fd fddf 	bl	8005cc4 <clust2sect>
 8008106:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <f_write+0x18e>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2202      	movs	r2, #2
 8008112:	755a      	strb	r2, [r3, #21]
 8008114:	2302      	movs	r3, #2
 8008116:	e0c8      	b.n	80082aa <f_write+0x320>
			sect += csect;
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	4413      	add	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	899b      	ldrh	r3, [r3, #12]
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	fbb3 f3f2 	udiv	r3, r3, r2
 800812c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d043      	beq.n	80081bc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	4413      	add	r3, r2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	8952      	ldrh	r2, [r2, #10]
 800813e:	4293      	cmp	r3, r2
 8008140:	d905      	bls.n	800814e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	895b      	ldrh	r3, [r3, #10]
 8008146:	461a      	mov	r2, r3
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	7858      	ldrb	r0, [r3, #1]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	f7fd fa28 	bl	80055ac <disk_write>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <f_write+0x1e2>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	755a      	strb	r2, [r3, #21]
 8008168:	2301      	movs	r3, #1
 800816a:	e09e      	b.n	80082aa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a1a      	ldr	r2, [r3, #32]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	429a      	cmp	r2, r3
 8008178:	d918      	bls.n	80081ac <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a1a      	ldr	r2, [r3, #32]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	8992      	ldrh	r2, [r2, #12]
 800818c:	fb02 f303 	mul.w	r3, r2, r3
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	18d1      	adds	r1, r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	899b      	ldrh	r3, [r3, #12]
 8008198:	461a      	mov	r2, r3
 800819a:	f7fd fac7 	bl	800572c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	899b      	ldrh	r3, [r3, #12]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	fb02 f303 	mul.w	r3, r2, r3
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80081ba:	e04b      	b.n	8008254 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d016      	beq.n	80081f4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d210      	bcs.n	80081f4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	7858      	ldrb	r0, [r3, #1]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081dc:	2301      	movs	r3, #1
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	f7fd f9c4 	bl	800556c <disk_read>
 80081e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d004      	beq.n	80081f4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	755a      	strb	r2, [r3, #21]
 80081f0:	2301      	movs	r3, #1
 80081f2:	e05a      	b.n	80082aa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	899b      	ldrh	r3, [r3, #12]
 80081fe:	4618      	mov	r0, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	8992      	ldrh	r2, [r2, #12]
 8008208:	fbb3 f1f2 	udiv	r1, r3, r2
 800820c:	fb02 f201 	mul.w	r2, r2, r1
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	1ac3      	subs	r3, r0, r3
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d901      	bls.n	8008222 <f_write+0x298>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	8992      	ldrh	r2, [r2, #12]
 8008230:	fbb3 f0f2 	udiv	r0, r3, r2
 8008234:	fb02 f200 	mul.w	r2, r2, r0
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	440b      	add	r3, r1
 800823c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823e:	69f9      	ldr	r1, [r7, #28]
 8008240:	4618      	mov	r0, r3
 8008242:	f7fd fa73 	bl	800572c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	7d1b      	ldrb	r3, [r3, #20]
 800824a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800824e:	b2da      	uxtb	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	4413      	add	r3, r2
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	441a      	add	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	619a      	str	r2, [r3, #24]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	429a      	cmp	r2, r3
 8008272:	bf38      	it	cc
 8008274:	461a      	movcc	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	441a      	add	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f47f aeb5 	bne.w	8008000 <f_write+0x76>
 8008296:	e000      	b.n	800829a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008298:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	7d1b      	ldrb	r3, [r3, #20]
 800829e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3730      	adds	r7, #48	; 0x30
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b086      	sub	sp, #24
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f107 0208 	add.w	r2, r7, #8
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff faba 	bl	800783c <validate>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d168      	bne.n	80083a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7d1b      	ldrb	r3, [r3, #20]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d062      	beq.n	80083a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7d1b      	ldrb	r3, [r3, #20]
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da15      	bge.n	8008314 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	7858      	ldrb	r0, [r3, #1]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1a      	ldr	r2, [r3, #32]
 80082f6:	2301      	movs	r3, #1
 80082f8:	f7fd f958 	bl	80055ac <disk_write>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <f_sync+0x54>
 8008302:	2301      	movs	r3, #1
 8008304:	e04f      	b.n	80083a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7d1b      	ldrb	r3, [r3, #20]
 800830a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830e:	b2da      	uxtb	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008314:	f7fc ff32 	bl	800517c <get_fattime>
 8008318:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fd fc30 	bl	8005b88 <move_window>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d138      	bne.n	80083a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	330b      	adds	r3, #11
 800833c:	781a      	ldrb	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	330b      	adds	r3, #11
 8008342:	f042 0220 	orr.w	r2, r2, #32
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	461a      	mov	r2, r3
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	f7fe f9be 	bl	80066d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f103 021c 	add.w	r2, r3, #28
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f7fd f9b4 	bl	80056d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3316      	adds	r3, #22
 8008370:	6939      	ldr	r1, [r7, #16]
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd f9ae 	bl	80056d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3312      	adds	r3, #18
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd f98d 	bl	800569e <st_word>
					fs->wflag = 1;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2201      	movs	r2, #1
 8008388:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4618      	mov	r0, r3
 800838e:	f7fd fc29 	bl	8005be4 <sync_fs>
 8008392:	4603      	mov	r3, r0
 8008394:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7d1b      	ldrb	r3, [r3, #20]
 800839a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff ff7b 	bl	80082b2 <f_sync>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d118      	bne.n	80083f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f107 0208 	add.w	r2, r7, #8
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fa34 	bl	800783c <validate>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10c      	bne.n	80083f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fb2c 	bl	8005a40 <dec_lock>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800841a:	4b1f      	ldr	r3, [pc, #124]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 800841c:	7a5b      	ldrb	r3, [r3, #9]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d131      	bne.n	8008488 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008424:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 8008426:	7a5b      	ldrb	r3, [r3, #9]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 800842e:	2100      	movs	r1, #0
 8008430:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008432:	4b19      	ldr	r3, [pc, #100]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 8008434:	7a5b      	ldrb	r3, [r3, #9]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	4a17      	ldr	r2, [pc, #92]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 8008444:	7a5b      	ldrb	r3, [r3, #9]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	4b13      	ldr	r3, [pc, #76]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 800844c:	4413      	add	r3, r2
 800844e:	79fa      	ldrb	r2, [r7, #7]
 8008450:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 8008454:	7a5b      	ldrb	r3, [r3, #9]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	b2d1      	uxtb	r1, r2
 800845c:	4a0e      	ldr	r2, [pc, #56]	; (8008498 <FATFS_LinkDriverEx+0x94>)
 800845e:	7251      	strb	r1, [r2, #9]
 8008460:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008462:	7dbb      	ldrb	r3, [r7, #22]
 8008464:	3330      	adds	r3, #48	; 0x30
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3301      	adds	r3, #1
 8008470:	223a      	movs	r2, #58	; 0x3a
 8008472:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3302      	adds	r3, #2
 8008478:	222f      	movs	r2, #47	; 0x2f
 800847a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3303      	adds	r3, #3
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000250 	.word	0x20000250

0800849c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80084a6:	2200      	movs	r2, #0
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ffaa 	bl	8008404 <FATFS_LinkDriverEx>
 80084b0:	4603      	mov	r3, r0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	2b7f      	cmp	r3, #127	; 0x7f
 80084cc:	d802      	bhi.n	80084d4 <ff_convert+0x18>
		c = chr;
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	81fb      	strh	r3, [r7, #14]
 80084d2:	e025      	b.n	8008520 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	2bff      	cmp	r3, #255	; 0xff
 80084de:	d805      	bhi.n	80084ec <ff_convert+0x30>
 80084e0:	88fb      	ldrh	r3, [r7, #6]
 80084e2:	3b80      	subs	r3, #128	; 0x80
 80084e4:	4a12      	ldr	r2, [pc, #72]	; (8008530 <ff_convert+0x74>)
 80084e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ea:	e000      	b.n	80084ee <ff_convert+0x32>
 80084ec:	2300      	movs	r3, #0
 80084ee:	81fb      	strh	r3, [r7, #14]
 80084f0:	e016      	b.n	8008520 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	81fb      	strh	r3, [r7, #14]
 80084f6:	e009      	b.n	800850c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	4a0d      	ldr	r2, [pc, #52]	; (8008530 <ff_convert+0x74>)
 80084fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008500:	88fa      	ldrh	r2, [r7, #6]
 8008502:	429a      	cmp	r2, r3
 8008504:	d006      	beq.n	8008514 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008506:	89fb      	ldrh	r3, [r7, #14]
 8008508:	3301      	adds	r3, #1
 800850a:	81fb      	strh	r3, [r7, #14]
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	2b7f      	cmp	r3, #127	; 0x7f
 8008510:	d9f2      	bls.n	80084f8 <ff_convert+0x3c>
 8008512:	e000      	b.n	8008516 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008514:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008516:	89fb      	ldrh	r3, [r7, #14]
 8008518:	3380      	adds	r3, #128	; 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	b2db      	uxtb	r3, r3
 800851e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008520:	89fb      	ldrh	r3, [r7, #14]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	08008828 	.word	0x08008828

08008534 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800853e:	88fb      	ldrh	r3, [r7, #6]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008544:	d201      	bcs.n	800854a <ff_wtoupper+0x16>
 8008546:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <ff_wtoupper+0x10c>)
 8008548:	e000      	b.n	800854c <ff_wtoupper+0x18>
 800854a:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <ff_wtoupper+0x110>)
 800854c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	1c9a      	adds	r2, r3, #2
 8008552:	617a      	str	r2, [r7, #20]
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008558:	8a7b      	ldrh	r3, [r7, #18]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d068      	beq.n	8008630 <ff_wtoupper+0xfc>
 800855e:	88fa      	ldrh	r2, [r7, #6]
 8008560:	8a7b      	ldrh	r3, [r7, #18]
 8008562:	429a      	cmp	r2, r3
 8008564:	d364      	bcc.n	8008630 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	1c9a      	adds	r2, r3, #2
 800856a:	617a      	str	r2, [r7, #20]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	823b      	strh	r3, [r7, #16]
 8008570:	8a3b      	ldrh	r3, [r7, #16]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	81fb      	strh	r3, [r7, #14]
 8008576:	8a3b      	ldrh	r3, [r7, #16]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	8a79      	ldrh	r1, [r7, #18]
 8008580:	8a3b      	ldrh	r3, [r7, #16]
 8008582:	440b      	add	r3, r1
 8008584:	429a      	cmp	r2, r3
 8008586:	da49      	bge.n	800861c <ff_wtoupper+0xe8>
			switch (cmd) {
 8008588:	89fb      	ldrh	r3, [r7, #14]
 800858a:	2b08      	cmp	r3, #8
 800858c:	d84f      	bhi.n	800862e <ff_wtoupper+0xfa>
 800858e:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <ff_wtoupper+0x60>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085b9 	.word	0x080085b9
 8008598:	080085cb 	.word	0x080085cb
 800859c:	080085e1 	.word	0x080085e1
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	080085f1 	.word	0x080085f1
 80085a8:	080085f9 	.word	0x080085f9
 80085ac:	08008601 	.word	0x08008601
 80085b0:	08008609 	.word	0x08008609
 80085b4:	08008611 	.word	0x08008611
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	8a7b      	ldrh	r3, [r7, #18]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	80fb      	strh	r3, [r7, #6]
 80085c8:	e027      	b.n	800861a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80085ca:	88fa      	ldrh	r2, [r7, #6]
 80085cc:	8a7b      	ldrh	r3, [r7, #18]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	88fa      	ldrh	r2, [r7, #6]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	80fb      	strh	r3, [r7, #6]
 80085de:	e01c      	b.n	800861a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	3b10      	subs	r3, #16
 80085e4:	80fb      	strh	r3, [r7, #6]
 80085e6:	e018      	b.n	800861a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	3b20      	subs	r3, #32
 80085ec:	80fb      	strh	r3, [r7, #6]
 80085ee:	e014      	b.n	800861a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	3b30      	subs	r3, #48	; 0x30
 80085f4:	80fb      	strh	r3, [r7, #6]
 80085f6:	e010      	b.n	800861a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	3b1a      	subs	r3, #26
 80085fc:	80fb      	strh	r3, [r7, #6]
 80085fe:	e00c      	b.n	800861a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	3308      	adds	r3, #8
 8008604:	80fb      	strh	r3, [r7, #6]
 8008606:	e008      	b.n	800861a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	3b50      	subs	r3, #80	; 0x50
 800860c:	80fb      	strh	r3, [r7, #6]
 800860e:	e004      	b.n	800861a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008616:	80fb      	strh	r3, [r7, #6]
 8008618:	bf00      	nop
			}
			break;
 800861a:	e008      	b.n	800862e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d195      	bne.n	800854e <ff_wtoupper+0x1a>
 8008622:	8a3b      	ldrh	r3, [r7, #16]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800862c:	e78f      	b.n	800854e <ff_wtoupper+0x1a>
			break;
 800862e:	bf00      	nop
	}

	return chr;
 8008630:	88fb      	ldrh	r3, [r7, #6]
}
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	08008928 	.word	0x08008928
 8008644:	08008b1c 	.word	0x08008b1c

08008648 <__libc_init_array>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4d0d      	ldr	r5, [pc, #52]	; (8008680 <__libc_init_array+0x38>)
 800864c:	4c0d      	ldr	r4, [pc, #52]	; (8008684 <__libc_init_array+0x3c>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	2600      	movs	r6, #0
 8008654:	42a6      	cmp	r6, r4
 8008656:	d109      	bne.n	800866c <__libc_init_array+0x24>
 8008658:	4d0b      	ldr	r5, [pc, #44]	; (8008688 <__libc_init_array+0x40>)
 800865a:	4c0c      	ldr	r4, [pc, #48]	; (800868c <__libc_init_array+0x44>)
 800865c:	f000 f820 	bl	80086a0 <_init>
 8008660:	1b64      	subs	r4, r4, r5
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	2600      	movs	r6, #0
 8008666:	42a6      	cmp	r6, r4
 8008668:	d105      	bne.n	8008676 <__libc_init_array+0x2e>
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008670:	4798      	blx	r3
 8008672:	3601      	adds	r6, #1
 8008674:	e7ee      	b.n	8008654 <__libc_init_array+0xc>
 8008676:	f855 3b04 	ldr.w	r3, [r5], #4
 800867a:	4798      	blx	r3
 800867c:	3601      	adds	r6, #1
 800867e:	e7f2      	b.n	8008666 <__libc_init_array+0x1e>
 8008680:	08008bd8 	.word	0x08008bd8
 8008684:	08008bd8 	.word	0x08008bd8
 8008688:	08008bd8 	.word	0x08008bd8
 800868c:	08008bdc 	.word	0x08008bdc

08008690 <memset>:
 8008690:	4402      	add	r2, r0
 8008692:	4603      	mov	r3, r0
 8008694:	4293      	cmp	r3, r2
 8008696:	d100      	bne.n	800869a <memset+0xa>
 8008698:	4770      	bx	lr
 800869a:	f803 1b01 	strb.w	r1, [r3], #1
 800869e:	e7f9      	b.n	8008694 <memset+0x4>

080086a0 <_init>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	bf00      	nop
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr

080086ac <_fini>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr
