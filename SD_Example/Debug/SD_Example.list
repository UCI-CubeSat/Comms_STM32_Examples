
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008fac  08008fac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fac  08008fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002348  2000000c  08008fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20002354  08008fc0  00022354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165e4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e03  00000000  00000000  00036620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00039428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0003a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f2c  00000000  00000000  0003ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128de  00000000  00000000  00062dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa9d  00000000  00000000  0007568a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  0016017c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a54 	.word	0x08008a54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008a54 	.word	0x08008a54

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	f5ad 5d8a 	sub.w	sp, sp, #4416	; 0x1140
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res, stat_test; //fatfs function common result code
	FILINFO stat_test_info;
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "STM32 FATFS works great!"; //file buffer
 80001e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80001e4:	4a58      	ldr	r2, [pc, #352]	; (8000348 <main+0x170>)
 80001e6:	461c      	mov	r4, r3
 80001e8:	4615      	mov	r5, r2
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f2:	c403      	stmia	r4!, {r0, r1}
 80001f4:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 facc 	bl	8000792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f8b7 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f95d 	bl	80004bc <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000202:	f000 f93b 	bl	800047c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000206:	f004 ff5d 	bl	80050c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //mount SD card

  //poll GPIO to make sure that SD card is connected
  if(!BSP_SD_IsDetected()) {
 800020a:	f005 f81a 	bl	8005242 <BSP_SD_IsDetected>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d101      	bne.n	8000218 <main+0x40>
	  Error_Handler();
 8000214:	f000 f996 	bl	8000544 <Error_Handler>
  }

  FATFS_LinkDriver(&SD_Driver, SDPath);
 8000218:	494c      	ldr	r1, [pc, #304]	; (800034c <main+0x174>)
 800021a:	484d      	ldr	r0, [pc, #308]	; (8000350 <main+0x178>)
 800021c:	f008 fb18 	bl	8008850 <FATFS_LinkDriver>

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 8000220:	2201      	movs	r2, #1
 8000222:	494a      	ldr	r1, [pc, #296]	; (800034c <main+0x174>)
 8000224:	484b      	ldr	r0, [pc, #300]	; (8000354 <main+0x17c>)
 8000226:	f007 fbd3 	bl	80079d0 <f_mount>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <main+0x5e>
	  Error_Handler();
 8000230:	f000 f988 	bl	8000544 <Error_Handler>
 8000234:	e012      	b.n	800025c <main+0x84>
  }
  else { //file system already exists, try to open a file

	  //creating subdirectory (default relative to root)
	  res = f_mkdir("sub_test");
 8000236:	4848      	ldr	r0, [pc, #288]	; (8000358 <main+0x180>)
 8000238:	f008 f9b0 	bl	800859c <f_mkdir>
 800023c:	4603      	mov	r3, r0
 800023e:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000242:	f102 021f 	add.w	r2, r2, #31
 8000246:	7013      	strb	r3, [r2, #0]

	  //open file, create it and write
	  if(f_open(&SDFile, "sub_test/stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8000248:	220a      	movs	r2, #10
 800024a:	4944      	ldr	r1, [pc, #272]	; (800035c <main+0x184>)
 800024c:	4844      	ldr	r0, [pc, #272]	; (8000360 <main+0x188>)
 800024e:	f007 fc05 	bl	8007a5c <f_open>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <main+0x84>
		  Error_Handler();
 8000258:	f000 f974 	bl	8000544 <Error_Handler>
		  }
	  }

  	  //write to the text file
  	  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800025c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ffb1 	bl	80001c8 <strlen>
 8000266:	4602      	mov	r2, r0
 8000268:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800026c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000270:	483b      	ldr	r0, [pc, #236]	; (8000360 <main+0x188>)
 8000272:	f007 ff1e 	bl	80080b2 <f_write>
 8000276:	4603      	mov	r3, r0
 8000278:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800027c:	f102 021f 	add.w	r2, r2, #31
 8000280:	7013      	strb	r3, [r2, #0]
  	  if((byteswritten == 0) || (res != FR_OK)) {
 8000282:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d006      	beq.n	800029a <main+0xc2>
 800028c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000290:	f103 031f 	add.w	r3, r3, #31
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d002      	beq.n	80002a0 <main+0xc8>
  		  Error_Handler();
 800029a:	f000 f953 	bl	8000544 <Error_Handler>
 800029e:	e04d      	b.n	800033c <main+0x164>
  	  } else {
  		  f_close(&SDFile);
 80002a0:	482f      	ldr	r0, [pc, #188]	; (8000360 <main+0x188>)
 80002a2:	f008 f918 	bl	80084d6 <f_close>

	  //test read the file
	  f_open(&SDFile, "stm32.txt", FA_READ);
 80002a6:	2201      	movs	r2, #1
 80002a8:	492e      	ldr	r1, [pc, #184]	; (8000364 <main+0x18c>)
 80002aa:	482d      	ldr	r0, [pc, #180]	; (8000360 <main+0x188>)
 80002ac:	f007 fbd6 	bl	8007a5c <f_open>
	  memset(rtext, 0, sizeof(rtext));
 80002b0:	463b      	mov	r3, r7
 80002b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f008 fbc3 	bl	8008a44 <memset>
	  res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80002be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002c2:	f103 031c 	add.w	r3, r3, #28
 80002c6:	4639      	mov	r1, r7
 80002c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002cc:	4824      	ldr	r0, [pc, #144]	; (8000360 <main+0x188>)
 80002ce:	f007 fd91 	bl	8007df4 <f_read>
 80002d2:	4603      	mov	r3, r0
 80002d4:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80002d8:	f102 021f 	add.w	r2, r2, #31
 80002dc:	7013      	strb	r3, [r2, #0]
	  if((bytesread == 0) || (res != FR_OK)) {
 80002de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002e2:	f103 031c 	add.w	r3, r3, #28
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d006      	beq.n	80002fa <main+0x122>
 80002ec:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80002f0:	f103 031f 	add.w	r3, r3, #31
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <main+0x126>
		  Error_Handler();
 80002fa:	f000 f923 	bl	8000544 <Error_Handler>
	  }
	  f_close(&SDFile);
 80002fe:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0x188>)
 8000300:	f008 f8e9 	bl	80084d6 <f_close>

	  //checking for file existence

	  //expect FR_OK
	  stat_test = f_stat("sub_test/stm32.txt", &stat_test_info);
 8000304:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000308:	f103 0304 	add.w	r3, r3, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4813      	ldr	r0, [pc, #76]	; (800035c <main+0x184>)
 8000310:	f008 f90b 	bl	800852a <f_stat>
 8000314:	4603      	mov	r3, r0
 8000316:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800031a:	f102 021e 	add.w	r2, r2, #30
 800031e:	7013      	strb	r3, [r2, #0]
	  //expect FR_NO_FILE
	  stat_test = f_stat("sub_test/stm31.txt", &stat_test_info);
 8000320:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000324:	f103 0304 	add.w	r3, r3, #4
 8000328:	4619      	mov	r1, r3
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <main+0x190>)
 800032c:	f008 f8fd 	bl	800852a <f_stat>
 8000330:	4603      	mov	r3, r0
 8000332:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000336:	f102 021e 	add.w	r2, r2, #30
 800033a:	7013      	strb	r3, [r2, #0]

  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <main+0x17c>)
 8000342:	f007 fb45 	bl	80079d0 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x16e>
 8000348:	08008aac 	.word	0x08008aac
 800034c:	200002e8 	.word	0x200002e8
 8000350:	08008b58 	.word	0x08008b58
 8000354:	2000131c 	.word	0x2000131c
 8000358:	08008a6c 	.word	0x08008a6c
 800035c:	08008a78 	.word	0x08008a78
 8000360:	200002ec 	.word	0x200002ec
 8000364:	08008a8c 	.word	0x08008a8c
 8000368:	08008a98 	.word	0x08008a98

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0b8      	sub	sp, #224	; 0xe0
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000376:	2244      	movs	r2, #68	; 0x44
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 fb62 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2288      	movs	r2, #136	; 0x88
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f008 fb54 	bl	8008a44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800039c:	2310      	movs	r3, #16
 800039e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ae:	2360      	movs	r3, #96	; 0x60
 80003b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 80003c6:	2310      	movs	r3, #16
 80003c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003cc:	2307      	movs	r3, #7
 80003ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d8:	2302      	movs	r3, #2
 80003da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fde6 	bl	8000fb4 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003ee:	f000 f8a9 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2303      	movs	r3, #3
 80003fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f001 f9b2 	bl	8001780 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000422:	f000 f88f 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000426:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800042a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800042c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000430:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000432:	2301      	movs	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000436:	2301      	movs	r3, #1
 8000438:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800043a:	2310      	movs	r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800043e:	2307      	movs	r3, #7
 8000440:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000442:	2304      	movs	r3, #4
 8000444:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800044a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800044e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fb9a 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800045e:	f000 f871 	bl	8000544 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000462:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000466:	f000 fd4f 	bl	8000f08 <HAL_PWREx_ControlVoltageScaling>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000470:	f000 f868 	bl	8000544 <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	37e0      	adds	r7, #224	; 0xe0
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 8000482:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <MX_SDMMC1_SD_Init+0x3c>)
 8000484:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <MX_SDMMC1_SD_Init+0x38>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
 // hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  /* USER CODE END SDMMC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	2000025c 	.word	0x2000025c
 80004b8:	40012800 	.word	0x40012800

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_GPIO_Init+0x84>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <MX_GPIO_Init+0x84>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_GPIO_Init+0x84>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_GPIO_Init+0x84>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <MX_GPIO_Init+0x84>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_GPIO_Init+0x84>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_GPIO_Init+0x84>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <MX_GPIO_Init+0x84>)
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_GPIO_Init+0x84>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0308 	and.w	r3, r3, #8
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	4619      	mov	r1, r3
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fb19 	bl	8000b68 <HAL_GPIO_Init>

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6613      	str	r3, [r2, #96]	; 0x60
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6593      	str	r3, [r2, #88]	; 0x58
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <HAL_SD_MspInit+0xc4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d14c      	bne.n	8000654 <HAL_SD_MspInit+0xbc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	4a28      	ldr	r2, [pc, #160]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005c4:	6613      	str	r3, [r2, #96]	; 0x60
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a22      	ldr	r2, [pc, #136]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_SD_MspInit+0xc8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000602:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000614:	230c      	movs	r3, #12
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <HAL_SD_MspInit+0xcc>)
 8000620:	f000 faa2 	bl	8000b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000624:	2304      	movs	r3, #4
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000634:	230c      	movs	r3, #12
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <HAL_SD_MspInit+0xd0>)
 8000640:	f000 fa92 	bl	8000b68 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2031      	movs	r0, #49	; 0x31
 800064a:	f000 fa16 	bl	8000a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800064e:	2031      	movs	r0, #49	; 0x31
 8000650:	f000 fa2f 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40012800 	.word	0x40012800
 8000660:	40021000 	.word	0x40021000
 8000664:	48000800 	.word	0x48000800
 8000668:	48000c00 	.word	0x48000c00

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f8c0 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <SDMMC1_IRQHandler+0x10>)
 80006c6:	f003 f9c3 	bl	8003a50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000025c 	.word	0x2000025c

080006d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <SystemInit+0x64>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <SystemInit+0x64>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <SystemInit+0x68>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <SystemInit+0x68>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <SystemInit+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <SystemInit+0x68>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <SystemInit+0x68>)
 8000700:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000704:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000708:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SystemInit+0x68>)
 800070c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000710:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <SystemInit+0x68>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <SystemInit+0x68>)
 8000718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <SystemInit+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SystemInit+0x64>)
 8000726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800072a:	609a      	str	r2, [r3, #8]
#endif
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	40021000 	.word	0x40021000

08000740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000744:	f7ff ffc6 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000748:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800074a:	e003      	b.n	8000754 <LoopCopyDataInit>

0800074c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800074e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000750:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000752:	3104      	adds	r1, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000758:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800075a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800075c:	d3f6      	bcc.n	800074c <CopyDataInit>
	ldr	r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000760:	e002      	b.n	8000768 <LoopFillZerobss>

08000762 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000762:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000764:	f842 3b04 	str.w	r3, [r2], #4

08000768 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <LoopForever+0x16>)
	cmp	r2, r3
 800076a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800076c:	d3f9      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076e:	f008 f945 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000772:	f7ff fd31 	bl	80001d8 <main>

08000776 <LoopForever>:

LoopForever:
    b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000778:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800077c:	08008fb4 	.word	0x08008fb4
	ldr	r0, =_sdata
 8000780:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000784:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000788:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800078c:	20002354 	.word	0x20002354

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>

08000792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f961 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f80e 	bl	80007c4 <HAL_InitTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	e001      	b.n	80007b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b4:	f7ff fecc 	bl	8000550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_InitTick+0x70>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_InitTick+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f96d 	bl	8000ace <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10f      	bne.n	800081a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d809      	bhi.n	8000814 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 f937 	bl	8000a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_InitTick+0x74>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e007      	b.n	8000824 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e004      	b.n	8000824 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e001      	b.n	8000824 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000000 	.word	0x20000000
 8000838:	20000004 	.word	0x20000004

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	200002e0 	.word	0x200002e0

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	200002e0 	.word	0x200002e0

0800087c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff ffee 	bl	8000864 <HAL_GetTick>
 8000888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000894:	d005      	beq.n	80008a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_Delay+0x44>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffde 	bl	8000864 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8f7      	bhi.n	80008a4 <HAL_Delay+0x28>
  {
  }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 021f 	and.w	r2, r3, #31
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <__NVIC_EnableIRQ+0x38>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	f7ff ff8e 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff29 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff3e 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff8e 	bl	80009b8 <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5d 	bl	8000964 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff31 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa2 	bl	8000a20 <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d005      	beq.n	8000b0a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2204      	movs	r2, #4
 8000b02:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e029      	b.n	8000b5e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 020e 	bic.w	r2, r2, #14
 8000b18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0201 	bic.w	r2, r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f003 021c 	and.w	r2, r3, #28
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	4798      	blx	r3
    }
  }
  return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e17f      	b.n	8000e78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8171 	beq.w	8000e72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00b      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b12      	cmp	r3, #18
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	f003 0201 	and.w	r2, r3, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d118      	bne.n	8000c50 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x128>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b12      	cmp	r3, #18
 8000c8e:	d123      	bne.n	8000cd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	6939      	ldr	r1, [r7, #16]
 8000cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0203 	and.w	r2, r3, #3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80ac 	beq.w	8000e72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b5f      	ldr	r3, [pc, #380]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b5c      	ldr	r3, [pc, #368]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d32:	4a5a      	ldr	r2, [pc, #360]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x242>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x23e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_GPIO_Init+0x33c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x23a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x340>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x236>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x344>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x232>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_GPIO_Init+0x348>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x22e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4a      	ldr	r2, [pc, #296]	; (8000eb4 <HAL_GPIO_Init+0x34c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x22a>
 8000d8e:	2306      	movs	r3, #6
 8000d90:	e00c      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000d92:	2307      	movs	r3, #7
 8000d94:	e00a      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000d96:	2305      	movs	r3, #5
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x244>
 8000daa:	2300      	movs	r3, #0
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dbc:	4937      	ldr	r1, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <HAL_GPIO_Init+0x350>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae78 	bne.w	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48001800 	.word	0x48001800
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000

08000f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f16:	d130      	bne.n	8000f7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d038      	beq.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2232      	movs	r2, #50	; 0x32
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4c:	e002      	b.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f60:	d102      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f2      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f74:	d110      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e00f      	b.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f86:	d007      	beq.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	431bde83 	.word	0x431bde83

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e3d4      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc6:	4ba1      	ldr	r3, [pc, #644]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80e4 	beq.w	80011b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_RCC_OscConfig+0x4a>
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2b0c      	cmp	r3, #12
 8000ff2:	f040 808b 	bne.w	800110c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 8087 	bne.w	800110c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ffe:	4b93      	ldr	r3, [pc, #588]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x62>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e3ac      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1a      	ldr	r2, [r3, #32]
 800101a:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <HAL_RCC_OscConfig+0x7c>
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800102e:	e005      	b.n	800103c <HAL_RCC_OscConfig+0x88>
 8001030:	4b86      	ldr	r3, [pc, #536]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800103c:	4293      	cmp	r3, r2
 800103e:	d223      	bcs.n	8001088 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd41 	bl	8001acc <RCC_SetFlashLatencyFromMSIRange>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e38d      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001054:	4b7d      	ldr	r3, [pc, #500]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a7c      	ldr	r2, [pc, #496]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b7a      	ldr	r3, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4977      	ldr	r1, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	4972      	ldr	r1, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
 8001086:	e025      	b.n	80010d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001088:	4b70      	ldr	r3, [pc, #448]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a6f      	ldr	r2, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b6d      	ldr	r3, [pc, #436]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	496a      	ldr	r1, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a6:	4b69      	ldr	r3, [pc, #420]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	4965      	ldr	r1, [pc, #404]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fd01 	bl	8001acc <RCC_SetFlashLatencyFromMSIRange>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e34d      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010d4:	f000 fc36 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b5c      	ldr	r3, [pc, #368]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	495a      	ldr	r1, [pc, #360]	; (8001250 <HAL_RCC_OscConfig+0x29c>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_RCC_OscConfig+0x2a0>)
 80010f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010f4:	4b58      	ldr	r3, [pc, #352]	; (8001258 <HAL_RCC_OscConfig+0x2a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb63 	bl	80007c4 <HAL_InitTick>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d052      	beq.n	80011ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	e331      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d032      	beq.n	800117a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001120:	f7ff fba0 	bl	8000864 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001128:	f7ff fb9c 	bl	8000864 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e31a      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	493b      	ldr	r1, [pc, #236]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	4936      	ldr	r1, [pc, #216]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
 8001178:	e01a      	b.n	80011b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001186:	f7ff fb6d 	bl	8000864 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800118e:	f7ff fb69 	bl	8000864 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e2e7      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x1da>
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d074      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x21a>
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d10e      	bne.n	80011e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d10b      	bne.n	80011e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d064      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d160      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e2c4      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x24a>
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_RCC_OscConfig+0x298>)
 80011f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e01d      	b.n	800123a <HAL_RCC_OscConfig+0x286>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x26e>
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800120e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_RCC_OscConfig+0x298>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0x286>
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_RCC_OscConfig+0x298>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01c      	beq.n	800127c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fb0f 	bl	8000864 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001248:	e011      	b.n	800126e <HAL_RCC_OscConfig+0x2ba>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	08008b10 	.word	0x08008b10
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fb02 	bl	8000864 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e280      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126e:	4baf      	ldr	r3, [pc, #700]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x2a8>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff faf2 	bl	8000864 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff faee 	bl	8000864 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e26c      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001296:	4ba5      	ldr	r3, [pc, #660]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x2d0>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d060      	beq.n	8001374 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x310>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d119      	bne.n	80012f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d116      	bne.n	80012f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c4:	4b99      	ldr	r3, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x328>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e249      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b93      	ldr	r3, [pc, #588]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	4990      	ldr	r1, [pc, #576]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f0:	e040      	b.n	8001374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d023      	beq.n	8001342 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fa:	4b8c      	ldr	r3, [pc, #560]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a8b      	ldr	r2, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff faad 	bl	8000864 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff faa9 	bl	8000864 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e227      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001320:	4b82      	ldr	r3, [pc, #520]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b7f      	ldr	r3, [pc, #508]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	497c      	ldr	r1, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e018      	b.n	8001374 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b7a      	ldr	r3, [pc, #488]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fa89 	bl	8000864 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fa85 	bl	8000864 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e203      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001368:	4b70      	ldr	r3, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03c      	beq.n	80013fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001388:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800138a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138e:	4a67      	ldr	r2, [pc, #412]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fa64 	bl	8000864 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fa60 	bl	8000864 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1de      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ef      	beq.n	80013a0 <HAL_RCC_OscConfig+0x3ec>
 80013c0:	e01b      	b.n	80013fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fa47 	bl	8000864 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fa43 	bl	8000864 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1c1      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ec:	4b4f      	ldr	r3, [pc, #316]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ef      	bne.n	80013da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80a6 	beq.w	8001554 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a43      	ldr	r2, [pc, #268]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
 8001424:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001430:	2301      	movs	r3, #1
 8001432:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x57c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d118      	bne.n	8001472 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x57c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <HAL_RCC_OscConfig+0x57c>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144c:	f7ff fa0a 	bl	8000864 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fa06 	bl	8000864 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e184      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x57c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d108      	bne.n	800148c <HAL_RCC_OscConfig+0x4d8>
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148a:	e024      	b.n	80014d6 <HAL_RCC_OscConfig+0x522>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d110      	bne.n	80014b6 <HAL_RCC_OscConfig+0x502>
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x578>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x578>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b4:	e00f      	b.n	80014d6 <HAL_RCC_OscConfig+0x522>
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff f9c1 	bl	8000864 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff f9bd 	bl	8000864 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e139      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x578>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ed      	beq.n	80014e6 <HAL_RCC_OscConfig+0x532>
 800150a:	e01a      	b.n	8001542 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff f9aa 	bl	8000864 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001512:	e00f      	b.n	8001534 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff f9a6 	bl	8000864 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d906      	bls.n	8001534 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e122      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	4b90      	ldr	r3, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e8      	bne.n	8001514 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001542:	7ffb      	ldrb	r3, [r7, #31]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800154e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8108 	beq.w	800176e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 80d0 	bne.w	8001708 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001568:	4b83      	ldr	r3, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	429a      	cmp	r2, r3
 800157a:	d130      	bne.n	80015de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	3b01      	subs	r3, #1
 8001588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d127      	bne.n	80015de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d11f      	bne.n	80015de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015a8:	2a07      	cmp	r2, #7
 80015aa:	bf14      	ite	ne
 80015ac:	2201      	movne	r2, #1
 80015ae:	2200      	moveq	r2, #0
 80015b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d113      	bne.n	80015de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d109      	bne.n	80015de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d06e      	beq.n	80016bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d069      	beq.n	80016b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015f0:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b7      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001600:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800160c:	f7ff f92a 	bl	8000864 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff f926 	bl	8000864 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e0a4      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_RCC_OscConfig+0x7c8>)
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001642:	3a01      	subs	r2, #1
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800164c:	0212      	lsls	r2, r2, #8
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001654:	0852      	lsrs	r2, r2, #1
 8001656:	3a01      	subs	r2, #1
 8001658:	0552      	lsls	r2, r2, #21
 800165a:	4311      	orrs	r1, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001660:	0852      	lsrs	r2, r2, #1
 8001662:	3a01      	subs	r2, #1
 8001664:	0652      	lsls	r2, r2, #25
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800166c:	0912      	lsrs	r2, r2, #4
 800166e:	0452      	lsls	r2, r2, #17
 8001670:	430a      	orrs	r2, r1
 8001672:	4941      	ldr	r1, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800167e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a3b      	ldr	r2, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001690:	f7ff f8e8 	bl	8000864 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f8e4 	bl	8000864 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e062      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b6:	e05a      	b.n	800176e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e059      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d152      	bne.n	800176e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016e0:	f7ff f8c0 	bl	8000864 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff f8bc 	bl	8000864 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e03a      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x734>
 8001706:	e032      	b.n	800176e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d02d      	beq.n	800176a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001718:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800172c:	f023 0303 	bic.w	r3, r3, #3
 8001730:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 8001738:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f88f 	bl	8000864 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f88b 	bl	8000864 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e009      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_OscConfig+0x7c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x796>
 8001768:	e001      	b.n	800176e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	f99d808c 	.word	0xf99d808c

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0c8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d910      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4961      	ldr	r1, [pc, #388]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b0      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d04c      	beq.n	800186a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d8:	4b56      	ldr	r3, [pc, #344]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e09e      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d115      	bne.n	8001828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e092      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d107      	bne.n	8001818 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001808:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e086      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e07e      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b42      	ldr	r3, [pc, #264]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 0203 	bic.w	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	493f      	ldr	r1, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800183a:	f7ff f813 	bl	8000864 <HAL_GetTick>
 800183e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001840:	e00a      	b.n	8001858 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f80f 	bl	8000864 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e066      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 020c 	and.w	r2, r3, #12
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	429a      	cmp	r2, r3
 8001868:	d1eb      	bne.n	8001842 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	492c      	ldr	r1, [pc, #176]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d210      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4924      	ldr	r1, [pc, #144]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e036      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4918      	ldr	r1, [pc, #96]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4910      	ldr	r1, [pc, #64]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f6:	f000 f825 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490c      	ldr	r1, [pc, #48]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe ff52 	bl	80007c4 <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	72fb      	strb	r3, [r7, #11]

  return status;
 8001924:	7afb      	ldrb	r3, [r7, #11]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000
 8001934:	40021000 	.word	0x40021000
 8001938:	08008b10 	.word	0x08008b10
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d121      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d11e      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e005      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019a0:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e004      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d134      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0xa6>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d003      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0xac>
 80019e8:	e005      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80019ec:	617b      	str	r3, [r7, #20]
      break;
 80019ee:	e005      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x114>)
 80019f2:	617b      	str	r3, [r7, #20]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	617b      	str	r3, [r7, #20]
      break;
 80019fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	fb02 f203 	mul.w	r2, r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	0e5b      	lsrs	r3, r3, #25
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08008b28 	.word	0x08008b28
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08008b20 	.word	0x08008b20

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001aa4:	f7ff ffda 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08008b20 	.word	0x08008b20

08001acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ae4:	f7ff fa02 	bl	8000eec <HAL_PWREx_GetVoltageRange>
 8001ae8:	6178      	str	r0, [r7, #20]
 8001aea:	e014      	b.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b04:	f7ff f9f2 	bl	8000eec <HAL_PWREx_GetVoltageRange>
 8001b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d10b      	bne.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d919      	bls.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2ba0      	cmp	r3, #160	; 0xa0
 8001b28:	d902      	bls.n	8001b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e013      	b.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b30:	2301      	movs	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e010      	b.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b80      	cmp	r3, #128	; 0x80
 8001b3a:	d902      	bls.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e00a      	b.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b80      	cmp	r3, #128	; 0x80
 8001b46:	d102      	bne.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b48:	2302      	movs	r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	e004      	b.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b70      	cmp	r3, #112	; 0x70
 8001b52:	d101      	bne.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b54:	2301      	movs	r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 0207 	bic.w	r2, r3, #7
 8001b60:	4909      	ldr	r1, [pc, #36]	; (8001b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b94:	2300      	movs	r3, #0
 8001b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b98:	2300      	movs	r3, #0
 8001b9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d041      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001bb0:	d02a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001bb6:	d824      	bhi.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001bbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bc2:	d81e      	bhi.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00a      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bcc:	d010      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001bce:	e018      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bd0:	4b86      	ldr	r3, [pc, #536]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a85      	ldr	r2, [pc, #532]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bdc:	e015      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 f825 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8001bea:	4603      	mov	r3, r0
 8001bec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bee:	e00c      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3320      	adds	r3, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f910 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c00:	e003      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	74fb      	strb	r3, [r7, #19]
      break;
 8001c06:	e000      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c0a:	7cfb      	ldrb	r3, [r7, #19]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c10:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c1e:	4973      	ldr	r1, [pc, #460]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c26:	e001      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d041      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c40:	d02a      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001c42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c46:	d824      	bhi.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c52:	d81e      	bhi.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c5e:	e018      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c60:	4b62      	ldr	r3, [pc, #392]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a61      	ldr	r2, [pc, #388]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c6c:	e015      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 ffdd 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c7e:	e00c      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3320      	adds	r3, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 f8c8 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c90:	e003      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	74fb      	strb	r3, [r7, #19]
      break;
 8001c96:	e000      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cae:	494f      	ldr	r1, [pc, #316]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cb6:	e001      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a0 	beq.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00d      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a40      	ldr	r2, [pc, #256]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d0c:	f7fe fdaa 	bl	8000864 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d12:	e009      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7fe fda6 	bl	8000864 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d902      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	74fb      	strb	r3, [r7, #19]
        break;
 8001d26:	e005      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ef      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d15c      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01f      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d019      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d016      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe fd65 	bl	8000864 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fd61 	bl	8000864 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d902      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	74fb      	strb	r3, [r7, #19]
            break;
 8001db4:	e006      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ec      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dda:	4904      	ldr	r1, [pc, #16]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001de2:	e009      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
 8001de8:	e006      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df8:	7c7b      	ldrb	r3, [r7, #17]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b9e      	ldr	r3, [pc, #632]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a9d      	ldr	r2, [pc, #628]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e16:	4b98      	ldr	r3, [pc, #608]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1c:	f023 0203 	bic.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	4994      	ldr	r1, [pc, #592]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e38:	4b8f      	ldr	r3, [pc, #572]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	f023 020c 	bic.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	498c      	ldr	r1, [pc, #560]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e5a:	4b87      	ldr	r3, [pc, #540]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4983      	ldr	r1, [pc, #524]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e7c:	4b7e      	ldr	r3, [pc, #504]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	497b      	ldr	r1, [pc, #492]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	4972      	ldr	r1, [pc, #456]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	496a      	ldr	r1, [pc, #424]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	4961      	ldr	r1, [pc, #388]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f04:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4959      	ldr	r1, [pc, #356]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f34:	4950      	ldr	r1, [pc, #320]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	4948      	ldr	r1, [pc, #288]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f6a:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	493f      	ldr	r1, [pc, #252]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d028      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9a:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001faa:	d106      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb6:	60d3      	str	r3, [r2, #12]
 8001fb8:	e011      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fe32 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d028      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	491f      	ldr	r1, [pc, #124]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002008:	d106      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002014:	60d3      	str	r3, [r2, #12]
 8002016:	e011      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002020:	d10c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2101      	movs	r1, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fe03 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02b      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002066:	d109      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a02      	ldr	r2, [pc, #8]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	60d3      	str	r3, [r2, #12]
 8002074:	e014      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fdd1 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d02f      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ba:	4928      	ldr	r1, [pc, #160]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	2102      	movs	r1, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fdae 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d014      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	74bb      	strb	r3, [r7, #18]
 80020e6:	e011      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f0:	d10c      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3320      	adds	r3, #32
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fe8f 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002126:	490d      	ldr	r1, [pc, #52]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214a:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002152:	7cbb      	ldrb	r3, [r7, #18]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002172:	d13e      	bne.n	80021f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002174:	4bbe      	ldr	r3, [pc, #760]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002186:	d028      	beq.n	80021da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800218e:	f200 853e 	bhi.w	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002198:	d005      	beq.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a0:	d00e      	beq.n	80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80021a2:	f000 bd34 	b.w	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80021a6:	4bb2      	ldr	r3, [pc, #712]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	f040 852e 	bne.w	8002c12 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	61fb      	str	r3, [r7, #28]
      break;
 80021bc:	f000 bd29 	b.w	8002c12 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80021c0:	4bab      	ldr	r3, [pc, #684]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f040 8523 	bne.w	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 80021d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80021d4:	61fb      	str	r3, [r7, #28]
      break;
 80021d6:	f000 bd1e 	b.w	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021da:	4ba5      	ldr	r3, [pc, #660]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e6:	f040 8518 	bne.w	8002c1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 80021ea:	4ba2      	ldr	r3, [pc, #648]	; (8002474 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80021ec:	61fb      	str	r3, [r7, #28]
      break;
 80021ee:	f000 bd14 	b.w	8002c1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f2:	4b9f      	ldr	r3, [pc, #636]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d036      	beq.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d840      	bhi.n	800228a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d003      	beq.n	8002216 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d020      	beq.n	8002256 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002214:	e039      	b.n	800228a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002216:	4b96      	ldr	r3, [pc, #600]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d116      	bne.n	8002250 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002222:	4b93      	ldr	r3, [pc, #588]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800222e:	4b90      	ldr	r3, [pc, #576]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	e005      	b.n	8002246 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800223a:	4b8d      	ldr	r3, [pc, #564]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800223c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a8c      	ldr	r2, [pc, #560]	; (8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800224e:	e01f      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
      break;
 8002254:	e01c      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002256:	4b86      	ldr	r3, [pc, #536]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002262:	d102      	bne.n	800226a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002264:	4b85      	ldr	r3, [pc, #532]	; (800247c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002266:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002268:	e012      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
      break;
 800226e:	e00f      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002270:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800227c:	d102      	bne.n	8002284 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800227e:	4b80      	ldr	r3, [pc, #512]	; (8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002280:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002282:	e005      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
      break;
 8002288:	e002      	b.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
      break;
 800228e:	bf00      	nop
    }

    switch(PeriphClk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002296:	f000 80d2 	beq.w	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022a0:	f200 84bd 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022aa:	f000 80c8 	beq.w	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022b4:	f200 84b3 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022be:	f000 835b 	beq.w	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	f200 84a9 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d2:	f000 847f 	beq.w	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022dc:	f200 849f 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e6:	f000 82ce 	beq.w	8002886 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f0:	f200 8495 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	f000 80a0 	beq.w	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	f200 848b 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	f000 808f 	beq.w	8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002318:	f200 8481 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002322:	d07e      	beq.n	8002422 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800232a:	f200 8478 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	f000 8404 	beq.w	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	f200 846e 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002348:	f000 83b0 	beq.w	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002352:	f200 8464 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	f000 837a 	beq.w	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	f200 845a 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b80      	cmp	r3, #128	; 0x80
 800236e:	f000 8345 	beq.w	80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	f200 8452 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b20      	cmp	r3, #32
 800237e:	d84b      	bhi.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 844b 	beq.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	2b1f      	cmp	r3, #31
 800238e:	f200 8446 	bhi.w	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	08002583 	.word	0x08002583
 800239c:	080025f3 	.word	0x080025f3
 80023a0:	08002c1f 	.word	0x08002c1f
 80023a4:	08002687 	.word	0x08002687
 80023a8:	08002c1f 	.word	0x08002c1f
 80023ac:	08002c1f 	.word	0x08002c1f
 80023b0:	08002c1f 	.word	0x08002c1f
 80023b4:	080026ff 	.word	0x080026ff
 80023b8:	08002c1f 	.word	0x08002c1f
 80023bc:	08002c1f 	.word	0x08002c1f
 80023c0:	08002c1f 	.word	0x08002c1f
 80023c4:	08002c1f 	.word	0x08002c1f
 80023c8:	08002c1f 	.word	0x08002c1f
 80023cc:	08002c1f 	.word	0x08002c1f
 80023d0:	08002c1f 	.word	0x08002c1f
 80023d4:	08002783 	.word	0x08002783
 80023d8:	08002c1f 	.word	0x08002c1f
 80023dc:	08002c1f 	.word	0x08002c1f
 80023e0:	08002c1f 	.word	0x08002c1f
 80023e4:	08002c1f 	.word	0x08002c1f
 80023e8:	08002c1f 	.word	0x08002c1f
 80023ec:	08002c1f 	.word	0x08002c1f
 80023f0:	08002c1f 	.word	0x08002c1f
 80023f4:	08002c1f 	.word	0x08002c1f
 80023f8:	08002c1f 	.word	0x08002c1f
 80023fc:	08002c1f 	.word	0x08002c1f
 8002400:	08002c1f 	.word	0x08002c1f
 8002404:	08002c1f 	.word	0x08002c1f
 8002408:	08002c1f 	.word	0x08002c1f
 800240c:	08002c1f 	.word	0x08002c1f
 8002410:	08002c1f 	.word	0x08002c1f
 8002414:	08002805 	.word	0x08002805
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	f000 82bd 	beq.w	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002420:	e3fd      	b.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002428:	f000 fdd6 	bl	8002fd8 <RCCEx_GetSAIxPeriphCLKFreq>
 800242c:	61f8      	str	r0, [r7, #28]
      break;
 800242e:	e3f7      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002430:	69b9      	ldr	r1, [r7, #24]
 8002432:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002436:	f000 fdcf 	bl	8002fd8 <RCCEx_GetSAIxPeriphCLKFreq>
 800243a:	61f8      	str	r0, [r7, #28]
      break;
 800243c:	e3f0      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002450:	d018      	beq.n	8002484 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002458:	f200 808b 	bhi.w	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d059      	beq.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246a:	d028      	beq.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800246c:	e081      	b.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	0003d090 	.word	0x0003d090
 8002478:	08008b28 	.word	0x08008b28
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002484:	4bae      	ldr	r3, [pc, #696]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d172      	bne.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002490:	4bab      	ldr	r3, [pc, #684]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800249c:	4ba8      	ldr	r3, [pc, #672]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	e005      	b.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80024a8:	4ba5      	ldr	r3, [pc, #660]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4aa3      	ldr	r2, [pc, #652]	; (8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	61fb      	str	r3, [r7, #28]
          break;
 80024bc:	e05b      	b.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ca:	d156      	bne.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80024cc:	4b9c      	ldr	r3, [pc, #624]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d8:	d14f      	bne.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80024da:	4b99      	ldr	r3, [pc, #612]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fb02 f203 	mul.w	r2, r2, r3
 80024ee:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	3301      	adds	r3, #1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002500:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0d5b      	lsrs	r3, r3, #21
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]
          break;
 8002516:	e030      	b.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002518:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002524:	d12b      	bne.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002526:	4b86      	ldr	r3, [pc, #536]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002532:	d124      	bne.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002534:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800253e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	fb02 f203 	mul.w	r2, r2, r3
 8002548:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	3301      	adds	r3, #1
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800255a:	4b79      	ldr	r3, [pc, #484]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	0d5b      	lsrs	r3, r3, #21
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	3301      	adds	r3, #1
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	61fb      	str	r3, [r7, #28]
          break;
 8002570:	e005      	b.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002572:	bf00      	nop
 8002574:	e354      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002576:	bf00      	nop
 8002578:	e352      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800257a:	bf00      	nop
 800257c:	e350      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800257e:	bf00      	nop
        break;
 8002580:	e34e      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d828      	bhi.n	80025e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025b5 	.word	0x080025b5
 80025a4:	080025bd 	.word	0x080025bd
 80025a8:	080025d1 	.word	0x080025d1
          frequency = HAL_RCC_GetPCLK2Freq();
 80025ac:	f7ff fa78 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 80025b0:	61f8      	str	r0, [r7, #28]
          break;
 80025b2:	e01d      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 80025b4:	f7ff f9c6 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80025b8:	61f8      	str	r0, [r7, #28]
          break;
 80025ba:	e019      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80025bc:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	d10f      	bne.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80025cc:	61fb      	str	r3, [r7, #28]
          break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 80025de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e2:	61fb      	str	r3, [r7, #28]
          break;
 80025e4:	e003      	b.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 80025e6:	bf00      	nop
 80025e8:	e31a      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80025ea:	bf00      	nop
 80025ec:	e318      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80025ee:	bf00      	nop
        break;
 80025f0:	e316      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d83a      	bhi.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002641 	.word	0x08002641
 8002610:	0800267b 	.word	0x0800267b
 8002614:	0800267b 	.word	0x0800267b
 8002618:	0800267b 	.word	0x0800267b
 800261c:	08002649 	.word	0x08002649
 8002620:	0800267b 	.word	0x0800267b
 8002624:	0800267b 	.word	0x0800267b
 8002628:	0800267b 	.word	0x0800267b
 800262c:	08002651 	.word	0x08002651
 8002630:	0800267b 	.word	0x0800267b
 8002634:	0800267b 	.word	0x0800267b
 8002638:	0800267b 	.word	0x0800267b
 800263c:	08002665 	.word	0x08002665
          frequency = HAL_RCC_GetPCLK1Freq();
 8002640:	f7ff fa18 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002644:	61f8      	str	r0, [r7, #28]
          break;
 8002646:	e01d      	b.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002648:	f7ff f97c 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800264c:	61f8      	str	r0, [r7, #28]
          break;
 800264e:	e019      	b.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d10f      	bne.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002660:	61fb      	str	r3, [r7, #28]
          break;
 8002662:	e00c      	b.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	61fb      	str	r3, [r7, #28]
          break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800267a:	bf00      	nop
 800267c:	e2d0      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800267e:	bf00      	nop
 8002680:	e2ce      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002682:	bf00      	nop
        break;
 8002684:	e2cc      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d021      	beq.n	80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b30      	cmp	r3, #48	; 0x30
 800269c:	d829      	bhi.n	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d011      	beq.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d823      	bhi.n	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d004      	beq.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 80026b6:	e01c      	b.n	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 80026b8:	f7ff f9dc 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80026bc:	61f8      	str	r0, [r7, #28]
          break;
 80026be:	e01d      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 80026c0:	f7ff f940 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80026c4:	61f8      	str	r0, [r7, #28]
          break;
 80026c6:	e019      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d4:	d10f      	bne.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80026d8:	61fb      	str	r3, [r7, #28]
          break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 80026ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ee:	61fb      	str	r3, [r7, #28]
          break;
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 80026f2:	bf00      	nop
 80026f4:	e294      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80026f6:	bf00      	nop
 80026f8:	e292      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80026fa:	bf00      	nop
        break;
 80026fc:	e290      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2bc0      	cmp	r3, #192	; 0xc0
 800270e:	d027      	beq.n	8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2bc0      	cmp	r3, #192	; 0xc0
 8002714:	d82f      	bhi.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d017      	beq.n	800274c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d829      	bhi.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b40      	cmp	r3, #64	; 0x40
 800272c:	d004      	beq.n	8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 800272e:	e022      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002730:	f7ff f9a0 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002734:	61f8      	str	r0, [r7, #28]
          break;
 8002736:	e023      	b.n	8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002738:	f7ff f904 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800273c:	61f8      	str	r0, [r7, #28]
          break;
 800273e:	e01f      	b.n	8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002740:	40021000 	.word	0x40021000
 8002744:	08008b28 	.word	0x08008b28
 8002748:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800274c:	4ba9      	ldr	r3, [pc, #676]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	d10f      	bne.n	800277a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 800275a:	4ba7      	ldr	r3, [pc, #668]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800275c:	61fb      	str	r3, [r7, #28]
          break;
 800275e:	e00c      	b.n	800277a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002760:	4ba4      	ldr	r3, [pc, #656]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800276e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002772:	61fb      	str	r3, [r7, #28]
          break;
 8002774:	e003      	b.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002776:	bf00      	nop
 8002778:	e252      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800277a:	bf00      	nop
 800277c:	e250      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800277e:	bf00      	nop
        break;
 8002780:	e24e      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002782:	4b9c      	ldr	r3, [pc, #624]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002794:	d025      	beq.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279c:	d82c      	bhi.n	80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d013      	beq.n	80027ce <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d824      	bhi.n	80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d004      	beq.n	80027c6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 80027bc:	e01c      	b.n	80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 80027be:	f7ff f959 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80027c2:	61f8      	str	r0, [r7, #28]
          break;
 80027c4:	e01d      	b.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 80027c6:	f7ff f8bd 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80027ca:	61f8      	str	r0, [r7, #28]
          break;
 80027cc:	e019      	b.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027ce:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d10f      	bne.n	80027fc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 80027dc:	4b86      	ldr	r3, [pc, #536]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80027de:	61fb      	str	r3, [r7, #28]
          break;
 80027e0:	e00c      	b.n	80027fc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80027e2:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d107      	bne.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 80027f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f4:	61fb      	str	r3, [r7, #28]
          break;
 80027f6:	e003      	b.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 80027f8:	bf00      	nop
 80027fa:	e211      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80027fc:	bf00      	nop
 80027fe:	e20f      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002800:	bf00      	nop
        break;
 8002802:	e20d      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002804:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002816:	d025      	beq.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800281e:	d82c      	bhi.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002826:	d013      	beq.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282e:	d824      	bhi.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d004      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800283e:	e01c      	b.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff f918 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002844:	61f8      	str	r0, [r7, #28]
          break;
 8002846:	e01d      	b.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8002848:	f7ff f87c 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800284c:	61f8      	str	r0, [r7, #28]
          break;
 800284e:	e019      	b.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285c:	d10f      	bne.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800285e:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002860:	61fb      	str	r3, [r7, #28]
          break;
 8002862:	e00c      	b.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002864:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d107      	bne.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8002872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002876:	61fb      	str	r3, [r7, #28]
          break;
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800287a:	bf00      	nop
 800287c:	e1d0      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800287e:	bf00      	nop
 8002880:	e1ce      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002882:	bf00      	nop
        break;
 8002884:	e1cc      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002898:	d00c      	beq.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028a0:	d864      	bhi.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b0:	d030      	beq.n	8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80028b2:	e05b      	b.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 80028b4:	f7ff f846 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80028b8:	61f8      	str	r0, [r7, #28]
          break;
 80028ba:	e05c      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80028bc:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c8:	d152      	bne.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04c      	beq.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fb02 f203 	mul.w	r2, r2, r3
 80028ea:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	3301      	adds	r3, #1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	0e5b      	lsrs	r3, r3, #25
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]
          break;
 8002912:	e02d      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002914:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002920:	d128      	bne.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d022      	beq.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002938:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	fb02 f203 	mul.w	r2, r2, r3
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	3301      	adds	r3, #1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	0e5b      	lsrs	r3, r3, #25
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	61fb      	str	r3, [r7, #28]
          break;
 800296a:	e003      	b.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800296c:	bf00      	nop
 800296e:	e157      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002970:	bf00      	nop
 8002972:	e155      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002974:	bf00      	nop
        break;
 8002976:	e153      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002982:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800298a:	f7ff f889 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 800298e:	61f8      	str	r0, [r7, #28]
        break;
 8002990:	e146      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002992:	f7fe ffd7 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002996:	61f8      	str	r0, [r7, #28]
        break;
 8002998:	e142      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d013      	beq.n	80029d6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d819      	bhi.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d004      	beq.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80029c4:	e011      	b.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff f855 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80029ca:	61f8      	str	r0, [r7, #28]
          break;
 80029cc:	e010      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 80029ce:	f7fe ffb9 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80029d2:	61f8      	str	r0, [r7, #28]
          break;
 80029d4:	e00c      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e2:	d104      	bne.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80029e6:	61fb      	str	r3, [r7, #28]
          break;
 80029e8:	e001      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 80029ea:	bf00      	nop
 80029ec:	e118      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029ee:	bf00      	nop
        break;
 80029f0:	e116      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a16:	d819      	bhi.n	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d004      	beq.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8002a26:	e011      	b.n	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7ff f824 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	61f8      	str	r0, [r7, #28]
          break;
 8002a2e:	e010      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a30:	f7fe ff88 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002a34:	61f8      	str	r0, [r7, #28]
          break;
 8002a36:	e00c      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a38:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d104      	bne.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002a46:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002a48:	61fb      	str	r3, [r7, #28]
          break;
 8002a4a:	e001      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8002a4c:	bf00      	nop
 8002a4e:	e0e7      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a50:	bf00      	nop
        break;
 8002a52:	e0e5      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002a54:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a66:	d013      	beq.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a6e:	d819      	bhi.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d004      	beq.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 8002a7e:	e011      	b.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a80:	f7fe fff8 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002a84:	61f8      	str	r0, [r7, #28]
          break;
 8002a86:	e010      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a88:	f7fe ff5c 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002a8c:	61f8      	str	r0, [r7, #28]
          break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a90:	4b66      	ldr	r3, [pc, #408]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d104      	bne.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8002a9e:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002aa0:	61fb      	str	r3, [r7, #28]
          break;
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8002aa4:	bf00      	nop
 8002aa6:	e0bb      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002aa8:	bf00      	nop
        break;
 8002aaa:	e0b9      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002aac:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002abe:	d02c      	beq.n	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ac6:	d833      	bhi.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ace:	d01a      	beq.n	8002b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ad6:	d82b      	bhi.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ae4:	d004      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8002ae6:	e023      	b.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ae8:	f7fe ffc4 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002aec:	61f8      	str	r0, [r7, #28]
          break;
 8002aee:	e026      	b.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8002afe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002b02:	61fb      	str	r3, [r7, #28]
          break;
 8002b04:	e016      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b06:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d111      	bne.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8002b14:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002b16:	61fb      	str	r3, [r7, #28]
          break;
 8002b18:	e00e      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8002b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2c:	61fb      	str	r3, [r7, #28]
          break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8002b30:	bf00      	nop
 8002b32:	e075      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b34:	bf00      	nop
 8002b36:	e073      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b38:	bf00      	nop
 8002b3a:	e071      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b3c:	bf00      	nop
        break;
 8002b3e:	e06f      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b52:	d02c      	beq.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b5a:	d833      	bhi.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b62:	d01a      	beq.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6a:	d82b      	bhi.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b78:	d004      	beq.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8002b7a:	e023      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7fe ff7a 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61f8      	str	r0, [r7, #28]
          break;
 8002b82:	e026      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d11a      	bne.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8002b92:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002b96:	61fb      	str	r3, [r7, #28]
          break;
 8002b98:	e016      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002baa:	61fb      	str	r3, [r7, #28]
          break;
 8002bac:	e00e      	b.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8002bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc0:	61fb      	str	r3, [r7, #28]
          break;
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8002bc4:	bf00      	nop
 8002bc6:	e02b      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bc8:	bf00      	nop
 8002bca:	e029      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bcc:	bf00      	nop
 8002bce:	e027      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bd0:	bf00      	nop
        break;
 8002bd2:	e025      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d004      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8002bee:	e00d      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7fe ff40 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	61f8      	str	r0, [r7, #28]
          break;
 8002bf6:	e009      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002c08:	61fb      	str	r3, [r7, #28]
          break;
 8002c0a:	bf00      	nop
        break;
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e006      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002c12:	bf00      	nop
 8002c14:	e004      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002c1e:	bf00      	nop
    }
  }

  return(frequency);
 8002c20:	69fb      	ldr	r3, [r7, #28]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	00f42400 	.word	0x00f42400

08002c34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
       ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
       ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d047      	beq.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d018      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x86>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d825      	bhi.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x62>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d009      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x74>
 8002c94:	e020      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c96:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e01a      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e013      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd6:	e006      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e004      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	430b      	orrs	r3, r1
 8002d04:	4944      	ldr	r1, [pc, #272]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d17d      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fd fda2 	bl	8000864 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d24:	f7fd fd9e 	bl	8000864 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
        break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d160      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0912      	lsrs	r2, r2, #4
 8002d68:	0452      	lsls	r2, r2, #17
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	492a      	ldr	r1, [pc, #168]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
 8002d72:	e027      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d112      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	0211      	lsls	r1, r2, #8
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6912      	ldr	r2, [r2, #16]
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0552      	lsls	r2, r2, #21
 8002d96:	430a      	orrs	r2, r1
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
 8002d9e:	e011      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	0211      	lsls	r1, r2, #8
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6952      	ldr	r2, [r2, #20]
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fd fd48 	bl	8000864 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dd6:	e009      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd8:	f7fd fd44 	bl	8000864 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dea:	e005      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d167      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fd fcae 	bl	8000864 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fd fcaa 	bl	8000864 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14a      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	0912      	lsrs	r2, r2, #4
 8002f50:	0452      	lsls	r2, r2, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
 8002f5a:	e011      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6912      	ldr	r2, [r2, #16]
 8002f72:	0852      	lsrs	r2, r2, #1
 8002f74:	3a01      	subs	r2, #1
 8002f76:	0652      	lsls	r2, r2, #25
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fd fc6a 	bl	8000864 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f94:	f7fd fc66 	bl	8000864 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff4:	d10c      	bne.n	8003010 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8002ff6:	4b6e      	ldr	r3, [pc, #440]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003000:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003008:	d112      	bne.n	8003030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e00f      	b.n	8003030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d10b      	bne.n	8003030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003018:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003022:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800302a:	d101      	bne.n	8003030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800302e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 80b4 	bne.w	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003042:	d003      	beq.n	800304c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800304a:	d135      	bne.n	80030b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800304c:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003058:	f040 80a1 	bne.w	800319e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800305c:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 809a 	beq.w	800319e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800306a:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	3301      	adds	r3, #1
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003088:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800309c:	2311      	movs	r3, #17
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e001      	b.n	80030a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80030a2:	2307      	movs	r3, #7
 80030a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fb02 f203 	mul.w	r2, r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80030b6:	e072      	b.n	800319e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d133      	bne.n	8003126 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80030be:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ca:	d169      	bne.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80030cc:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d063      	beq.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	3301      	adds	r3, #1
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800310a:	2311      	movs	r3, #17
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e001      	b.n	8003114 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003110:	2307      	movs	r3, #7
 8003112:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	fb02 f203 	mul.w	r2, r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e03c      	b.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312c:	d003      	beq.n	8003136 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003134:	d134      	bne.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800313e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003142:	d12d      	bne.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d027      	beq.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	3301      	adds	r3, #1
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003182:	2311      	movs	r3, #17
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e001      	b.n	800318c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003188:	2307      	movs	r3, #7
 800318a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	fb02 f203 	mul.w	r2, r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e000      	b.n	80031a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800319e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80031a0:	69fb      	ldr	r3, [r7, #28]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	001fff68 	.word	0x001fff68

080031b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e022      	b.n	8003210 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd f9db 	bl	8000598 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f814 	bl	8003218 <HAL_SD_InitCard>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00a      	b.n	8003210 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b090      	sub	sp, #64	; 0x40
 800321c:	af04      	add	r7, sp, #16
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003234:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003238:	f7fe ff92 	bl	8002160 <HAL_RCCEx_GetPeriphCLKFreq>
 800323c:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e08d      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	09db      	lsrs	r3, r3, #7
 800325c:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_SD_InitCard+0x164>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	3b02      	subs	r3, #2
 8003266:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681d      	ldr	r5, [r3, #0]
 800326c:	466c      	mov	r4, sp
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003280:	4628      	mov	r0, r5
 8003282:	f001 f9eb 	bl	800465c <SDMMC_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800328c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e06d      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 fa20 	bl	80046f2 <SDMMC_PowerState_ON>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80032b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e057      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	3302      	adds	r3, #2
 80032d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <HAL_SD_InitCard+0x168>)
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fac6 	bl	800087c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f001 f857 	bl	80043a4 <SD_PowerON>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e02e      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 ff78 	bl	800420c <SD_InitCard>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01b      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003344:	4618      	mov	r0, r3
 8003346:	f001 fa67 	bl	8004818 <SDMMC_CmdBlockLength>
 800334a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00f      	beq.n	8003372 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_SD_InitCard+0x16c>)
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bdb0      	pop	{r4, r5, r7, pc}
 800337c:	014f8b59 	.word	0x014f8b59
 8003380:	00012110 	.word	0x00012110
 8003384:	004005ff 	.word	0x004005ff

08003388 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b092      	sub	sp, #72	; 0x48
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003396:	f7fd fa65 	bl	8000864 <HAL_GetTick>
 800339a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1bd      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 81b0 	bne.w	8003728 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d907      	bls.n	80033ec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e1a4      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2203      	movs	r2, #3
 80033f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	2b01      	cmp	r3, #1
 8003402:	d002      	beq.n	800340a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	025b      	lsls	r3, r3, #9
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800340e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	025b      	lsls	r3, r3, #9
 8003414:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003416:	2390      	movs	r3, #144	; 0x90
 8003418:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800341a:	2302      	movs	r3, #2
 800341c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003422:	2301      	movs	r3, #1
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f107 0214 	add.w	r2, r7, #20
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f9c5 	bl	80047c0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d90a      	bls.n	8003452 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2202      	movs	r2, #2
 8003440:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fa29 	bl	80048a0 <SDMMC_CmdReadMultiBlock>
 800344e:	6478      	str	r0, [r7, #68]	; 0x44
 8003450:	e009      	b.n	8003466 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f9fc 	bl	800485c <SDMMC_CmdReadSingleBlock>
 8003464:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7a      	ldr	r2, [pc, #488]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e151      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003496:	e061      	b.n	800355c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d03c      	beq.n	8003520 <HAL_SD_ReadBlocks+0x198>
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d039      	beq.n	8003520 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	643b      	str	r3, [r7, #64]	; 0x40
 80034b0:	e033      	b.n	800351a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f8fd 	bl	80046b6 <SDMMC_ReadFIFO>
 80034bc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	3301      	adds	r3, #1
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	3b01      	subs	r3, #1
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	3301      	adds	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	3b01      	subs	r3, #1
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	3301      	adds	r3, #1
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	b2da      	uxtb	r2, r3
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	3301      	adds	r3, #1
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	3b01      	subs	r3, #1
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003516:	3301      	adds	r3, #1
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
 800351a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351c:	2b07      	cmp	r3, #7
 800351e:	d9c8      	bls.n	80034b2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003520:	f7fd f9a0 	bl	8000864 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800352c:	429a      	cmp	r2, r3
 800352e:	d902      	bls.n	8003536 <HAL_SD_ReadBlocks+0x1ae>
 8003530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d112      	bne.n	800355c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a48      	ldr	r2, [pc, #288]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0ec      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003566:	2b00      	cmp	r3, #0
 8003568:	d096      	beq.n	8003498 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_SD_ReadBlocks+0x236>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d91f      	bls.n	80035be <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	2b03      	cmp	r3, #3
 8003584:	d01b      	beq.n	80035be <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f9ee 	bl	800496c <SDMMC_CmdStopTransfer>
 8003590:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0bb      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f043 0208 	orr.w	r2, r3, #8
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0a1      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	f043 0202 	orr.w	r2, r3, #2
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e087      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d064      	beq.n	80036fe <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_SD_ReadBlocks+0x2d4>)
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06d      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
 800365a:	bf00      	nop
 800365c:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f826 	bl	80046b6 <SDMMC_ReadFIFO>
 800366a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	b2da      	uxtb	r2, r3
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	3301      	adds	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b2da      	uxtb	r2, r3
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	3301      	adds	r3, #1
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	3b01      	subs	r3, #1
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2da      	uxtb	r2, r3
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	3301      	adds	r3, #1
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	3b01      	subs	r3, #1
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	3301      	adds	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	3b01      	subs	r3, #1
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036c2:	f7fd f8cf 	bl	8000864 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d902      	bls.n	80036d8 <HAL_SD_ReadBlocks+0x350>
 80036d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d112      	bne.n	80036fe <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_SD_ReadBlocks+0x3b8>)
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e01b      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_SD_ReadBlocks+0x38a>
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1a6      	bne.n	8003660 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f240 523a 	movw	r2, #1338	; 0x53a
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e006      	b.n	8003736 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3748      	adds	r7, #72	; 0x48
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	004005ff 	.word	0x004005ff

08003744 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b092      	sub	sp, #72	; 0x48
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7fd f887 	bl	8000864 <HAL_GetTick>
 8003756:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e165      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	f040 8158 	bne.w	8003a34 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800378a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	429a      	cmp	r2, r3
 8003796:	d907      	bls.n	80037a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e14c      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2203      	movs	r2, #3
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d002      	beq.n	80037c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	025b      	lsls	r3, r3, #9
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	025b      	lsls	r3, r3, #9
 80037d0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80037d2:	2390      	movs	r3, #144	; 0x90
 80037d4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80037de:	2301      	movs	r3, #1
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f107 0218 	add.w	r2, r7, #24
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 ffe7 	bl	80047c0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d90a      	bls.n	800380e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003804:	4618      	mov	r0, r3
 8003806:	f001 f88f 	bl	8004928 <SDMMC_CmdWriteMultiBlock>
 800380a:	6478      	str	r0, [r7, #68]	; 0x44
 800380c:	e009      	b.n	8003822 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2210      	movs	r2, #16
 8003812:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f862 	bl	80048e4 <SDMMC_CmdWriteSingleBlock>
 8003820:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a87      	ldr	r2, [pc, #540]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003836:	431a      	orrs	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0f9      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003852:	e065      	b.n	8003920 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d040      	beq.n	80038e4 <HAL_SD_WriteBlocks+0x1a0>
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d03d      	beq.n	80038e4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003868:	2300      	movs	r3, #0
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
 800386c:	e037      	b.n	80038de <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	3301      	adds	r3, #1
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387c:	3b01      	subs	r3, #1
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	3301      	adds	r3, #1
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	3b01      	subs	r3, #1
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	3301      	adds	r3, #1
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	3b01      	subs	r3, #1
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	061a      	lsls	r2, r3, #24
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038be:	3301      	adds	r3, #1
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c4:	3b01      	subs	r3, #1
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f107 0214 	add.w	r2, r7, #20
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fefc 	bl	80046d0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	3301      	adds	r3, #1
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	d9c4      	bls.n	800386e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80038e4:	f7fc ffbe 	bl	8000864 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <HAL_SD_WriteBlocks+0x1b6>
 80038f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d112      	bne.n	8003920 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e090      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800392a:	2b00      	cmp	r3, #0
 800392c:	d092      	beq.n	8003854 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_SD_WriteBlocks+0x23e>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d91f      	bls.n	8003982 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	2b03      	cmp	r3, #3
 8003948:	d01b      	beq.n	8003982 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f80c 	bl	800496c <SDMMC_CmdStopTransfer>
 8003954:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e05f      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	f043 0208 	orr.w	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e045      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	f043 0202 	orr.w	r2, r3, #2
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e02b      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_SD_WriteBlocks+0x308>)
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f043 0210 	orr.w	r2, r3, #16
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e011      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e006      	b.n	8003a42 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3748      	adds	r7, #72	; 0x48
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	004005ff 	.word	0x004005ff

08003a50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_SD_IRQHandler+0x2e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fd4a 	bl	8004510 <SD_Read_IT>
 8003a7c:	e155      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 808f 	beq.w	8003bac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003aa6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003aaa:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d039      	beq.n	8003b3a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_SD_IRQHandler+0x8a>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 ff44 	bl	800496c <SDMMC_CmdStopTransfer>
 8003ae4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f91f 	bl	8003d3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <HAL_SD_IRQHandler+0xda>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fb6a 	bl	8005204 <HAL_SD_RxCpltCallback>
 8003b30:	e0fb      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f001 fb5c 	bl	80051f0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003b38:	e0f7      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80f2 	beq.w	8003d2a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 ff09 	bl	800496c <SDMMC_CmdStopTransfer>
 8003b5a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8e4 	bl	8003d3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80d5 	bne.w	8003d2a <HAL_SD_IRQHandler+0x2da>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 80cf 	bne.w	8003d2a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0208 	bic.w	r2, r2, #8
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f001 fb23 	bl	80051f0 <HAL_SD_TxCpltCallback>
}
 8003baa:	e0be      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_SD_IRQHandler+0x17c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fcf4 	bl	80045b2 <SD_Write_IT>
 8003bca:	e0ae      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a7 	beq.w	8003d2a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	f043 0208 	orr.w	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f043 0210 	orr.w	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fe82 	bl	800496c <SDMMC_CmdStopTransfer>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f855 	bl	8003d3c <HAL_SD_ErrorCallback>
}
 8003c92:	e04a      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d045      	beq.n	8003d2a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_SD_IRQHandler+0x262>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_SD_IRQHandler+0x2e4>)
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc ff11 	bl	8000ae6 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02f      	beq.n	8003d2a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa2e 	bl	8004130 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003cd4:	e029      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <HAL_SD_IRQHandler+0x29a>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d011      	beq.n	8003d0e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_SD_IRQHandler+0x2e8>)
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fef5 	bl	8000ae6 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa49 	bl	800419e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d0c:	e00d      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 fa5a 	bl	80051dc <HAL_SD_AbortCallback>
}
 8003d28:	e7ff      	b.n	8003d2a <HAL_SD_IRQHandler+0x2da>
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	08004131 	.word	0x08004131
 8003d38:	0800419f 	.word	0x0800419f

08003d3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5e:	0f9b      	lsrs	r3, r3, #30
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	0d1b      	lsrs	r3, r3, #20
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dce:	0bdb      	lsrs	r3, r3, #15
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de0:	0b9b      	lsrs	r3, r3, #14
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e04:	0b1b      	lsrs	r3, r3, #12
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d163      	bne.n	8003ee8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e24:	009a      	lsls	r2, r3, #2
 8003e26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e30:	0f92      	lsrs	r2, r2, #30
 8003e32:	431a      	orrs	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	0edb      	lsrs	r3, r3, #27
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	0e1b      	lsrs	r3, r3, #24
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e72:	0c9b      	lsrs	r3, r3, #18
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e84:	0bdb      	lsrs	r3, r3, #15
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	7e1b      	ldrb	r3, [r3, #24]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003eb2:	fb02 f203 	mul.w	r2, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	7a1b      	ldrb	r3, [r3, #8]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ed4:	0a52      	lsrs	r2, r2, #9
 8003ed6:	fb02 f203 	mul.w	r2, r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ee6:	e031      	b.n	8003f4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d11d      	bne.n	8003f2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	431a      	orrs	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	029a      	lsls	r2, r3, #10
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60
 8003f2a:	e00f      	b.n	8003f4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_SD_GetCardCSD+0x344>)
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e09d      	b.n	8004088 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	0b9b      	lsrs	r3, r3, #14
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	09db      	lsrs	r3, r3, #7
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	0fdb      	lsrs	r3, r3, #31
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	0f5b      	lsrs	r3, r3, #29
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	0d9b      	lsrs	r3, r3, #22
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	0d5b      	lsrs	r3, r3, #21
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	0bdb      	lsrs	r3, r3, #15
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	0b9b      	lsrs	r3, r3, #14
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	0b5b      	lsrs	r3, r3, #13
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	0b1b      	lsrs	r3, r3, #12
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	b2da      	uxtb	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004076:	b2da      	uxtb	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	004005ff 	.word	0x004005ff

08004098 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9dc 	bl	80044c0 <SD_SendStatus>
 8004108:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	0a5b      	lsrs	r3, r3, #9
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004126:	693b      	ldr	r3, [r7, #16]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f240 523a 	movw	r2, #1338	; 0x53a
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ffd1 	bl	80040f0 <HAL_SD_GetCardState>
 800414e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d002      	beq.n	800416a <SD_DMATxAbort+0x3a>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b05      	cmp	r3, #5
 8004168:	d10a      	bne.n	8004180 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fbfc 	bl	800496c <SDMMC_CmdStopTransfer>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f001 f827 	bl	80051dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800418e:	e002      	b.n	8004196 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fdd3 	bl	8003d3c <HAL_SD_ErrorCallback>
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff ff9a 	bl	80040f0 <HAL_SD_GetCardState>
 80041bc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d002      	beq.n	80041d8 <SD_DMARxAbort+0x3a>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b05      	cmp	r3, #5
 80041d6:	d10a      	bne.n	80041ee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fbc5 	bl	800496c <SDMMC_CmdStopTransfer>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fff0 	bl	80051dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041fc:	e002      	b.n	8004204 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fd9c 	bl	8003d3c <HAL_SD_ErrorCallback>
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800420c:	b5b0      	push	{r4, r5, r7, lr}
 800420e:	b094      	sub	sp, #80	; 0x50
 8004210:	af04      	add	r7, sp, #16
 8004212:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa77 	bl	8004710 <SDMMC_GetPowerState>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800422c:	e0b6      	b.n	800439c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	2b03      	cmp	r3, #3
 8004234:	d02f      	beq.n	8004296 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fc5d 	bl	8004afa <SDMMC_CmdSendCID>
 8004240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <SD_InitCard+0x40>
    {
      return errorstate;
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	e0a7      	b.n	800439c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 faa1 	bl	800479a <SDMMC_GetResponse>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2104      	movs	r1, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fa98 	bl	800479a <SDMMC_GetResponse>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2108      	movs	r1, #8
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fa8f 	bl	800479a <SDMMC_GetResponse>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	210c      	movs	r1, #12
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fa86 	bl	800479a <SDMMC_GetResponse>
 800428e:	4602      	mov	r2, r0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	2b03      	cmp	r3, #3
 800429c:	d00d      	beq.n	80042ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f107 020e 	add.w	r2, r7, #14
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fc63 	bl	8004b74 <SDMMC_CmdSetRelAdd>
 80042ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <SD_InitCard+0xae>
    {
      return errorstate;
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	e070      	b.n	800439c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d036      	beq.n	8004330 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 fc2d 	bl	8004b36 <SDMMC_CmdSendCSD>
 80042dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80042e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e6:	e059      	b.n	800439c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa53 	bl	800479a <SDMMC_GetResponse>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2104      	movs	r1, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa4a 	bl	800479a <SDMMC_GetResponse>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2108      	movs	r1, #8
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa41 	bl	800479a <SDMMC_GetResponse>
 8004318:	4602      	mov	r2, r0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	210c      	movs	r1, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa38 	bl	800479a <SDMMC_GetResponse>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa2f 	bl	800479a <SDMMC_GetResponse>
 800433c:	4603      	mov	r3, r0
 800433e:	0d1a      	lsrs	r2, r3, #20
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fd00 	bl	8003d50 <HAL_SD_GetCardCSD>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800435a:	e01f      	b.n	800439c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	461a      	mov	r2, r3
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	4608      	mov	r0, r1
 800436e:	f000 fb1f 	bl	80049b0 <SDMMC_CmdSelDesel>
 8004372:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SD_InitCard+0x172>
  {
    return errorstate;
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	e00e      	b.n	800439c <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	466c      	mov	r4, sp
 8004386:	f103 0210 	add.w	r2, r3, #16
 800438a:	ca07      	ldmia	r2, {r0, r1, r2}
 800438c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004390:	3304      	adds	r3, #4
 8004392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f961 	bl	800465c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bdb0      	pop	{r4, r5, r7, pc}

080043a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fb1a 	bl	80049f6 <SDMMC_CmdGoIdleState>
 80043c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	e072      	b.n	80044b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb2d 	bl	8004a32 <SDMMC_CmdOperCond>
 80043d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fb03 	bl	80049f6 <SDMMC_CmdGoIdleState>
 80043f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <SD_PowerON+0x5e>
    {
      return errorstate;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	e05b      	b.n	80044b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004406:	2b01      	cmp	r3, #1
 8004408:	d137      	bne.n	800447a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fb2d 	bl	8004a70 <SDMMC_CmdAppCommand>
 8004416:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02d      	beq.n	800447a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800441e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004422:	e047      	b.n	80044b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb20 	bl	8004a70 <SDMMC_CmdAppCommand>
 8004430:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SD_PowerON+0x98>
    {
      return errorstate;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	e03b      	b.n	80044b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	491e      	ldr	r1, [pc, #120]	; (80044bc <SD_PowerON+0x118>)
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fb36 	bl	8004ab4 <SDMMC_CmdAppOperCommand>
 8004448:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004454:	e02e      	b.n	80044b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f99c 	bl	800479a <SDMMC_GetResponse>
 8004462:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	0fdb      	lsrs	r3, r3, #31
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <SD_PowerON+0xcc>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <SD_PowerON+0xce>
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

    count++;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3301      	adds	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004480:	4293      	cmp	r3, r2
 8004482:	d802      	bhi.n	800448a <SD_PowerON+0xe6>
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0cc      	beq.n	8004424 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004490:	4293      	cmp	r3, r2
 8004492:	d902      	bls.n	800449a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004498:	e00c      	b.n	80044b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
 80044aa:	e002      	b.n	80044b2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	c1100000 	.word	0xc1100000

080044c0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80044d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044d4:	e018      	b.n	8004508 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f000 fb67 	bl	8004bb6 <SDMMC_CmdSendStatus>
 80044e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	e009      	b.n	8004508 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f94d 	bl	800479a <SDMMC_GetResponse>
 8004500:	4602      	mov	r2, r0
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03f      	beq.n	80045aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e033      	b.n	8004598 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f8be 	bl	80046b6 <SDMMC_ReadFIFO>
 800453a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3b01      	subs	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	701a      	strb	r2, [r3, #0]
      tmp++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	3b01      	subs	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3b01      	subs	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	0e1b      	lsrs	r3, r3, #24
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3301      	adds	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b07      	cmp	r3, #7
 800459c:	d9c8      	bls.n	8004530 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d043      	beq.n	8004654 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e037      	b.n	8004642 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	041a      	lsls	r2, r3, #16
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	3b01      	subs	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	061a      	lsls	r2, r3, #24
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f107 0208 	add.w	r2, r7, #8
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f84a 	bl	80046d0 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	3301      	adds	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b07      	cmp	r3, #7
 8004646:	d9c4      	bls.n	80045d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800465c:	b084      	sub	sp, #16
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	f107 001c 	add.w	r0, r7, #28
 800466a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800467a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800467e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004682:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004686:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800468a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800469a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	b004      	add	sp, #16
 80046b4:	4770      	bx	lr

080046b6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2203      	movs	r2, #3
 80046fe:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004700:	2002      	movs	r0, #2
 8004702:	f7fc f8bb 	bl	800087c <HAL_Delay>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0303 	and.w	r3, r3, #3
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800474a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004750:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004756:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004766:	f023 030f 	bic.w	r3, r3, #15
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	b2db      	uxtb	r3, r3
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3314      	adds	r3, #20
 80047a8:	461a      	mov	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4413      	add	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80047ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80047f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800480a:	2300      	movs	r3, #0

}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004826:	2310      	movs	r3, #16
 8004828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff74 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	2110      	movs	r1, #16
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9d6 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004852:	69fb      	ldr	r3, [r7, #28]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800486a:	2311      	movs	r3, #17
 800486c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff52 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	2111      	movs	r1, #17
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9b4 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004896:	69fb      	ldr	r3, [r7, #28]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80048ae:	2312      	movs	r3, #18
 80048b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048b2:	2340      	movs	r3, #64	; 0x40
 80048b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff ff30 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80048cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d0:	2112      	movs	r1, #18
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f992 	bl	8004bfc <SDMMC_GetCmdResp1>
 80048d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80048f2:	2318      	movs	r3, #24
 80048f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048f6:	2340      	movs	r3, #64	; 0x40
 80048f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff0e 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	2118      	movs	r1, #24
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f970 	bl	8004bfc <SDMMC_GetCmdResp1>
 800491c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800491e:	69fb      	ldr	r3, [r7, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004936:	2319      	movs	r3, #25
 8004938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800493a:	2340      	movs	r3, #64	; 0x40
 800493c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004946:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff feec 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	2119      	movs	r1, #25
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f94e 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004978:	230c      	movs	r3, #12
 800497a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004988:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fecb 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <SDMMC_CmdStopTransfer+0x40>)
 8004998:	210c      	movs	r1, #12
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f92e 	bl	8004bfc <SDMMC_GetCmdResp1>
 80049a0:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80049a2:	69fb      	ldr	r3, [r7, #28]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	05f5e100 	.word	0x05f5e100

080049b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80049c0:	2307      	movs	r3, #7
 80049c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049c4:	2340      	movs	r3, #64	; 0x40
 80049c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049d2:	f107 0310 	add.w	r3, r7, #16
 80049d6:	4619      	mov	r1, r3
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff fea7 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	2107      	movs	r1, #7
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f909 	bl	8004bfc <SDMMC_GetCmdResp1>
 80049ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3728      	adds	r7, #40	; 0x28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b088      	sub	sp, #32
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a14:	f107 0308 	add.w	r3, r7, #8
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fe86 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb23 	bl	800506c <SDMMC_GetCmdError>
 8004a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a28:	69fb      	ldr	r3, [r7, #28]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b088      	sub	sp, #32
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004a3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004a40:	2308      	movs	r3, #8
 8004a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fe67 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fab6 	bl	8004fd0 <SDMMC_GetCmdResp7>
 8004a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a66:	69fb      	ldr	r3, [r7, #28]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004a7e:	2337      	movs	r3, #55	; 0x37
 8004a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fe48 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	2137      	movs	r1, #55	; 0x37
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8aa 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac8:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004aca:	2329      	movs	r3, #41	; 0x29
 8004acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ace:	2340      	movs	r3, #64	; 0x40
 8004ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe22 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f9bd 	bl	8004e68 <SDMMC_GetCmdResp3>
 8004aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004af0:	69fb      	ldr	r3, [r7, #28]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b06:	2302      	movs	r3, #2
 8004b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b18:	f107 0308 	add.w	r3, r7, #8
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe04 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f957 	bl	8004dd8 <SDMMC_GetCmdResp2>
 8004b2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b088      	sub	sp, #32
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b44:	2309      	movs	r3, #9
 8004b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b48:	23c0      	movs	r3, #192	; 0xc0
 8004b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fde5 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f938 	bl	8004dd8 <SDMMC_GetCmdResp2>
 8004b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004b82:	2303      	movs	r3, #3
 8004b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b86:	2340      	movs	r3, #64	; 0x40
 8004b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b94:	f107 0308 	add.w	r3, r7, #8
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fdc6 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f99d 	bl	8004ee4 <SDMMC_GetCmdResp6>
 8004baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bac:	69fb      	ldr	r3, [r7, #28]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004bc4:	230d      	movs	r3, #13
 8004bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bc8:	2340      	movs	r3, #64	; 0x40
 8004bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fda5 	bl	800472c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	210d      	movs	r1, #13
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f807 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c0a:	4b70      	ldr	r3, [pc, #448]	; (8004dcc <SDMMC_GetCmdResp1+0x1d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	; (8004dd0 <SDMMC_GetCmdResp1+0x1d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	0a5a      	lsrs	r2, r3, #9
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c2c:	e0c9      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <SDMMC_GetCmdResp1+0x22>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ea      	bne.n	8004c1e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2204      	movs	r2, #4
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	e0b1      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0a6      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	22c5      	movs	r2, #197	; 0xc5
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fd80 	bl	8004780 <SDMMC_GetCommandResponse>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	7afb      	ldrb	r3, [r7, #11]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d001      	beq.n	8004c8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e099      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fd82 	bl	800479a <SDMMC_GetResponse>
 8004c96:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	; (8004dd4 <SDMMC_GetCmdResp1+0x1d8>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e08d      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da02      	bge.n	8004cb2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb0:	e087      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	e080      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	e079      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cdc:	e071      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cec:	e069      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfc:	e061      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0c:	e059      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1c:	e051      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d2c:	e049      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d3c:	e041      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4c:	e039      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d5c:	e031      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d6c:	e029      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d7c:	e021      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d8c:	e019      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d9c:	e011      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004da8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dac:	e009      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004db8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004dbc:	e001      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	10624dd3 	.word	0x10624dd3
 8004dd4:	fdffe008 	.word	0xfdffe008

08004dd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004de0:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <SDMMC_GetCmdResp2+0x88>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <SDMMC_GetCmdResp2+0x8c>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	0a5b      	lsrs	r3, r3, #9
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	60fa      	str	r2, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e04:	e026      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ef      	beq.n	8004df6 <SDMMC_GetCmdResp2+0x1e>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ea      	bne.n	8004df6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e32:	2304      	movs	r3, #4
 8004e34:	e00e      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e003      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	22c5      	movs	r2, #197	; 0xc5
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20000000 	.word	0x20000000
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e70:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <SDMMC_GetCmdResp3+0x74>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <SDMMC_GetCmdResp3+0x78>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a5b      	lsrs	r3, r3, #9
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e5a      	subs	r2, r3, #1
 8004e8a:	60fa      	str	r2, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e94:	e01b      	b.n	8004ece <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ef      	beq.n	8004e86 <SDMMC_GetCmdResp3+0x1e>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ea      	bne.n	8004e86 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	e003      	b.n	8004ece <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	22c5      	movs	r2, #197	; 0xc5
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	460b      	mov	r3, r1
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <SDMMC_GetCmdResp6+0xe4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a35      	ldr	r2, [pc, #212]	; (8004fcc <SDMMC_GetCmdResp6+0xe8>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	0a5b      	lsrs	r3, r3, #9
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f16:	e052      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <SDMMC_GetCmdResp6+0x24>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ea      	bne.n	8004f08 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2204      	movs	r2, #4
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f44:	2304      	movs	r3, #4
 8004f46:	e03a      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e02f      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fc0e 	bl	8004780 <SDMMC_GetCommandResponse>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	7afb      	ldrb	r3, [r7, #11]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d001      	beq.n	8004f72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e025      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	22c5      	movs	r2, #197	; 0xc5
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fc0d 	bl	800479a <SDMMC_GetResponse>
 8004f80:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e011      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fa8:	e009      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb8:	e001      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	10624dd3 	.word	0x10624dd3

08004fd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <SDMMC_GetCmdResp7+0x94>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <SDMMC_GetCmdResp7+0x98>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a5b      	lsrs	r3, r3, #9
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1e5a      	subs	r2, r3, #1
 8004ff2:	60fa      	str	r2, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ffc:	e02c      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <SDMMC_GetCmdResp7+0x1e>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ea      	bne.n	8004fee <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800502a:	2304      	movs	r3, #4
 800502c:	e014      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005040:	2301      	movs	r3, #1
 8005042:	e009      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005056:	2300      	movs	r3, #0

}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000000 	.word	0x20000000
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <SDMMC_GetCmdError+0x50>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <SDMMC_GetCmdError+0x54>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	60fa      	str	r2, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005098:	e009      	b.n	80050ae <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f1      	beq.n	800508a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	22c5      	movs	r2, #197	; 0xc5
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000000 	.word	0x20000000
 80050c0:	10624dd3 	.word	0x10624dd3

080050c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80050c8:	4904      	ldr	r1, [pc, #16]	; (80050dc <MX_FATFS_Init+0x18>)
 80050ca:	4805      	ldr	r0, [pc, #20]	; (80050e0 <MX_FATFS_Init+0x1c>)
 80050cc:	f003 fbc0 	bl	8008850 <FATFS_LinkDriver>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <MX_FATFS_Init+0x20>)
 80050d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050d8:	bf00      	nop
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	200002e8 	.word	0x200002e8
 80050e0:	08008b58 	.word	0x08008b58
 80050e4:	200002e4 	.word	0x200002e4

080050e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005102:	f000 f89e 	bl	8005242 <BSP_SD_IsDetected>
 8005106:	4603      	mov	r3, r0
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800510c:	2302      	movs	r3, #2
 800510e:	e005      	b.n	800511c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005110:	4804      	ldr	r0, [pc, #16]	; (8005124 <BSP_SD_Init+0x2c>)
 8005112:	f7fe f851 	bl	80031b8 <HAL_SD_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800511a:	79fb      	ldrb	r3, [r7, #7]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	2000025c 	.word	0x2000025c

08005128 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	4806      	ldr	r0, [pc, #24]	; (8005160 <BSP_SD_ReadBlocks+0x38>)
 8005146:	f7fe f91f 	bl	8003388 <HAL_SD_ReadBlocks>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2000025c 	.word	0x2000025c

08005164 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	4806      	ldr	r0, [pc, #24]	; (800519c <BSP_SD_WriteBlocks+0x38>)
 8005182:	f7fe fadf 	bl	8003744 <HAL_SD_WriteBlocks>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000025c 	.word	0x2000025c

080051a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80051a4:	4805      	ldr	r0, [pc, #20]	; (80051bc <BSP_SD_GetCardState+0x1c>)
 80051a6:	f7fe ffa3 	bl	80040f0 <HAL_SD_GetCardState>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	2000025c 	.word	0x2000025c

080051c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4803      	ldr	r0, [pc, #12]	; (80051d8 <BSP_SD_GetCardInfo+0x18>)
 80051cc:	f7fe ff64 	bl	8004098 <HAL_SD_GetCardInfo>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000025c 	.word	0x2000025c

080051dc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80051e4:	f000 f818 	bl	8005218 <BSP_SD_AbortCallback>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80051f8:	f000 f815 	bl	8005226 <BSP_SD_WriteCpltCallback>
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800520c:	f000 f812 	bl	8005234 <BSP_SD_ReadCpltCallback>
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0

}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0

}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0

}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005248:	2301      	movs	r3, #1
 800524a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800524c:	f000 f80b 	bl	8005266 <BSP_PlatformIsDetected>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005256:	2300      	movs	r3, #0
 8005258:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	b2db      	uxtb	r3, r3
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800526c:	2301      	movs	r3, #1
 800526e:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005278:	f7fb fe20 	bl	8000ebc <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005282:	2300      	movs	r3, #0
 8005284:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005286:	79fb      	ldrb	r3, [r7, #7]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <SD_CheckStatus+0x38>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80052a0:	f7ff ff7e 	bl	80051a0 <BSP_SD_GetCardState>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <SD_CheckStatus+0x38>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <SD_CheckStatus+0x38>)
 80052b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <SD_CheckStatus+0x38>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000009 	.word	0x20000009

080052cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <SD_initialize+0x38>)
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80052dc:	f7ff ff0c 	bl	80050f8 <BSP_SD_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ffd1 	bl	8005290 <SD_CheckStatus>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4b04      	ldr	r3, [pc, #16]	; (8005304 <SD_initialize+0x38>)
 80052f4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <SD_initialize+0x38>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000009 	.word	0x20000009

08005308 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff ffbb 	bl	8005290 <SD_CheckStatus>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	68b8      	ldr	r0, [r7, #8]
 8005342:	f7ff fef1 	bl	8005128 <BSP_SD_ReadBlocks>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800534c:	bf00      	nop
 800534e:	f7ff ff27 	bl	80051a0 <BSP_SD_GetCardState>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1fa      	bne.n	800534e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4603      	mov	r3, r0
 8005374:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800537a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	68b8      	ldr	r0, [r7, #8]
 8005384:	f7ff feee 	bl	8005164 <BSP_SD_WriteBlocks>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800538e:	bf00      	nop
 8005390:	f7ff ff06 	bl	80051a0 <BSP_SD_GetCardState>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1fa      	bne.n	8005390 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	603a      	str	r2, [r7, #0]
 80053b2:	71fb      	strb	r3, [r7, #7]
 80053b4:	460b      	mov	r3, r1
 80053b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80053be:	4b25      	ldr	r3, [pc, #148]	; (8005454 <SD_ioctl+0xac>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SD_ioctl+0x28>
 80053cc:	2303      	movs	r3, #3
 80053ce:	e03c      	b.n	800544a <SD_ioctl+0xa2>

  switch (cmd)
 80053d0:	79bb      	ldrb	r3, [r7, #6]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d834      	bhi.n	8005440 <SD_ioctl+0x98>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <SD_ioctl+0x34>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053f5 	.word	0x080053f5
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005427 	.word	0x08005427
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80053f2:	e028      	b.n	8005446 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fee1 	bl	80051c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800540a:	e01c      	b.n	8005446 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fed5 	bl	80051c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	b29a      	uxth	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005424:	e00f      	b.n	8005446 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fec8 	bl	80051c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	0a5a      	lsrs	r2, r3, #9
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800543e:	e002      	b.n	8005446 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005440:	2304      	movs	r3, #4
 8005442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800544a:	4618      	mov	r0, r3
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000009 	.word	0x20000009

08005458 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <disk_status+0x30>)
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	79fa      	ldrb	r2, [r7, #7]
 8005470:	4905      	ldr	r1, [pc, #20]	; (8005488 <disk_status+0x30>)
 8005472:	440a      	add	r2, r1
 8005474:	7a12      	ldrb	r2, [r2, #8]
 8005476:	4610      	mov	r0, r2
 8005478:	4798      	blx	r3
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000250 	.word	0x20000250

0800548c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <disk_initialize+0x48>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d111      	bne.n	80054c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <disk_initialize+0x48>)
 80054a8:	2101      	movs	r1, #1
 80054aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <disk_initialize+0x48>)
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	79fa      	ldrb	r2, [r7, #7]
 80054ba:	4906      	ldr	r1, [pc, #24]	; (80054d4 <disk_initialize+0x48>)
 80054bc:	440a      	add	r2, r1
 80054be:	7a12      	ldrb	r2, [r2, #8]
 80054c0:	4610      	mov	r0, r2
 80054c2:	4798      	blx	r3
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000250 	.word	0x20000250

080054d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <disk_read+0x3c>)
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	689c      	ldr	r4, [r3, #8]
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	4a07      	ldr	r2, [pc, #28]	; (8005514 <disk_read+0x3c>)
 80054f8:	4413      	add	r3, r2
 80054fa:	7a18      	ldrb	r0, [r3, #8]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	47a0      	blx	r4
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]
  return res;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	bf00      	nop
 8005514:	20000250 	.word	0x20000250

08005518 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <disk_write+0x3c>)
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68dc      	ldr	r4, [r3, #12]
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <disk_write+0x3c>)
 8005538:	4413      	add	r3, r2
 800553a:	7a18      	ldrb	r0, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	47a0      	blx	r4
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
  return res;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	bf00      	nop
 8005554:	20000250 	.word	0x20000250

08005558 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	603a      	str	r2, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
 8005564:	460b      	mov	r3, r1
 8005566:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <disk_ioctl+0x38>)
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	79fa      	ldrb	r2, [r7, #7]
 8005576:	4906      	ldr	r1, [pc, #24]	; (8005590 <disk_ioctl+0x38>)
 8005578:	440a      	add	r2, r1
 800557a:	7a10      	ldrb	r0, [r2, #8]
 800557c:	79b9      	ldrb	r1, [r7, #6]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4798      	blx	r3
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]
  return res;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000250 	.word	0x20000250

08005594 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3301      	adds	r3, #1
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055a4:	89fb      	ldrh	r3, [r7, #14]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055b6:	89fb      	ldrh	r3, [r7, #14]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3303      	adds	r3, #3
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	3202      	adds	r2, #2
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	3201      	adds	r2, #1
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	7812      	ldrb	r2, [r2, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80055fc:	68fb      	ldr	r3, [r7, #12]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	887b      	ldrh	r3, [r7, #2]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	1c53      	adds	r3, r2, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	6179      	str	r1, [r7, #20]
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f1      	bne.n	80056b2 <mem_cpy+0x1a>
	}
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	617a      	str	r2, [r7, #20]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f3      	bne.n	80056ea <mem_set+0x10>
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	61fa      	str	r2, [r7, #28]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	4619      	mov	r1, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	61ba      	str	r2, [r7, #24]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	1acb      	subs	r3, r1, r3
 800573c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3b01      	subs	r3, #1
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <mem_cmp+0x40>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0eb      	beq.n	8005728 <mem_cmp+0x18>

	return r;
 8005750:	697b      	ldr	r3, [r7, #20]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005768:	e002      	b.n	8005770 <chk_chr+0x12>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3301      	adds	r3, #1
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <chk_chr+0x26>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4293      	cmp	r3, r2
 8005782:	d1f2      	bne.n	800576a <chk_chr+0xc>
	return *str;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	781b      	ldrb	r3, [r3, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e029      	b.n	80057fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <chk_lock+0xb4>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	4413      	add	r3, r2
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01d      	beq.n	80057f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057b6:	4a24      	ldr	r2, [pc, #144]	; (8005848 <chk_lock+0xb4>)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	4413      	add	r3, r2
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d116      	bne.n	80057f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <chk_lock+0xb4>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057d8:	429a      	cmp	r2, r3
 80057da:	d10c      	bne.n	80057f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80057dc:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <chk_lock+0xb4>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	4413      	add	r3, r2
 80057e4:	3308      	adds	r3, #8
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d102      	bne.n	80057f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80057f0:	e007      	b.n	8005802 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d9d2      	bls.n	80057a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d109      	bne.n	800581c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <chk_lock+0x80>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d101      	bne.n	8005818 <chk_lock+0x84>
 8005814:	2300      	movs	r3, #0
 8005816:	e010      	b.n	800583a <chk_lock+0xa6>
 8005818:	2312      	movs	r3, #18
 800581a:	e00e      	b.n	800583a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d108      	bne.n	8005834 <chk_lock+0xa0>
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <chk_lock+0xb4>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	4413      	add	r3, r2
 800582a:	330c      	adds	r3, #12
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005832:	d101      	bne.n	8005838 <chk_lock+0xa4>
 8005834:	2310      	movs	r3, #16
 8005836:	e000      	b.n	800583a <chk_lock+0xa6>
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000030 	.word	0x20000030

0800584c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	e002      	b.n	800585e <enq_lock+0x12>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3301      	adds	r3, #1
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d806      	bhi.n	8005872 <enq_lock+0x26>
 8005864:	4a09      	ldr	r2, [pc, #36]	; (800588c <enq_lock+0x40>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4413      	add	r3, r2
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f2      	bne.n	8005858 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b02      	cmp	r3, #2
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000030 	.word	0x20000030

08005890 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e01f      	b.n	80058e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058a0:	4a41      	ldr	r2, [pc, #260]	; (80059a8 <inc_lock+0x118>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	4413      	add	r3, r2
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d113      	bne.n	80058da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <inc_lock+0x118>)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d109      	bne.n	80058da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80058c6:	4a38      	ldr	r2, [pc, #224]	; (80059a8 <inc_lock+0x118>)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	4413      	add	r3, r2
 80058ce:	3308      	adds	r3, #8
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d006      	beq.n	80058e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d9dc      	bls.n	80058a0 <inc_lock+0x10>
 80058e6:	e000      	b.n	80058ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80058e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d132      	bne.n	8005956 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <inc_lock+0x6c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d806      	bhi.n	8005910 <inc_lock+0x80>
 8005902:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <inc_lock+0x118>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	4413      	add	r3, r2
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f2      	bne.n	80058f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d101      	bne.n	800591a <inc_lock+0x8a>
 8005916:	2300      	movs	r3, #0
 8005918:	e040      	b.n	800599c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4922      	ldr	r1, [pc, #136]	; (80059a8 <inc_lock+0x118>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	440b      	add	r3, r1
 8005926:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	491e      	ldr	r1, [pc, #120]	; (80059a8 <inc_lock+0x118>)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	440b      	add	r3, r1
 8005934:	3304      	adds	r3, #4
 8005936:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	491a      	ldr	r1, [pc, #104]	; (80059a8 <inc_lock+0x118>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	3308      	adds	r3, #8
 8005946:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005948:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <inc_lock+0x118>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	4413      	add	r3, r2
 8005950:	330c      	adds	r3, #12
 8005952:	2200      	movs	r2, #0
 8005954:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <inc_lock+0xe0>
 800595c:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <inc_lock+0x118>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	4413      	add	r3, r2
 8005964:	330c      	adds	r3, #12
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <inc_lock+0xe0>
 800596c:	2300      	movs	r3, #0
 800596e:	e015      	b.n	800599c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d108      	bne.n	8005988 <inc_lock+0xf8>
 8005976:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <inc_lock+0x118>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	4413      	add	r3, r2
 800597e:	330c      	adds	r3, #12
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	e001      	b.n	800598c <inc_lock+0xfc>
 8005988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800598c:	4906      	ldr	r1, [pc, #24]	; (80059a8 <inc_lock+0x118>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	440b      	add	r3, r1
 8005994:	330c      	adds	r3, #12
 8005996:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20000030 	.word	0x20000030

080059ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d825      	bhi.n	8005a0c <dec_lock+0x60>
		n = Files[i].ctr;
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <dec_lock+0x74>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	4413      	add	r3, r2
 80059c8:	330c      	adds	r3, #12
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d4:	d101      	bne.n	80059da <dec_lock+0x2e>
 80059d6:	2300      	movs	r3, #0
 80059d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80059da:	89fb      	ldrh	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <dec_lock+0x3a>
 80059e0:	89fb      	ldrh	r3, [r7, #14]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80059e6:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <dec_lock+0x74>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4413      	add	r3, r2
 80059ee:	330c      	adds	r3, #12
 80059f0:	89fa      	ldrh	r2, [r7, #14]
 80059f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <dec_lock+0x5a>
 80059fa:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <dec_lock+0x74>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4413      	add	r3, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	737b      	strb	r3, [r7, #13]
 8005a0a:	e001      	b.n	8005a10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a10:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000030 	.word	0x20000030

08005a24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e010      	b.n	8005a54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a32:	4a0d      	ldr	r2, [pc, #52]	; (8005a68 <clear_lock+0x44>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4413      	add	r3, r2
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d105      	bne.n	8005a4e <clear_lock+0x2a>
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <clear_lock+0x44>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4413      	add	r3, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d9eb      	bls.n	8005a32 <clear_lock+0xe>
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	20000030 	.word	0x20000030

08005a6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	78db      	ldrb	r3, [r3, #3]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d034      	beq.n	8005aea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	7858      	ldrb	r0, [r3, #1]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a90:	2301      	movs	r3, #1
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	f7ff fd40 	bl	8005518 <disk_write>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
 8005aa2:	e022      	b.n	8005aea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d217      	bcs.n	8005aea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	789b      	ldrb	r3, [r3, #2]
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e010      	b.n	8005ae4 <sync_window+0x78>
					wsect += fs->fsize;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7858      	ldrb	r0, [r3, #1]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	f7ff fd1d 	bl	8005518 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d8eb      	bhi.n	8005ac2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d01b      	beq.n	8005b44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ffad 	bl	8005a6c <sync_window>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d113      	bne.n	8005b44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7858      	ldrb	r0, [r3, #1]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b26:	2301      	movs	r3, #1
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	f7ff fcd5 	bl	80054d8 <disk_read>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff87 	bl	8005a6c <sync_window>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d159      	bne.n	8005c1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d149      	bne.n	8005c04 <sync_fs+0xb4>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	791b      	ldrb	r3, [r3, #4]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d145      	bne.n	8005c04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	899b      	ldrh	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	2100      	movs	r1, #0
 8005b86:	f7ff fda8 	bl	80056da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3338      	adds	r3, #56	; 0x38
 8005b8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fd37 	bl	800560a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3338      	adds	r3, #56	; 0x38
 8005ba0:	4921      	ldr	r1, [pc, #132]	; (8005c28 <sync_fs+0xd8>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fd4c 	bl	8005640 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3338      	adds	r3, #56	; 0x38
 8005bac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005bb0:	491e      	ldr	r1, [pc, #120]	; (8005c2c <sync_fs+0xdc>)
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fd44 	bl	8005640 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3338      	adds	r3, #56	; 0x38
 8005bbc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7ff fd3a 	bl	8005640 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3338      	adds	r3, #56	; 0x38
 8005bd0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7ff fd30 	bl	8005640 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7858      	ldrb	r0, [r3, #1]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f7ff fc8d 	bl	8005518 <disk_write>
			fs->fsi_flag = 0;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fca3 	bl	8005558 <disk_ioctl>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <sync_fs+0xcc>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	41615252 	.word	0x41615252
 8005c2c:	61417272 	.word	0x61417272

08005c30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	3b02      	subs	r3, #2
 8005c3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	3b02      	subs	r3, #2
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d301      	bcc.n	8005c50 <clust2sect+0x20>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e008      	b.n	8005c62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	461a      	mov	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	fb03 f202 	mul.w	r2, r3, r2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4413      	add	r3, r2
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d904      	bls.n	8005c8e <get_fat+0x20>
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d302      	bcc.n	8005c94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005c8e:	2301      	movs	r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e0bb      	b.n	8005e0c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	f000 8083 	beq.w	8005daa <get_fat+0x13c>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	f300 80a7 	bgt.w	8005df8 <get_fat+0x18a>
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <get_fat+0x46>
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d056      	beq.n	8005d60 <get_fat+0xf2>
 8005cb2:	e0a1      	b.n	8005df8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	899b      	ldrh	r3, [r3, #12]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f7ff ff0c 	bl	8005af4 <move_window>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 808d 	bne.w	8005dfe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	60fa      	str	r2, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	8992      	ldrh	r2, [r2, #12]
 8005cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cf2:	fb02 f201 	mul.w	r2, r2, r1
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	899b      	ldrh	r3, [r3, #12]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d12:	4413      	add	r3, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	6938      	ldr	r0, [r7, #16]
 8005d18:	f7ff feec 	bl	8005af4 <move_window>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d16f      	bne.n	8005e02 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	899b      	ldrh	r3, [r3, #12]
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d2e:	fb02 f201 	mul.w	r2, r2, r1
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <get_fat+0xe8>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	e002      	b.n	8005d5c <get_fat+0xee>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5c:	617b      	str	r3, [r7, #20]
			break;
 8005d5e:	e055      	b.n	8005e0c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	899b      	ldrh	r3, [r3, #12]
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d74:	4413      	add	r3, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	6938      	ldr	r0, [r7, #16]
 8005d7a:	f7ff febb 	bl	8005af4 <move_window>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d140      	bne.n	8005e06 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	8992      	ldrh	r2, [r2, #12]
 8005d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d96:	fb02 f200 	mul.w	r2, r2, r0
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fbf8 	bl	8005594 <ld_word>
 8005da4:	4603      	mov	r3, r0
 8005da6:	617b      	str	r3, [r7, #20]
			break;
 8005da8:	e030      	b.n	8005e0c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	899b      	ldrh	r3, [r3, #12]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dbe:	4413      	add	r3, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6938      	ldr	r0, [r7, #16]
 8005dc4:	f7ff fe96 	bl	8005af4 <move_window>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11d      	bne.n	8005e0a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	8992      	ldrh	r2, [r2, #12]
 8005ddc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005de0:	fb02 f200 	mul.w	r2, r2, r0
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fbeb 	bl	80055c4 <ld_dword>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005df4:	617b      	str	r3, [r7, #20]
			break;
 8005df6:	e009      	b.n	8005e0c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e006      	b.n	8005e0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dfe:	bf00      	nop
 8005e00:	e004      	b.n	8005e0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e0a:	bf00      	nop
		}
	}

	return val;
 8005e0c:	697b      	ldr	r3, [r7, #20]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e16:	b590      	push	{r4, r7, lr}
 8005e18:	b089      	sub	sp, #36	; 0x24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e22:	2302      	movs	r3, #2
 8005e24:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f240 8102 	bls.w	8006032 <put_fat+0x21c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	f080 80fc 	bcs.w	8006032 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	f000 80b6 	beq.w	8005fb0 <put_fat+0x19a>
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	f300 80fd 	bgt.w	8006044 <put_fat+0x22e>
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d003      	beq.n	8005e56 <put_fat+0x40>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	f000 8083 	beq.w	8005f5a <put_fat+0x144>
 8005e54:	e0f6      	b.n	8006044 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4413      	add	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	899b      	ldrh	r3, [r3, #12]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e74:	4413      	add	r3, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fe3b 	bl	8005af4 <move_window>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e82:	7ffb      	ldrb	r3, [r7, #31]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 80d6 	bne.w	8006036 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	61ba      	str	r2, [r7, #24]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	8992      	ldrh	r2, [r2, #12]
 8005e9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e9e:	fb02 f200 	mul.w	r2, r2, r0
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <put_fat+0xb8>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	b25a      	sxtb	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e001      	b.n	8005ed2 <put_fat+0xbc>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	899b      	ldrh	r3, [r3, #12]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eec:	4413      	add	r3, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff fdff 	bl	8005af4 <move_window>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005efa:	7ffb      	ldrb	r3, [r7, #31]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 809c 	bne.w	800603a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	899b      	ldrh	r3, [r3, #12]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f14:	fb02 f200 	mul.w	r2, r2, r0
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <put_fat+0x11a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e00e      	b.n	8005f4e <put_fat+0x138>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	f023 030f 	bic.w	r3, r3, #15
 8005f3a:	b25a      	sxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	b25b      	sxtb	r3, r3
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	70da      	strb	r2, [r3, #3]
			break;
 8005f58:	e074      	b.n	8006044 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	899b      	ldrh	r3, [r3, #12]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4619      	mov	r1, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f6e:	4413      	add	r3, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fdbe 	bl	8005af4 <move_window>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f7c:	7ffb      	ldrb	r3, [r7, #31]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d15d      	bne.n	800603e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	8992      	ldrh	r2, [r2, #12]
 8005f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f94:	fb02 f200 	mul.w	r2, r2, r0
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fb31 	bl	800560a <st_word>
			fs->wflag = 1;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	70da      	strb	r2, [r3, #3]
			break;
 8005fae:	e049      	b.n	8006044 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	899b      	ldrh	r3, [r3, #12]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fd93 	bl	8005af4 <move_window>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fd2:	7ffb      	ldrb	r3, [r7, #31]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d134      	bne.n	8006042 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	8992      	ldrh	r2, [r2, #12]
 8005fec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ff0:	fb02 f200 	mul.w	r2, r2, r0
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fae3 	bl	80055c4 <ld_dword>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006004:	4323      	orrs	r3, r4
 8006006:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	8992      	ldrh	r2, [r2, #12]
 8006016:	fbb3 f0f2 	udiv	r0, r3, r2
 800601a:	fb02 f200 	mul.w	r2, r2, r0
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	440b      	add	r3, r1
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fb0b 	bl	8005640 <st_dword>
			fs->wflag = 1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	70da      	strb	r2, [r3, #3]
			break;
 8006030:	e008      	b.n	8006044 <put_fat+0x22e>
		}
	}
 8006032:	bf00      	nop
 8006034:	e006      	b.n	8006044 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <put_fat+0x22e>
			if (res != FR_OK) break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <put_fat+0x22e>
			if (res != FR_OK) break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006042:	bf00      	nop
	return res;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3724      	adds	r7, #36	; 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}

0800604e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d904      	bls.n	8006074 <remove_chain+0x26>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d301      	bcc.n	8006078 <remove_chain+0x2a>
 8006074:	2302      	movs	r3, #2
 8006076:	e04b      	b.n	8006110 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800607e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	69b8      	ldr	r0, [r7, #24]
 8006086:	f7ff fec6 	bl	8005e16 <put_fat>
 800608a:	4603      	mov	r3, r0
 800608c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <remove_chain+0x4a>
 8006094:	7ffb      	ldrb	r3, [r7, #31]
 8006096:	e03b      	b.n	8006110 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff fde7 	bl	8005c6e <get_fat>
 80060a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d031      	beq.n	800610c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <remove_chain+0x64>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e02e      	b.n	8006110 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b8:	d101      	bne.n	80060be <remove_chain+0x70>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e028      	b.n	8006110 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80060be:	2200      	movs	r2, #0
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f7ff fea7 	bl	8005e16 <put_fat>
 80060c8:	4603      	mov	r3, r0
 80060ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80060cc:	7ffb      	ldrb	r3, [r7, #31]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <remove_chain+0x88>
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	e01c      	b.n	8006110 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	3b02      	subs	r3, #2
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d20b      	bcs.n	80060fc <remove_chain+0xae>
			fs->free_clst++;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d3c6      	bcc.n	8006098 <remove_chain+0x4a>
 800610a:	e000      	b.n	800610e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800610c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <create_chain+0x2c>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	429a      	cmp	r2, r3
 8006142:	d31b      	bcc.n	800617c <create_chain+0x64>
 8006144:	2301      	movs	r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e018      	b.n	800617c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fd8e 	bl	8005c6e <get_fat>
 8006152:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d801      	bhi.n	800615e <create_chain+0x46>
 800615a:	2301      	movs	r3, #1
 800615c:	e070      	b.n	8006240 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006164:	d101      	bne.n	800616a <create_chain+0x52>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	e06a      	b.n	8006240 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	429a      	cmp	r2, r3
 8006172:	d201      	bcs.n	8006178 <create_chain+0x60>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e063      	b.n	8006240 <create_chain+0x128>
		scl = clst;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	429a      	cmp	r2, r3
 800618e:	d307      	bcc.n	80061a0 <create_chain+0x88>
				ncl = 2;
 8006190:	2302      	movs	r3, #2
 8006192:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d901      	bls.n	80061a0 <create_chain+0x88>
 800619c:	2300      	movs	r3, #0
 800619e:	e04f      	b.n	8006240 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fd63 	bl	8005c6e <get_fat>
 80061a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00e      	beq.n	80061ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d003      	beq.n	80061be <create_chain+0xa6>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061bc:	d101      	bne.n	80061c2 <create_chain+0xaa>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	e03e      	b.n	8006240 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d1da      	bne.n	8006180 <create_chain+0x68>
 80061ca:	2300      	movs	r3, #0
 80061cc:	e038      	b.n	8006240 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80061ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d4:	69f9      	ldr	r1, [r7, #28]
 80061d6:	6938      	ldr	r0, [r7, #16]
 80061d8:	f7ff fe1d 	bl	8005e16 <put_fat>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <create_chain+0xe2>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6938      	ldr	r0, [r7, #16]
 80061f2:	f7ff fe10 	bl	8005e16 <put_fat>
 80061f6:	4603      	mov	r3, r0
 80061f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d116      	bne.n	800622e <create_chain+0x116>
		fs->last_clst = ncl;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	3b02      	subs	r3, #2
 8006210:	429a      	cmp	r2, r3
 8006212:	d804      	bhi.n	800621e <create_chain+0x106>
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	711a      	strb	r2, [r3, #4]
 800622c:	e007      	b.n	800623e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d102      	bne.n	800623a <create_chain+0x122>
 8006234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006238:	e000      	b.n	800623c <create_chain+0x124>
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800623e:	69fb      	ldr	r3, [r7, #28]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	3304      	adds	r3, #4
 800625e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	899b      	ldrh	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	fbb3 f3f2 	udiv	r3, r3, r2
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	8952      	ldrh	r2, [r2, #10]
 8006270:	fbb3 f3f2 	udiv	r3, r3, r2
 8006274:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	613a      	str	r2, [r7, #16]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <clmt_clust+0x42>
 8006286:	2300      	movs	r3, #0
 8006288:	e010      	b.n	80062ac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	429a      	cmp	r2, r3
 8006290:	d307      	bcc.n	80062a2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3304      	adds	r3, #4
 800629e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062a0:	e7e9      	b.n	8006276 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80062a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ce:	d204      	bcs.n	80062da <dir_sdi+0x22>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <dir_sdi+0x26>
		return FR_INT_ERR;
 80062da:	2302      	movs	r3, #2
 80062dc:	e071      	b.n	80063c2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <dir_sdi+0x46>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d902      	bls.n	80062fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	8912      	ldrh	r2, [r2, #8]
 800630c:	4293      	cmp	r3, r2
 800630e:	d301      	bcc.n	8006314 <dir_sdi+0x5c>
 8006310:	2302      	movs	r3, #2
 8006312:	e056      	b.n	80063c2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	61da      	str	r2, [r3, #28]
 800631c:	e02d      	b.n	800637a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	895b      	ldrh	r3, [r3, #10]
 8006322:	461a      	mov	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	899b      	ldrh	r3, [r3, #12]
 8006328:	fb03 f302 	mul.w	r3, r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800632e:	e019      	b.n	8006364 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6979      	ldr	r1, [r7, #20]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fc9a 	bl	8005c6e <get_fat>
 800633a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006342:	d101      	bne.n	8006348 <dir_sdi+0x90>
 8006344:	2301      	movs	r3, #1
 8006346:	e03c      	b.n	80063c2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d904      	bls.n	8006358 <dir_sdi+0xa0>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	429a      	cmp	r2, r3
 8006356:	d301      	bcc.n	800635c <dir_sdi+0xa4>
 8006358:	2302      	movs	r3, #2
 800635a:	e032      	b.n	80063c2 <dir_sdi+0x10a>
			ofs -= csz;
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	429a      	cmp	r2, r3
 800636a:	d2e1      	bcs.n	8006330 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800636c:	6979      	ldr	r1, [r7, #20]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f7ff fc5e 	bl	8005c30 <clust2sect>
 8006374:	4602      	mov	r2, r0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <dir_sdi+0xd4>
 8006388:	2302      	movs	r3, #2
 800638a:	e01a      	b.n	80063c2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	4619      	mov	r1, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	fbb3 f3f1 	udiv	r3, r3, r1
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	899b      	ldrh	r3, [r3, #12]
 80063ac:	461a      	mov	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80063b4:	fb02 f200 	mul.w	r2, r2, r0
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	18ca      	adds	r2, r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	3320      	adds	r3, #32
 80063e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <dir_next+0x28>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063f0:	d301      	bcc.n	80063f6 <dir_next+0x2c>
 80063f2:	2304      	movs	r3, #4
 80063f4:	e0bb      	b.n	800656e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	899b      	ldrh	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006402:	fb02 f201 	mul.w	r2, r2, r1
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 809d 	bne.w	8006548 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	8912      	ldrh	r2, [r2, #8]
 8006428:	4293      	cmp	r3, r2
 800642a:	f0c0 808d 	bcc.w	8006548 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	61da      	str	r2, [r3, #28]
 8006434:	2304      	movs	r3, #4
 8006436:	e09a      	b.n	800656e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	899b      	ldrh	r3, [r3, #12]
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	fbb3 f3f2 	udiv	r3, r3, r2
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	8952      	ldrh	r2, [r2, #10]
 8006448:	3a01      	subs	r2, #1
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d17b      	bne.n	8006548 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f7ff fc08 	bl	8005c6e <get_fat>
 800645e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d801      	bhi.n	800646a <dir_next+0xa0>
 8006466:	2302      	movs	r3, #2
 8006468:	e081      	b.n	800656e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006470:	d101      	bne.n	8006476 <dir_next+0xac>
 8006472:	2301      	movs	r3, #1
 8006474:	e07b      	b.n	800656e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	429a      	cmp	r2, r3
 800647e:	d359      	bcc.n	8006534 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	61da      	str	r2, [r3, #28]
 800648c:	2304      	movs	r3, #4
 800648e:	e06e      	b.n	800656e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7ff fe3d 	bl	8006118 <create_chain>
 800649e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <dir_next+0xe0>
 80064a6:	2307      	movs	r3, #7
 80064a8:	e061      	b.n	800656e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <dir_next+0xea>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e05c      	b.n	800656e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ba:	d101      	bne.n	80064c0 <dir_next+0xf6>
 80064bc:	2301      	movs	r3, #1
 80064be:	e056      	b.n	800656e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff fad3 	bl	8005a6c <sync_window>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <dir_next+0x106>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e04e      	b.n	800656e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	899b      	ldrh	r3, [r3, #12]
 80064da:	461a      	mov	r2, r3
 80064dc:	2100      	movs	r1, #0
 80064de:	f7ff f8fc 	bl	80056da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fba1 	bl	8005c30 <clust2sect>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	635a      	str	r2, [r3, #52]	; 0x34
 80064f4:	e012      	b.n	800651c <dir_next+0x152>
						fs->wflag = 1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff fab5 	bl	8005a6c <sync_window>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <dir_next+0x142>
 8006508:	2301      	movs	r3, #1
 800650a:	e030      	b.n	800656e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3301      	adds	r3, #1
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	635a      	str	r2, [r3, #52]	; 0x34
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	895b      	ldrh	r3, [r3, #10]
 8006520:	461a      	mov	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4293      	cmp	r3, r2
 8006526:	d3e6      	bcc.n	80064f6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fb77 	bl	8005c30 <clust2sect>
 8006542:	4602      	mov	r2, r0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	899b      	ldrh	r3, [r3, #12]
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006560:	fb02 f200 	mul.w	r2, r2, r0
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	18ca      	adds	r2, r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006586:	2100      	movs	r1, #0
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff fe95 	bl	80062b8 <dir_sdi>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d12b      	bne.n	80065f0 <dir_alloc+0x7a>
		n = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4619      	mov	r1, r3
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff faa6 	bl	8005af4 <move_window>
 80065a8:	4603      	mov	r3, r0
 80065aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d11d      	bne.n	80065ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2be5      	cmp	r3, #229	; 0xe5
 80065ba:	d004      	beq.n	80065c6 <dir_alloc+0x50>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d107      	bne.n	80065d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <dir_alloc+0x64>
 80065d4:	e00c      	b.n	80065f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80065da:	2101      	movs	r1, #1
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff fef4 	bl	80063ca <dir_next>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0d7      	beq.n	800659c <dir_alloc+0x26>
 80065ec:	e000      	b.n	80065f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80065ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d101      	bne.n	80065fa <dir_alloc+0x84>
 80065f6:	2307      	movs	r3, #7
 80065f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	331a      	adds	r3, #26
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe ffbe 	bl	8005594 <ld_word>
 8006618:	4603      	mov	r3, r0
 800661a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d109      	bne.n	8006638 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe ffb3 	bl	8005594 <ld_word>
 800662e:	4603      	mov	r3, r0
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	331a      	adds	r3, #26
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	b292      	uxth	r2, r2
 8006656:	4611      	mov	r1, r2
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe ffd6 	bl	800560a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d109      	bne.n	800667a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f103 0214 	add.w	r2, r3, #20
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0c1b      	lsrs	r3, r3, #16
 8006670:	b29b      	uxth	r3, r3
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe ffc8 	bl	800560a <st_word>
	}
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	331a      	adds	r3, #26
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe ff7e 	bl	8005594 <ld_word>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <cmp_lfn+0x1e>
 800669e:	2300      	movs	r3, #0
 80066a0:	e059      	b.n	8006756 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066aa:	1e5a      	subs	r2, r3, #1
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80066b8:	2301      	movs	r3, #1
 80066ba:	81fb      	strh	r3, [r7, #14]
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	e033      	b.n	800672a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80066c2:	4a27      	ldr	r2, [pc, #156]	; (8006760 <cmp_lfn+0xdc>)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	4413      	add	r3, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe ff5f 	bl	8005594 <ld_word>
 80066d6:	4603      	mov	r3, r0
 80066d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80066da:	89fb      	ldrh	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2bfe      	cmp	r3, #254	; 0xfe
 80066e4:	d812      	bhi.n	800670c <cmp_lfn+0x88>
 80066e6:	89bb      	ldrh	r3, [r7, #12]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 f8fd 	bl	80088e8 <ff_wtoupper>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461c      	mov	r4, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	617a      	str	r2, [r7, #20]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f002 f8f1 	bl	80088e8 <ff_wtoupper>
 8006706:	4603      	mov	r3, r0
 8006708:	429c      	cmp	r4, r3
 800670a:	d001      	beq.n	8006710 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800670c:	2300      	movs	r3, #0
 800670e:	e022      	b.n	8006756 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006710:	89bb      	ldrh	r3, [r7, #12]
 8006712:	81fb      	strh	r3, [r7, #14]
 8006714:	e006      	b.n	8006724 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006716:	89bb      	ldrh	r3, [r7, #12]
 8006718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800671c:	4293      	cmp	r3, r2
 800671e:	d001      	beq.n	8006724 <cmp_lfn+0xa0>
 8006720:	2300      	movs	r3, #0
 8006722:	e018      	b.n	8006756 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	3301      	adds	r3, #1
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d9c8      	bls.n	80066c2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <cmp_lfn+0xd0>
 800673c:	89fb      	ldrh	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <cmp_lfn+0xd0>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <cmp_lfn+0xd0>
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006754:	2301      	movs	r3, #1
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd90      	pop	{r4, r7, pc}
 800675e:	bf00      	nop
 8006760:	08008bec 	.word	0x08008bec

08006764 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4611      	mov	r1, r2
 8006770:	461a      	mov	r2, r3
 8006772:	460b      	mov	r3, r1
 8006774:	71fb      	strb	r3, [r7, #7]
 8006776:	4613      	mov	r3, r2
 8006778:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	330d      	adds	r3, #13
 800677e:	79ba      	ldrb	r2, [r7, #6]
 8006780:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	330b      	adds	r3, #11
 8006786:	220f      	movs	r2, #15
 8006788:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	330c      	adds	r3, #12
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	331a      	adds	r3, #26
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe ff36 	bl	800560a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	1e5a      	subs	r2, r3, #1
 80067a2:	4613      	mov	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	82fb      	strh	r3, [r7, #22]
 80067b2:	2300      	movs	r3, #0
 80067b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80067b6:	8afb      	ldrh	r3, [r7, #22]
 80067b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <put_lfn+0x6c>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	61fa      	str	r2, [r7, #28]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80067d0:	4a17      	ldr	r2, [pc, #92]	; (8006830 <put_lfn+0xcc>)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	8afa      	ldrh	r2, [r7, #22]
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe ff11 	bl	800560a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80067e8:	8afb      	ldrh	r3, [r7, #22]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <put_lfn+0x90>
 80067ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	3301      	adds	r3, #1
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	d9da      	bls.n	80067b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006800:	8afb      	ldrh	r3, [r7, #22]
 8006802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006806:	4293      	cmp	r3, r2
 8006808:	d006      	beq.n	8006818 <put_lfn+0xb4>
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <put_lfn+0xbc>
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	79fa      	ldrb	r2, [r7, #7]
 8006824:	701a      	strb	r2, [r3, #0]
}
 8006826:	bf00      	nop
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	08008bec 	.word	0x08008bec

08006834 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08c      	sub	sp, #48	; 0x30
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006842:	220b      	movs	r2, #11
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7fe ff26 	bl	8005698 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d92b      	bls.n	80068aa <gen_numname+0x76>
		sr = seq;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006856:	e022      	b.n	800689e <gen_numname+0x6a>
			wc = *lfn++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006862:	2300      	movs	r3, #0
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28
 8006866:	e017      	b.n	8006898 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	005a      	lsls	r2, r3, #1
 800686c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	4413      	add	r3, r2
 8006874:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <gen_numname+0x5e>
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800688c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006890:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	3301      	adds	r3, #1
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d9e4      	bls.n	8006868 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1d8      	bne.n	8006858 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80068aa:	2307      	movs	r3, #7
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	3330      	adds	r3, #48	; 0x30
 80068ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80068be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068c2:	2b39      	cmp	r3, #57	; 0x39
 80068c4:	d904      	bls.n	80068d0 <gen_numname+0x9c>
 80068c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ca:	3307      	adds	r3, #7
 80068cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	1e5a      	subs	r2, r3, #1
 80068d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80068d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068da:	4413      	add	r3, r2
 80068dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80068e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1de      	bne.n	80068ae <gen_numname+0x7a>
	ns[i] = '~';
 80068f0:	f107 0214 	add.w	r2, r7, #20
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	4413      	add	r3, r2
 80068f8:	227e      	movs	r2, #126	; 0x7e
 80068fa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e002      	b.n	8006908 <gen_numname+0xd4>
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	3301      	adds	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	429a      	cmp	r2, r3
 800690e:	d205      	bcs.n	800691c <gen_numname+0xe8>
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	4413      	add	r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b20      	cmp	r3, #32
 800691a:	d1f2      	bne.n	8006902 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	2b07      	cmp	r3, #7
 8006920:	d808      	bhi.n	8006934 <gen_numname+0x100>
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	62ba      	str	r2, [r7, #40]	; 0x28
 8006928:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800692c:	4413      	add	r3, r2
 800692e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006932:	e000      	b.n	8006936 <gen_numname+0x102>
 8006934:	2120      	movs	r1, #32
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	627a      	str	r2, [r7, #36]	; 0x24
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	460a      	mov	r2, r1
 8006942:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b07      	cmp	r3, #7
 8006948:	d9e8      	bls.n	800691c <gen_numname+0xe8>
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	3730      	adds	r7, #48	; 0x30
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006960:	230b      	movs	r3, #11
 8006962:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	0852      	lsrs	r2, r2, #1
 800696a:	01db      	lsls	r3, r3, #7
 800696c:	4313      	orrs	r3, r2
 800696e:	b2da      	uxtb	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	6079      	str	r1, [r7, #4]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	4413      	add	r3, r2
 800697a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	3b01      	subs	r3, #1
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1ed      	bne.n	8006964 <sum_sfn+0x10>
	return sum;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fc86 	bl	80062b8 <dir_sdi>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <dir_find+0x24>
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	e0a9      	b.n	8006b0e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80069ba:	23ff      	movs	r3, #255	; 0xff
 80069bc:	753b      	strb	r3, [r7, #20]
 80069be:	7d3b      	ldrb	r3, [r7, #20]
 80069c0:	757b      	strb	r3, [r7, #21]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6938      	ldr	r0, [r7, #16]
 80069d2:	f7ff f88f 	bl	8005af4 <move_window>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 8090 	bne.w	8006b02 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069ea:	7dbb      	ldrb	r3, [r7, #22]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <dir_find+0x60>
 80069f0:	2304      	movs	r3, #4
 80069f2:	75fb      	strb	r3, [r7, #23]
 80069f4:	e08a      	b.n	8006b0c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	330b      	adds	r3, #11
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a02:	73fb      	strb	r3, [r7, #15]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7bfa      	ldrb	r2, [r7, #15]
 8006a08:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a0a:	7dbb      	ldrb	r3, [r7, #22]
 8006a0c:	2be5      	cmp	r3, #229	; 0xe5
 8006a0e:	d007      	beq.n	8006a20 <dir_find+0x8a>
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <dir_find+0x98>
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b0f      	cmp	r3, #15
 8006a1e:	d006      	beq.n	8006a2e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a20:	23ff      	movs	r3, #255	; 0xff
 8006a22:	757b      	strb	r3, [r7, #21]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a2c:	e05e      	b.n	8006aec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b0f      	cmp	r3, #15
 8006a32:	d136      	bne.n	8006aa2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d154      	bne.n	8006aec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006a42:	7dbb      	ldrb	r3, [r7, #22]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006a54:	7dbb      	ldrb	r3, [r7, #22]
 8006a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5a:	75bb      	strb	r3, [r7, #22]
 8006a5c:	7dbb      	ldrb	r3, [r7, #22]
 8006a5e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a68:	7dba      	ldrb	r2, [r7, #22]
 8006a6a:	7d7b      	ldrb	r3, [r7, #21]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d115      	bne.n	8006a9c <dir_find+0x106>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	330d      	adds	r3, #13
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	7d3a      	ldrb	r2, [r7, #20]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d10e      	bne.n	8006a9c <dir_find+0x106>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	4619      	mov	r1, r3
 8006a88:	4610      	mov	r0, r2
 8006a8a:	f7ff fdfb 	bl	8006684 <cmp_lfn>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <dir_find+0x106>
 8006a94:	7d7b      	ldrb	r3, [r7, #21]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	e000      	b.n	8006a9e <dir_find+0x108>
 8006a9c:	23ff      	movs	r3, #255	; 0xff
 8006a9e:	757b      	strb	r3, [r7, #21]
 8006aa0:	e024      	b.n	8006aec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006aa2:	7d7b      	ldrb	r3, [r7, #21]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <dir_find+0x126>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ff51 	bl	8006954 <sum_sfn>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	7d3b      	ldrb	r3, [r7, #20]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d024      	beq.n	8006b06 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <dir_find+0x14a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a18      	ldr	r0, [r3, #32]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3324      	adds	r3, #36	; 0x24
 8006ad2:	220b      	movs	r2, #11
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f7fe fe1b 	bl	8005710 <mem_cmp>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d014      	beq.n	8006b0a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ae0:	23ff      	movs	r3, #255	; 0xff
 8006ae2:	757b      	strb	r3, [r7, #21]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fc6b 	bl	80063ca <dir_next>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f43f af65 	beq.w	80069ca <dir_find+0x34>
 8006b00:	e004      	b.n	8006b0c <dir_find+0x176>
		if (res != FR_OK) break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b0a:	bf00      	nop

	return res;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b2c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <dir_register+0x20>
 8006b34:	2306      	movs	r3, #6
 8006b36:	e0e0      	b.n	8006cfa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006b38:	2300      	movs	r3, #0
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3c:	e002      	b.n	8006b44 <dir_register+0x2c>
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	3301      	adds	r3, #1
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f4      	bne.n	8006b3e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006b5a:	f107 030c 	add.w	r3, r7, #12
 8006b5e:	220c      	movs	r2, #12
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fd99 	bl	8005698 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d032      	beq.n	8006bd6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006b78:	2301      	movs	r3, #1
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7c:	e016      	b.n	8006bac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	f107 010c 	add.w	r1, r7, #12
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f7ff fe51 	bl	8006834 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff feff 	bl	8006996 <dir_find>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	3301      	adds	r3, #1
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b63      	cmp	r3, #99	; 0x63
 8006bb0:	d9e5      	bls.n	8006b7e <dir_register+0x66>
 8006bb2:	e000      	b.n	8006bb6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006bb4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2b64      	cmp	r3, #100	; 0x64
 8006bba:	d101      	bne.n	8006bc0 <dir_register+0xa8>
 8006bbc:	2307      	movs	r3, #7
 8006bbe:	e09c      	b.n	8006cfa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d002      	beq.n	8006bce <dir_register+0xb6>
 8006bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bcc:	e095      	b.n	8006cfa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006bce:	7dfa      	ldrb	r2, [r7, #23]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <dir_register+0xd8>
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	330c      	adds	r3, #12
 8006be4:	4a47      	ldr	r2, [pc, #284]	; (8006d04 <dir_register+0x1ec>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	089b      	lsrs	r3, r3, #2
 8006bec:	3301      	adds	r3, #1
 8006bee:	e000      	b.n	8006bf2 <dir_register+0xda>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006bf4:	6a39      	ldr	r1, [r7, #32]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fcbd 	bl	8006576 <dir_alloc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d148      	bne.n	8006c9c <dir_register+0x184>
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	623b      	str	r3, [r7, #32]
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d042      	beq.n	8006c9c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	015b      	lsls	r3, r3, #5
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fb48 	bl	80062b8 <dir_sdi>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d132      	bne.n	8006c9c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3324      	adds	r3, #36	; 0x24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fe8a 	bl	8006954 <sum_sfn>
 8006c40:	4603      	mov	r3, r0
 8006c42:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	69f8      	ldr	r0, [r7, #28]
 8006c4c:	f7fe ff52 	bl	8005af4 <move_window>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d11d      	bne.n	8006c9a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a19      	ldr	r1, [r3, #32]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	7efb      	ldrb	r3, [r7, #27]
 8006c6c:	f7ff fd7a 	bl	8006764 <put_lfn>
				fs->wflag = 1;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2201      	movs	r2, #1
 8006c74:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006c76:	2100      	movs	r1, #0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fba6 	bl	80063ca <dir_next>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <dir_register+0x184>
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	623b      	str	r3, [r7, #32]
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1d5      	bne.n	8006c44 <dir_register+0x12c>
 8006c98:	e000      	b.n	8006c9c <dir_register+0x184>
				if (res != FR_OK) break;
 8006c9a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d128      	bne.n	8006cf6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	69f8      	ldr	r0, [r7, #28]
 8006cac:	f7fe ff22 	bl	8005af4 <move_window>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d11b      	bne.n	8006cf6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fd07 	bl	80056da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a18      	ldr	r0, [r3, #32]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3324      	adds	r3, #36	; 0x24
 8006cd4:	220b      	movs	r2, #11
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f7fe fcde 	bl	8005698 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f002 0218 	and.w	r2, r2, #24
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	4ec4ec4f 	.word	0x4ec4ec4f

08006d08 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80c9 	beq.w	8006eba <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d30:	d032      	beq.n	8006d98 <get_fileinfo+0x90>
			i = j = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006d3a:	e01b      	b.n	8006d74 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fd95 	bl	8008870 <ff_convert>
 8006d46:	4603      	mov	r3, r0
 8006d48:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006d4a:	89fb      	ldrh	r3, [r7, #14]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <get_fileinfo+0x4e>
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e01a      	b.n	8006d8c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2bfe      	cmp	r3, #254	; 0xfe
 8006d5a:	d902      	bls.n	8006d62 <get_fileinfo+0x5a>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	e014      	b.n	8006d8c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	89fa      	ldrh	r2, [r7, #14]
 8006d6a:	b2d1      	uxtb	r1, r2
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	460a      	mov	r2, r1
 8006d72:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	61b9      	str	r1, [r7, #24]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	81fb      	strh	r3, [r7, #14]
 8006d86:	89fb      	ldrh	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1d7      	bne.n	8006d3c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	3316      	adds	r3, #22
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	3316      	adds	r3, #22
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006dac:	e04c      	b.n	8006e48 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	61f9      	str	r1, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d100      	bne.n	8006dc6 <get_fileinfo+0xbe>
 8006dc4:	e040      	b.n	8006e48 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d101      	bne.n	8006dd0 <get_fileinfo+0xc8>
 8006dcc:	23e5      	movs	r3, #229	; 0xe5
 8006dce:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b09      	cmp	r3, #9
 8006dd4:	d10f      	bne.n	8006df6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <get_fileinfo+0xe0>
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	3316      	adds	r3, #22
 8006de4:	222e      	movs	r2, #46	; 0x2e
 8006de6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	61ba      	str	r2, [r7, #24]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4413      	add	r3, r2
 8006df2:	222e      	movs	r2, #46	; 0x2e
 8006df4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3309      	adds	r3, #9
 8006dfe:	7dfa      	ldrb	r2, [r7, #23]
 8006e00:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006e02:	89bb      	ldrh	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11c      	bne.n	8006e42 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d913      	bls.n	8006e36 <get_fileinfo+0x12e>
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b5a      	cmp	r3, #90	; 0x5a
 8006e12:	d810      	bhi.n	8006e36 <get_fileinfo+0x12e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d901      	bls.n	8006e28 <get_fileinfo+0x120>
 8006e24:	2310      	movs	r3, #16
 8006e26:	e000      	b.n	8006e2a <get_fileinfo+0x122>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	3320      	adds	r3, #32
 8006e34:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3316      	adds	r3, #22
 8006e3e:	7dfa      	ldrb	r2, [r7, #23]
 8006e40:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b0a      	cmp	r3, #10
 8006e4c:	d9af      	bls.n	8006dae <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006e4e:	89bb      	ldrh	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3316      	adds	r3, #22
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	330c      	adds	r3, #12
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <get_fileinfo+0x168>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	4413      	add	r3, r2
 8006e76:	3309      	adds	r3, #9
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	7ada      	ldrb	r2, [r3, #11]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	331c      	adds	r3, #28
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe fb99 	bl	80055c4 <ld_dword>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	3316      	adds	r3, #22
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fb90 	bl	80055c4 <ld_dword>
 8006ea4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	80da      	strh	r2, [r3, #6]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	809a      	strh	r2, [r3, #4]
 8006eb8:	e000      	b.n	8006ebc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006eba:	bf00      	nop
}
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	61ba      	str	r2, [r7, #24]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef4:	2b1f      	cmp	r3, #31
 8006ef6:	d940      	bls.n	8006f7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efa:	2b2f      	cmp	r3, #47	; 0x2f
 8006efc:	d006      	beq.n	8006f0c <create_name+0x48>
 8006efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f00:	2b5c      	cmp	r3, #92	; 0x5c
 8006f02:	d110      	bne.n	8006f26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f04:	e002      	b.n	8006f0c <create_name+0x48>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	4413      	add	r3, r2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b2f      	cmp	r3, #47	; 0x2f
 8006f16:	d0f6      	beq.n	8006f06 <create_name+0x42>
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b5c      	cmp	r3, #92	; 0x5c
 8006f22:	d0f0      	beq.n	8006f06 <create_name+0x42>
			break;
 8006f24:	e02a      	b.n	8006f7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2bfe      	cmp	r3, #254	; 0xfe
 8006f2a:	d901      	bls.n	8006f30 <create_name+0x6c>
 8006f2c:	2306      	movs	r3, #6
 8006f2e:	e177      	b.n	8007220 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fc98 	bl	8008870 <ff_convert>
 8006f40:	4603      	mov	r3, r0
 8006f42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <create_name+0x8a>
 8006f4a:	2306      	movs	r3, #6
 8006f4c:	e168      	b.n	8007220 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f50:	2b7f      	cmp	r3, #127	; 0x7f
 8006f52:	d809      	bhi.n	8006f68 <create_name+0xa4>
 8006f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f56:	4619      	mov	r1, r3
 8006f58:	48b3      	ldr	r0, [pc, #716]	; (8007228 <create_name+0x364>)
 8006f5a:	f7fe fc00 	bl	800575e <chk_chr>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <create_name+0xa4>
 8006f64:	2306      	movs	r3, #6
 8006f66:	e15b      	b.n	8007220 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	617a      	str	r2, [r7, #20]
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f78:	e7b4      	b.n	8006ee4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	441a      	add	r2, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f88:	2b1f      	cmp	r3, #31
 8006f8a:	d801      	bhi.n	8006f90 <create_name+0xcc>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	e000      	b.n	8006f92 <create_name+0xce>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f96:	e011      	b.n	8006fbc <create_name+0xf8>
		w = lfn[di - 1];
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d002      	beq.n	8006fb6 <create_name+0xf2>
 8006fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb4:	d106      	bne.n	8006fc4 <create_name+0x100>
		di--;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1ea      	bne.n	8006f98 <create_name+0xd4>
 8006fc2:	e000      	b.n	8006fc6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006fc4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <create_name+0x118>
 8006fd8:	2306      	movs	r3, #6
 8006fda:	e121      	b.n	8007220 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	220b      	movs	r2, #11
 8006fe2:	2120      	movs	r1, #32
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fb78 	bl	80056da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e002      	b.n	8006ff6 <create_name+0x132>
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	2b20      	cmp	r3, #32
 8007002:	d0f5      	beq.n	8006ff0 <create_name+0x12c>
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	2b2e      	cmp	r3, #46	; 0x2e
 8007010:	d0ee      	beq.n	8006ff0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <create_name+0x168>
 8007018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800701c:	f043 0303 	orr.w	r3, r3, #3
 8007020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007024:	e002      	b.n	800702c <create_name+0x168>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3b01      	subs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <create_name+0x182>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007038:	3b01      	subs	r3, #1
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	2b2e      	cmp	r3, #46	; 0x2e
 8007044:	d1ef      	bne.n	8007026 <create_name+0x162>

	i = b = 0; ni = 8;
 8007046:	2300      	movs	r3, #0
 8007048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800704c:	2300      	movs	r3, #0
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	2308      	movs	r3, #8
 8007052:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	61ba      	str	r2, [r7, #24]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8090 	beq.w	800718c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800706c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706e:	2b20      	cmp	r3, #32
 8007070:	d006      	beq.n	8007080 <create_name+0x1bc>
 8007072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007074:	2b2e      	cmp	r3, #46	; 0x2e
 8007076:	d10a      	bne.n	800708e <create_name+0x1ca>
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	429a      	cmp	r2, r3
 800707e:	d006      	beq.n	800708e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007084:	f043 0303 	orr.w	r3, r3, #3
 8007088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800708c:	e07d      	b.n	800718a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	429a      	cmp	r2, r3
 8007094:	d203      	bcs.n	800709e <create_name+0x1da>
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	429a      	cmp	r2, r3
 800709c:	d123      	bne.n	80070e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	2b0b      	cmp	r3, #11
 80070a2:	d106      	bne.n	80070b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a8:	f043 0303 	orr.w	r3, r3, #3
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070b0:	e06f      	b.n	8007192 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d005      	beq.n	80070c6 <create_name+0x202>
 80070ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070be:	f043 0303 	orr.w	r3, r3, #3
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d860      	bhi.n	8007190 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	2308      	movs	r3, #8
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	230b      	movs	r3, #11
 80070d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80070da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070e4:	e051      	b.n	800718a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80070e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ea:	d914      	bls.n	8007116 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80070ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 fbbd 	bl	8008870 <ff_convert>
 80070f6:	4603      	mov	r3, r0
 80070f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80070fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <create_name+0x246>
 8007100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007102:	3b80      	subs	r3, #128	; 0x80
 8007104:	4a49      	ldr	r2, [pc, #292]	; (800722c <create_name+0x368>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800710a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710e:	f043 0302 	orr.w	r3, r3, #2
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <create_name+0x268>
 800711c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711e:	4619      	mov	r1, r3
 8007120:	4843      	ldr	r0, [pc, #268]	; (8007230 <create_name+0x36c>)
 8007122:	f7fe fb1c 	bl	800575e <chk_chr>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800712c:	235f      	movs	r3, #95	; 0x5f
 800712e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007134:	f043 0303 	orr.w	r3, r3, #3
 8007138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800713c:	e01b      	b.n	8007176 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800713e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d909      	bls.n	8007158 <create_name+0x294>
 8007144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007146:	2b5a      	cmp	r3, #90	; 0x5a
 8007148:	d806      	bhi.n	8007158 <create_name+0x294>
					b |= 2;
 800714a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800714e:	f043 0302 	orr.w	r3, r3, #2
 8007152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007156:	e00e      	b.n	8007176 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800715a:	2b60      	cmp	r3, #96	; 0x60
 800715c:	d90b      	bls.n	8007176 <create_name+0x2b2>
 800715e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007160:	2b7a      	cmp	r3, #122	; 0x7a
 8007162:	d808      	bhi.n	8007176 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007172:	3b20      	subs	r3, #32
 8007174:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	623a      	str	r2, [r7, #32]
 800717c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800717e:	b2d1      	uxtb	r1, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	460a      	mov	r2, r1
 8007186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800718a:	e763      	b.n	8007054 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007190:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007198:	2be5      	cmp	r3, #229	; 0xe5
 800719a:	d103      	bne.n	80071a4 <create_name+0x2e0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2205      	movs	r2, #5
 80071a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d104      	bne.n	80071b4 <create_name+0x2f0>
 80071aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80071b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071b8:	f003 030c 	and.w	r3, r3, #12
 80071bc:	2b0c      	cmp	r3, #12
 80071be:	d005      	beq.n	80071cc <create_name+0x308>
 80071c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d105      	bne.n	80071d8 <create_name+0x314>
 80071cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d117      	bne.n	8007214 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80071e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d105      	bne.n	80071fc <create_name+0x338>
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f4:	f043 0310 	orr.w	r3, r3, #16
 80071f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80071fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007200:	f003 030c 	and.w	r3, r3, #12
 8007204:	2b04      	cmp	r3, #4
 8007206:	d105      	bne.n	8007214 <create_name+0x350>
 8007208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800721a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800721e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007220:	4618      	mov	r0, r3
 8007222:	3728      	adds	r7, #40	; 0x28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	08008ac8 	.word	0x08008ac8
 800722c:	08008b6c 	.word	0x08008b6c
 8007230:	08008ad4 	.word	0x08008ad4

08007234 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007248:	e002      	b.n	8007250 <follow_path+0x1c>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b2f      	cmp	r3, #47	; 0x2f
 8007256:	d0f8      	beq.n	800724a <follow_path+0x16>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b5c      	cmp	r3, #92	; 0x5c
 800725e:	d0f4      	beq.n	800724a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b1f      	cmp	r3, #31
 800726c:	d80a      	bhi.n	8007284 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff f81d 	bl	80062b8 <dir_sdi>
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]
 8007282:	e048      	b.n	8007316 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007284:	463b      	mov	r3, r7
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fe1b 	bl	8006ec4 <create_name>
 800728e:	4603      	mov	r3, r0
 8007290:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d139      	bne.n	800730c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fb7c 	bl	8006996 <dir_find>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d12c      	bne.n	8007310 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d127      	bne.n	8007310 <follow_path+0xdc>
 80072c0:	2305      	movs	r3, #5
 80072c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80072c4:	e024      	b.n	8007310 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d121      	bne.n	8007314 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	799b      	ldrb	r3, [r3, #6]
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072dc:	2305      	movs	r3, #5
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	e019      	b.n	8007316 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	8992      	ldrh	r2, [r2, #12]
 80072f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80072f4:	fb02 f200 	mul.w	r2, r2, r0
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	440b      	add	r3, r1
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff f980 	bl	8006604 <ld_clust>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800730a:	e7bb      	b.n	8007284 <follow_path+0x50>
			if (res != FR_OK) break;
 800730c:	bf00      	nop
 800730e:	e002      	b.n	8007316 <follow_path+0xe2>
				break;
 8007310:	bf00      	nop
 8007312:	e000      	b.n	8007316 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007314:	bf00      	nop
			}
		}
	}

	return res;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800732c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d031      	beq.n	800739a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e002      	b.n	8007344 <get_ldnumber+0x24>
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	3301      	adds	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b1f      	cmp	r3, #31
 800734a:	d903      	bls.n	8007354 <get_ldnumber+0x34>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b3a      	cmp	r3, #58	; 0x3a
 8007352:	d1f4      	bne.n	800733e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b3a      	cmp	r3, #58	; 0x3a
 800735a:	d11c      	bne.n	8007396 <get_ldnumber+0x76>
			tp = *path;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	60fa      	str	r2, [r7, #12]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	3b30      	subs	r3, #48	; 0x30
 800736c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b09      	cmp	r3, #9
 8007372:	d80e      	bhi.n	8007392 <get_ldnumber+0x72>
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	429a      	cmp	r2, r3
 800737a:	d10a      	bne.n	8007392 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <get_ldnumber+0x72>
					vol = (int)i;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	3301      	adds	r3, #1
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	e002      	b.n	800739c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800739a:	693b      	ldr	r3, [r7, #16]
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	70da      	strb	r2, [r3, #3]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073be:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe fb96 	bl	8005af4 <move_window>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <check_fs+0x2a>
 80073ce:	2304      	movs	r3, #4
 80073d0:	e038      	b.n	8007444 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3338      	adds	r3, #56	; 0x38
 80073d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe f8da 	bl	8005594 <ld_word>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <check_fs+0x48>
 80073ec:	2303      	movs	r3, #3
 80073ee:	e029      	b.n	8007444 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f6:	2be9      	cmp	r3, #233	; 0xe9
 80073f8:	d009      	beq.n	800740e <check_fs+0x66>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007400:	2beb      	cmp	r3, #235	; 0xeb
 8007402:	d11e      	bne.n	8007442 <check_fs+0x9a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800740a:	2b90      	cmp	r3, #144	; 0x90
 800740c:	d119      	bne.n	8007442 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3338      	adds	r3, #56	; 0x38
 8007412:	3336      	adds	r3, #54	; 0x36
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe f8d5 	bl	80055c4 <ld_dword>
 800741a:	4603      	mov	r3, r0
 800741c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007420:	4a0a      	ldr	r2, [pc, #40]	; (800744c <check_fs+0xa4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <check_fs+0x82>
 8007426:	2300      	movs	r3, #0
 8007428:	e00c      	b.n	8007444 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3338      	adds	r3, #56	; 0x38
 800742e:	3352      	adds	r3, #82	; 0x52
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe f8c7 	bl	80055c4 <ld_dword>
 8007436:	4603      	mov	r3, r0
 8007438:	4a05      	ldr	r2, [pc, #20]	; (8007450 <check_fs+0xa8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <check_fs+0x9a>
 800743e:	2300      	movs	r3, #0
 8007440:	e000      	b.n	8007444 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007442:	2302      	movs	r3, #2
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	00544146 	.word	0x00544146
 8007450:	33544146 	.word	0x33544146

08007454 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b096      	sub	sp, #88	; 0x58
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff ff59 	bl	8007320 <get_ldnumber>
 800746e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	da01      	bge.n	800747a <find_volume+0x26>
 8007476:	230b      	movs	r3, #11
 8007478:	e268      	b.n	800794c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800747a:	4ab0      	ldr	r2, [pc, #704]	; (800773c <find_volume+0x2e8>)
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <find_volume+0x3a>
 800748a:	230c      	movs	r3, #12
 800748c:	e25e      	b.n	800794c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007492:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01a      	beq.n	80074da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fd ffd5 	bl	8005458 <disk_status>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10c      	bne.n	80074da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <find_volume+0x82>
 80074c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074d2:	230a      	movs	r3, #10
 80074d4:	e23a      	b.n	800794c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80074d6:	2300      	movs	r3, #0
 80074d8:	e238      	b.n	800794c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd ffcd 	bl	800548c <disk_initialize>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80074f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007504:	2303      	movs	r3, #3
 8007506:	e221      	b.n	800794c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <find_volume+0xca>
 800750e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800751a:	230a      	movs	r3, #10
 800751c:	e216      	b.n	800794c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	7858      	ldrb	r0, [r3, #1]
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	330c      	adds	r3, #12
 8007526:	461a      	mov	r2, r3
 8007528:	2102      	movs	r1, #2
 800752a:	f7fe f815 	bl	8005558 <disk_ioctl>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <find_volume+0xe4>
 8007534:	2301      	movs	r3, #1
 8007536:	e209      	b.n	800794c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	899b      	ldrh	r3, [r3, #12]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007540:	d80d      	bhi.n	800755e <find_volume+0x10a>
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	899b      	ldrh	r3, [r3, #12]
 8007546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754a:	d308      	bcc.n	800755e <find_volume+0x10a>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	899b      	ldrh	r3, [r3, #12]
 8007550:	461a      	mov	r2, r3
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	899b      	ldrh	r3, [r3, #12]
 8007556:	3b01      	subs	r3, #1
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <find_volume+0x10e>
 800755e:	2301      	movs	r3, #1
 8007560:	e1f4      	b.n	800794c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800756a:	f7ff ff1d 	bl	80073a8 <check_fs>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007578:	2b02      	cmp	r3, #2
 800757a:	d14b      	bne.n	8007614 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800757c:	2300      	movs	r3, #0
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	e01f      	b.n	80075c2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007590:	4413      	add	r3, r2
 8007592:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	3304      	adds	r3, #4
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <find_volume+0x158>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	3308      	adds	r3, #8
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe f80e 	bl	80055c4 <ld_dword>
 80075a8:	4602      	mov	r2, r0
 80075aa:	e000      	b.n	80075ae <find_volume+0x15a>
 80075ac:	2200      	movs	r2, #0
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80075b6:	440b      	add	r3, r1
 80075b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075be:	3301      	adds	r3, #1
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
 80075c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d9dc      	bls.n	8007582 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80075c8:	2300      	movs	r3, #0
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <find_volume+0x184>
 80075d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d4:	3b01      	subs	r3, #1
 80075d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80075e0:	4413      	add	r3, r2
 80075e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <find_volume+0x1a6>
 80075ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075f2:	f7ff fed9 	bl	80073a8 <check_fs>
 80075f6:	4603      	mov	r3, r0
 80075f8:	e000      	b.n	80075fc <find_volume+0x1a8>
 80075fa:	2303      	movs	r3, #3
 80075fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007604:	2b01      	cmp	r3, #1
 8007606:	d905      	bls.n	8007614 <find_volume+0x1c0>
 8007608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760a:	3301      	adds	r3, #1
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007610:	2b03      	cmp	r3, #3
 8007612:	d9e1      	bls.n	80075d8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007618:	2b04      	cmp	r3, #4
 800761a:	d101      	bne.n	8007620 <find_volume+0x1cc>
 800761c:	2301      	movs	r3, #1
 800761e:	e195      	b.n	800794c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007624:	2b01      	cmp	r3, #1
 8007626:	d901      	bls.n	800762c <find_volume+0x1d8>
 8007628:	230d      	movs	r3, #13
 800762a:	e18f      	b.n	800794c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	3338      	adds	r3, #56	; 0x38
 8007630:	330b      	adds	r3, #11
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd ffae 	bl	8005594 <ld_word>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	899b      	ldrh	r3, [r3, #12]
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <find_volume+0x1f4>
 8007644:	230d      	movs	r3, #13
 8007646:	e181      	b.n	800794c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	3338      	adds	r3, #56	; 0x38
 800764c:	3316      	adds	r3, #22
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd ffa0 	bl	8005594 <ld_word>
 8007654:	4603      	mov	r3, r0
 8007656:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <find_volume+0x218>
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	3338      	adds	r3, #56	; 0x38
 8007662:	3324      	adds	r3, #36	; 0x24
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd ffad 	bl	80055c4 <ld_dword>
 800766a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007670:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d005      	beq.n	8007690 <find_volume+0x23c>
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d001      	beq.n	8007690 <find_volume+0x23c>
 800768c:	230d      	movs	r3, #13
 800768e:	e15d      	b.n	800794c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	789b      	ldrb	r3, [r3, #2]
 8007694:	461a      	mov	r2, r3
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	895b      	ldrh	r3, [r3, #10]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <find_volume+0x270>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	895b      	ldrh	r3, [r3, #10]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	895b      	ldrh	r3, [r3, #10]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <find_volume+0x274>
 80076c4:	230d      	movs	r3, #13
 80076c6:	e141      	b.n	800794c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	3338      	adds	r3, #56	; 0x38
 80076cc:	3311      	adds	r3, #17
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fd ff60 	bl	8005594 <ld_word>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	891b      	ldrh	r3, [r3, #8]
 80076e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e2:	8992      	ldrh	r2, [r2, #12]
 80076e4:	0952      	lsrs	r2, r2, #5
 80076e6:	b292      	uxth	r2, r2
 80076e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ec:	fb02 f201 	mul.w	r2, r2, r1
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <find_volume+0x2a8>
 80076f8:	230d      	movs	r3, #13
 80076fa:	e127      	b.n	800794c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	3338      	adds	r3, #56	; 0x38
 8007700:	3313      	adds	r3, #19
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd ff46 	bl	8005594 <ld_word>
 8007708:	4603      	mov	r3, r0
 800770a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800770c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <find_volume+0x2cc>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	3338      	adds	r3, #56	; 0x38
 8007716:	3320      	adds	r3, #32
 8007718:	4618      	mov	r0, r3
 800771a:	f7fd ff53 	bl	80055c4 <ld_dword>
 800771e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	3338      	adds	r3, #56	; 0x38
 8007724:	330e      	adds	r3, #14
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd ff34 	bl	8005594 <ld_word>
 800772c:	4603      	mov	r3, r0
 800772e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <find_volume+0x2ec>
 8007736:	230d      	movs	r3, #13
 8007738:	e108      	b.n	800794c <find_volume+0x4f8>
 800773a:	bf00      	nop
 800773c:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007740:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007744:	4413      	add	r3, r2
 8007746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007748:	8911      	ldrh	r1, [r2, #8]
 800774a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800774c:	8992      	ldrh	r2, [r2, #12]
 800774e:	0952      	lsrs	r2, r2, #5
 8007750:	b292      	uxth	r2, r2
 8007752:	fbb1 f2f2 	udiv	r2, r1, r2
 8007756:	b292      	uxth	r2, r2
 8007758:	4413      	add	r3, r2
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800775c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	429a      	cmp	r2, r3
 8007762:	d201      	bcs.n	8007768 <find_volume+0x314>
 8007764:	230d      	movs	r3, #13
 8007766:	e0f1      	b.n	800794c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007770:	8952      	ldrh	r2, [r2, #10]
 8007772:	fbb3 f3f2 	udiv	r3, r3, r2
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <find_volume+0x32e>
 800777e:	230d      	movs	r3, #13
 8007780:	e0e4      	b.n	800794c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8007782:	2303      	movs	r3, #3
 8007784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800778e:	4293      	cmp	r3, r2
 8007790:	d802      	bhi.n	8007798 <find_volume+0x344>
 8007792:	2302      	movs	r3, #2
 8007794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800779e:	4293      	cmp	r3, r2
 80077a0:	d802      	bhi.n	80077a8 <find_volume+0x354>
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80077b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ba:	441a      	add	r2, r3
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80077c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	441a      	add	r2, r3
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80077ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d11e      	bne.n	8007810 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	3338      	adds	r3, #56	; 0x38
 80077d6:	332a      	adds	r3, #42	; 0x2a
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd fedb 	bl	8005594 <ld_word>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <find_volume+0x394>
 80077e4:	230d      	movs	r3, #13
 80077e6:	e0b1      	b.n	800794c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	891b      	ldrh	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <find_volume+0x3a0>
 80077f0:	230d      	movs	r3, #13
 80077f2:	e0ab      	b.n	800794c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	3338      	adds	r3, #56	; 0x38
 80077f8:	332c      	adds	r3, #44	; 0x2c
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fd fee2 	bl	80055c4 <ld_dword>
 8007800:	4602      	mov	r2, r0
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	647b      	str	r3, [r7, #68]	; 0x44
 800780e:	e01f      	b.n	8007850 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	891b      	ldrh	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <find_volume+0x3c8>
 8007818:	230d      	movs	r3, #13
 800781a:	e097      	b.n	800794c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007822:	441a      	add	r2, r3
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800782c:	2b02      	cmp	r3, #2
 800782e:	d103      	bne.n	8007838 <find_volume+0x3e4>
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	e00a      	b.n	800784e <find_volume+0x3fa>
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	4613      	mov	r3, r2
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	4413      	add	r3, r2
 8007842:	085a      	lsrs	r2, r3, #1
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800784e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	899b      	ldrh	r3, [r3, #12]
 8007858:	4619      	mov	r1, r3
 800785a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785c:	440b      	add	r3, r1
 800785e:	3b01      	subs	r3, #1
 8007860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007862:	8989      	ldrh	r1, [r1, #12]
 8007864:	fbb3 f3f1 	udiv	r3, r3, r1
 8007868:	429a      	cmp	r2, r3
 800786a:	d201      	bcs.n	8007870 <find_volume+0x41c>
 800786c:	230d      	movs	r3, #13
 800786e:	e06d      	b.n	800794c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007876:	619a      	str	r2, [r3, #24]
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788a:	2b03      	cmp	r3, #3
 800788c:	d149      	bne.n	8007922 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	3338      	adds	r3, #56	; 0x38
 8007892:	3330      	adds	r3, #48	; 0x30
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd fe7d 	bl	8005594 <ld_word>
 800789a:	4603      	mov	r3, r0
 800789c:	2b01      	cmp	r3, #1
 800789e:	d140      	bne.n	8007922 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80078a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a2:	3301      	adds	r3, #1
 80078a4:	4619      	mov	r1, r3
 80078a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078a8:	f7fe f924 	bl	8005af4 <move_window>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d137      	bne.n	8007922 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2200      	movs	r2, #0
 80078b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	3338      	adds	r3, #56	; 0x38
 80078bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fd fe67 	bl	8005594 <ld_word>
 80078c6:	4603      	mov	r3, r0
 80078c8:	461a      	mov	r2, r3
 80078ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d127      	bne.n	8007922 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	3338      	adds	r3, #56	; 0x38
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd fe74 	bl	80055c4 <ld_dword>
 80078dc:	4603      	mov	r3, r0
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <find_volume+0x500>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d11e      	bne.n	8007922 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	3338      	adds	r3, #56	; 0x38
 80078e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd fe69 	bl	80055c4 <ld_dword>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4a18      	ldr	r2, [pc, #96]	; (8007958 <find_volume+0x504>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d113      	bne.n	8007922 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	3338      	adds	r3, #56	; 0x38
 80078fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007902:	4618      	mov	r0, r3
 8007904:	f7fd fe5e 	bl	80055c4 <ld_dword>
 8007908:	4602      	mov	r2, r0
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	3338      	adds	r3, #56	; 0x38
 8007912:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fe54 	bl	80055c4 <ld_dword>
 800791c:	4602      	mov	r2, r0
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007928:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <find_volume+0x508>)
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <find_volume+0x508>)
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <find_volume+0x508>)
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	4a07      	ldr	r2, [pc, #28]	; (8007960 <find_volume+0x50c>)
 8007942:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007946:	f7fe f86d 	bl	8005a24 <clear_lock>
#endif
	return FR_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3758      	adds	r7, #88	; 0x58
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	41615252 	.word	0x41615252
 8007958:	61417272 	.word	0x61417272
 800795c:	2000002c 	.word	0x2000002c
 8007960:	20000050 	.word	0x20000050

08007964 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800796e:	2309      	movs	r3, #9
 8007970:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01c      	beq.n	80079b2 <validate+0x4e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d018      	beq.n	80079b2 <validate+0x4e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d013      	beq.n	80079b2 <validate+0x4e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	889a      	ldrh	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	429a      	cmp	r2, r3
 8007996:	d10c      	bne.n	80079b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd fd5a 	bl	8005458 <disk_status>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <validate+0x4e>
			res = FR_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <validate+0x5a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	e000      	b.n	80079c0 <validate+0x5c>
 80079be:	2300      	movs	r3, #0
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	6013      	str	r3, [r2, #0]
	return res;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80079e2:	f107 0310 	add.w	r3, r7, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fc9a 	bl	8007320 <get_ldnumber>
 80079ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da01      	bge.n	80079f8 <f_mount+0x28>
 80079f4:	230b      	movs	r3, #11
 80079f6:	e02b      	b.n	8007a50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <f_mount+0x88>)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007a08:	69b8      	ldr	r0, [r7, #24]
 8007a0a:	f7fe f80b 	bl	8005a24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	490d      	ldr	r1, [pc, #52]	; (8007a58 <f_mount+0x88>)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <f_mount+0x66>
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d001      	beq.n	8007a3a <f_mount+0x6a>
 8007a36:	2300      	movs	r3, #0
 8007a38:	e00a      	b.n	8007a50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a3a:	f107 010c 	add.w	r1, r7, #12
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	2200      	movs	r2, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fd05 	bl	8007454 <find_volume>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000028 	.word	0x20000028

08007a5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b09a      	sub	sp, #104	; 0x68
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <f_open+0x18>
 8007a70:	2309      	movs	r3, #9
 8007a72:	e1bb      	b.n	8007dec <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a7c:	79fa      	ldrb	r2, [r7, #7]
 8007a7e:	f107 0114 	add.w	r1, r7, #20
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fce4 	bl	8007454 <find_volume>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007a92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 819f 	bne.w	8007dda <f_open+0x37e>
		dj.obj.fs = fs;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fbc3 	bl	8007234 <follow_path>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d11a      	bne.n	8007af2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007abc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da03      	bge.n	8007ace <f_open+0x72>
				res = FR_INVALID_NAME;
 8007ac6:	2306      	movs	r3, #6
 8007ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007acc:	e011      	b.n	8007af2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f107 0318 	add.w	r3, r7, #24
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fe54 	bl	8005794 <chk_lock>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	f003 031c 	and.w	r3, r3, #28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d07f      	beq.n	8007bfc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007afc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d017      	beq.n	8007b34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d10e      	bne.n	8007b2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b0c:	f7fd fe9e 	bl	800584c <enq_lock>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <f_open+0xc8>
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fffc 	bl	8006b18 <dir_register>
 8007b20:	4603      	mov	r3, r0
 8007b22:	e000      	b.n	8007b26 <f_open+0xca>
 8007b24:	2312      	movs	r3, #18
 8007b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	71fb      	strb	r3, [r7, #7]
 8007b32:	e010      	b.n	8007b56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b34:	7fbb      	ldrb	r3, [r7, #30]
 8007b36:	f003 0311 	and.w	r3, r3, #17
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <f_open+0xea>
					res = FR_DENIED;
 8007b3e:	2307      	movs	r3, #7
 8007b40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b44:	e007      	b.n	8007b56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <f_open+0xfa>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d168      	bne.n	8007c30 <f_open+0x1d4>
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d063      	beq.n	8007c30 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007b68:	f7fd fabe 	bl	80050e8 <get_fattime>
 8007b6c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	330e      	adds	r3, #14
 8007b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fd fd63 	bl	8005640 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	3316      	adds	r3, #22
 8007b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fd fd5d 	bl	8005640 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	330b      	adds	r3, #11
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe fd35 	bl	8006604 <ld_clust>
 8007b9a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fd4d 	bl	8006642 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	331c      	adds	r3, #28
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fd fd46 	bl	8005640 <st_dword>
					fs->wflag = 1;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d037      	beq.n	8007c30 <f_open+0x1d4>
						dw = fs->winsect;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007bc6:	f107 0318 	add.w	r3, r7, #24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fa3d 	bl	800604e <remove_chain>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007bda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d126      	bne.n	8007c30 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd ff84 	bl	8005af4 <move_window>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bf6:	3a01      	subs	r2, #1
 8007bf8:	615a      	str	r2, [r3, #20]
 8007bfa:	e019      	b.n	8007c30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d115      	bne.n	8007c30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007c04:	7fbb      	ldrb	r3, [r7, #30]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007c0e:	2304      	movs	r3, #4
 8007c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007c14:	e00c      	b.n	8007c30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <f_open+0x1d4>
 8007c20:	7fbb      	ldrb	r3, [r7, #30]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <f_open+0x1d4>
						res = FR_DENIED;
 8007c2a:	2307      	movs	r3, #7
 8007c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d128      	bne.n	8007c8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fe0d 	bl	8005890 <inc_lock>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <f_open+0x22e>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 80a3 	bne.w	8007dda <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fcb2 	bl	8006604 <ld_clust>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	331c      	adds	r3, #28
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fd fc8a 	bl	80055c4 <ld_dword>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	88da      	ldrh	r2, [r3, #6]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	79fa      	ldrb	r2, [r7, #7]
 8007cce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3330      	adds	r3, #48	; 0x30
 8007ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd fcf4 	bl	80056da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d06e      	beq.n	8007dda <f_open+0x37e>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d06a      	beq.n	8007dda <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	895b      	ldrh	r3, [r3, #10]
 8007d10:	461a      	mov	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	899b      	ldrh	r3, [r3, #12]
 8007d16:	fb03 f302 	mul.w	r3, r3, r2
 8007d1a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d28:	e016      	b.n	8007d58 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd ff9d 	bl	8005c6e <get_fat>
 8007d34:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d802      	bhi.n	8007d42 <f_open+0x2e6>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d102      	bne.n	8007d50 <f_open+0x2f4>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <f_open+0x30c>
 8007d60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d8e0      	bhi.n	8007d2a <f_open+0x2ce>
				}
				fp->clust = clst;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d131      	bne.n	8007dda <f_open+0x37e>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	899b      	ldrh	r3, [r3, #12]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d82:	fb02 f201 	mul.w	r2, r2, r1
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d026      	beq.n	8007dda <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fd ff4d 	bl	8005c30 <clust2sect>
 8007d96:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <f_open+0x34a>
						res = FR_INT_ERR;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007da4:	e019      	b.n	8007dda <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	899b      	ldrh	r3, [r3, #12]
 8007daa:	461a      	mov	r2, r3
 8007dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db4:	441a      	add	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	7858      	ldrb	r0, [r3, #1]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1a      	ldr	r2, [r3, #32]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f7fd fb85 	bl	80054d8 <disk_read>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <f_open+0x37e>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <f_open+0x38c>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3768      	adds	r7, #104	; 0x68
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f107 0214 	add.w	r2, r7, #20
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fda5 	bl	8007964 <validate>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <f_read+0x44>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	7d5b      	ldrb	r3, [r3, #21]
 8007e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <f_read+0x4a>
 8007e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e3c:	e135      	b.n	80080aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	7d1b      	ldrb	r3, [r3, #20]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <f_read+0x5a>
 8007e4a:	2307      	movs	r3, #7
 8007e4c:	e12d      	b.n	80080aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	f240 811e 	bls.w	80080a0 <f_read+0x2ac>
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007e68:	e11a      	b.n	80080a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	8992      	ldrh	r2, [r2, #12]
 8007e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e76:	fb02 f201 	mul.w	r2, r2, r1
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 80d5 	bne.w	800802c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	8992      	ldrh	r2, [r2, #12]
 8007e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	8952      	ldrh	r2, [r2, #10]
 8007e92:	3a01      	subs	r2, #1
 8007e94:	4013      	ands	r3, r2
 8007e96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d12f      	bne.n	8007efe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8007eac:	e013      	b.n	8007ed6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7fe f9c3 	bl	8006248 <clmt_clust>
 8007ec2:	6338      	str	r0, [r7, #48]	; 0x30
 8007ec4:	e007      	b.n	8007ed6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f7fd fecd 	bl	8005c6e <get_fat>
 8007ed4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d804      	bhi.n	8007ee6 <f_read+0xf2>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	755a      	strb	r2, [r3, #21]
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e0e1      	b.n	80080aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eec:	d104      	bne.n	8007ef8 <f_read+0x104>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	755a      	strb	r2, [r3, #21]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e0d8      	b.n	80080aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f7fd fe92 	bl	8005c30 <clust2sect>
 8007f0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <f_read+0x12a>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2202      	movs	r2, #2
 8007f18:	755a      	strb	r2, [r3, #21]
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e0c5      	b.n	80080aa <f_read+0x2b6>
			sect += csect;
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	899b      	ldrh	r3, [r3, #12]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d041      	beq.n	8007fbe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	4413      	add	r3, r2
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	8952      	ldrh	r2, [r2, #10]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d905      	bls.n	8007f54 <f_read+0x160>
					cc = fs->csize - csect;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	895b      	ldrh	r3, [r3, #10]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	7858      	ldrb	r0, [r3, #1]
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5e:	f7fd fabb 	bl	80054d8 <disk_read>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <f_read+0x17e>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	755a      	strb	r2, [r3, #21]
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e09b      	b.n	80080aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	7d1b      	ldrb	r3, [r3, #20]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da18      	bge.n	8007fae <f_read+0x1ba>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d911      	bls.n	8007fae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1a      	ldr	r2, [r3, #32]
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	8992      	ldrh	r2, [r2, #12]
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9c:	18d0      	adds	r0, r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	899b      	ldrh	r3, [r3, #12]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f7fd fb75 	bl	8005698 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	899b      	ldrh	r3, [r3, #12]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007fbc:	e05c      	b.n	8008078 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d02e      	beq.n	8008026 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	7d1b      	ldrb	r3, [r3, #20]
 8007fcc:	b25b      	sxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da18      	bge.n	8008004 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	7858      	ldrb	r0, [r3, #1]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f7fd fa99 	bl	8005518 <disk_write>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <f_read+0x202>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	755a      	strb	r2, [r3, #21]
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e059      	b.n	80080aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	7d1b      	ldrb	r3, [r3, #20]
 8007ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	7858      	ldrb	r0, [r3, #1]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800800e:	2301      	movs	r3, #1
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	f7fd fa61 	bl	80054d8 <disk_read>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <f_read+0x232>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	755a      	strb	r2, [r3, #21]
 8008022:	2301      	movs	r3, #1
 8008024:	e041      	b.n	80080aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	899b      	ldrh	r3, [r3, #12]
 8008030:	4618      	mov	r0, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	8992      	ldrh	r2, [r2, #12]
 800803a:	fbb3 f1f2 	udiv	r1, r3, r2
 800803e:	fb02 f201 	mul.w	r2, r2, r1
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	1ac3      	subs	r3, r0, r3
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d901      	bls.n	8008054 <f_read+0x260>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	8992      	ldrh	r2, [r2, #12]
 8008062:	fbb3 f0f2 	udiv	r0, r3, r2
 8008066:	fb02 f200 	mul.w	r2, r2, r0
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	440b      	add	r3, r1
 800806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008070:	4619      	mov	r1, r3
 8008072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008074:	f7fd fb10 	bl	8005698 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	4413      	add	r3, r2
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	441a      	add	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	619a      	str	r2, [r3, #24]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	441a      	add	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f47f aee1 	bne.w	8007e6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3738      	adds	r7, #56	; 0x38
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b08c      	sub	sp, #48	; 0x30
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f107 0210 	add.w	r2, r7, #16
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fc46 	bl	8007964 <validate>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80080de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d107      	bne.n	80080f6 <f_write+0x44>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	7d5b      	ldrb	r3, [r3, #21]
 80080ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <f_write+0x4a>
 80080f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080fa:	e16a      	b.n	80083d2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	7d1b      	ldrb	r3, [r3, #20]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <f_write+0x5a>
 8008108:	2307      	movs	r3, #7
 800810a:	e162      	b.n	80083d2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	441a      	add	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	f080 814c 	bcs.w	80083b6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	43db      	mvns	r3, r3
 8008124:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008126:	e146      	b.n	80083b6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	8992      	ldrh	r2, [r2, #12]
 8008130:	fbb3 f1f2 	udiv	r1, r3, r2
 8008134:	fb02 f201 	mul.w	r2, r2, r1
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80f1 	bne.w	8008322 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	8992      	ldrh	r2, [r2, #12]
 8008148:	fbb3 f3f2 	udiv	r3, r3, r2
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	8952      	ldrh	r2, [r2, #10]
 8008150:	3a01      	subs	r2, #1
 8008152:	4013      	ands	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d143      	bne.n	80081e4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10c      	bne.n	800817e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11a      	bne.n	80081a6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2100      	movs	r1, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f7fd ffcf 	bl	8006118 <create_chain>
 800817a:	62b8      	str	r0, [r7, #40]	; 0x28
 800817c:	e013      	b.n	80081a6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	4619      	mov	r1, r3
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7fe f85b 	bl	8006248 <clmt_clust>
 8008192:	62b8      	str	r0, [r7, #40]	; 0x28
 8008194:	e007      	b.n	80081a6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f7fd ffba 	bl	8006118 <create_chain>
 80081a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8109 	beq.w	80083c0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d104      	bne.n	80081be <f_write+0x10c>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2202      	movs	r2, #2
 80081b8:	755a      	strb	r2, [r3, #21]
 80081ba:	2302      	movs	r3, #2
 80081bc:	e109      	b.n	80083d2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c4:	d104      	bne.n	80081d0 <f_write+0x11e>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	755a      	strb	r2, [r3, #21]
 80081cc:	2301      	movs	r3, #1
 80081ce:	e100      	b.n	80083d2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <f_write+0x132>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	7d1b      	ldrb	r3, [r3, #20]
 80081e8:	b25b      	sxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da18      	bge.n	8008220 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	7858      	ldrb	r0, [r3, #1]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	2301      	movs	r3, #1
 80081fe:	f7fd f98b 	bl	8005518 <disk_write>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <f_write+0x160>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	755a      	strb	r2, [r3, #21]
 800820e:	2301      	movs	r3, #1
 8008210:	e0df      	b.n	80083d2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	7d1b      	ldrb	r3, [r3, #20]
 8008216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fd fd01 	bl	8005c30 <clust2sect>
 800822e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <f_write+0x18e>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2202      	movs	r2, #2
 800823a:	755a      	strb	r2, [r3, #21]
 800823c:	2302      	movs	r3, #2
 800823e:	e0c8      	b.n	80083d2 <f_write+0x320>
			sect += csect;
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	4413      	add	r3, r2
 8008246:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	899b      	ldrh	r3, [r3, #12]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	fbb3 f3f2 	udiv	r3, r3, r2
 8008254:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d043      	beq.n	80082e4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	4413      	add	r3, r2
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	8952      	ldrh	r2, [r2, #10]
 8008266:	4293      	cmp	r3, r2
 8008268:	d905      	bls.n	8008276 <f_write+0x1c4>
					cc = fs->csize - csect;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	461a      	mov	r2, r3
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	7858      	ldrb	r0, [r3, #1]
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	69f9      	ldr	r1, [r7, #28]
 8008280:	f7fd f94a 	bl	8005518 <disk_write>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <f_write+0x1e2>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	755a      	strb	r2, [r3, #21]
 8008290:	2301      	movs	r3, #1
 8008292:	e09e      	b.n	80083d2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a1a      	ldr	r2, [r3, #32]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d918      	bls.n	80082d4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a1a      	ldr	r2, [r3, #32]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	8992      	ldrh	r2, [r2, #12]
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	18d1      	adds	r1, r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	899b      	ldrh	r3, [r3, #12]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f7fd f9e9 	bl	8005698 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	7d1b      	ldrb	r3, [r3, #20]
 80082ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	899b      	ldrh	r3, [r3, #12]
 80082d8:	461a      	mov	r2, r3
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80082e2:	e04b      	b.n	800837c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d016      	beq.n	800831c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d210      	bcs.n	800831c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	7858      	ldrb	r0, [r3, #1]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008304:	2301      	movs	r3, #1
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	f7fd f8e6 	bl	80054d8 <disk_read>
 800830c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	755a      	strb	r2, [r3, #21]
 8008318:	2301      	movs	r3, #1
 800831a:	e05a      	b.n	80083d2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	899b      	ldrh	r3, [r3, #12]
 8008326:	4618      	mov	r0, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	8992      	ldrh	r2, [r2, #12]
 8008330:	fbb3 f1f2 	udiv	r1, r3, r2
 8008334:	fb02 f201 	mul.w	r2, r2, r1
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	1ac3      	subs	r3, r0, r3
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d901      	bls.n	800834a <f_write+0x298>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	8992      	ldrh	r2, [r2, #12]
 8008358:	fbb3 f0f2 	udiv	r0, r3, r2
 800835c:	fb02 f200 	mul.w	r2, r2, r0
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	440b      	add	r3, r1
 8008364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008366:	69f9      	ldr	r1, [r7, #28]
 8008368:	4618      	mov	r0, r3
 800836a:	f7fd f995 	bl	8005698 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	7d1b      	ldrb	r3, [r3, #20]
 8008372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	4413      	add	r3, r2
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	441a      	add	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	619a      	str	r2, [r3, #24]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	429a      	cmp	r2, r3
 800839a:	bf38      	it	cc
 800839c:	461a      	movcc	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	441a      	add	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f aeb5 	bne.w	8008128 <f_write+0x76>
 80083be:	e000      	b.n	80083c2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	7d1b      	ldrb	r3, [r3, #20]
 80083c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3730      	adds	r7, #48	; 0x30
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f107 0208 	add.w	r2, r7, #8
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff faba 	bl	8007964 <validate>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d168      	bne.n	80084cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d062      	beq.n	80084cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7d1b      	ldrb	r3, [r3, #20]
 800840a:	b25b      	sxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	da15      	bge.n	800843c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	7858      	ldrb	r0, [r3, #1]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1a      	ldr	r2, [r3, #32]
 800841e:	2301      	movs	r3, #1
 8008420:	f7fd f87a 	bl	8005518 <disk_write>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <f_sync+0x54>
 800842a:	2301      	movs	r3, #1
 800842c:	e04f      	b.n	80084ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	7d1b      	ldrb	r3, [r3, #20]
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	b2da      	uxtb	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800843c:	f7fc fe54 	bl	80050e8 <get_fattime>
 8008440:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fd fb52 	bl	8005af4 <move_window>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d138      	bne.n	80084cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	330b      	adds	r3, #11
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	330b      	adds	r3, #11
 800846a:	f042 0220 	orr.w	r2, r2, #32
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	461a      	mov	r2, r3
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	f7fe f8e0 	bl	8006642 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f103 021c 	add.w	r2, r3, #28
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fd f8d6 	bl	8005640 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3316      	adds	r3, #22
 8008498:	6939      	ldr	r1, [r7, #16]
 800849a:	4618      	mov	r0, r3
 800849c:	f7fd f8d0 	bl	8005640 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3312      	adds	r3, #18
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fd f8af 	bl	800560a <st_word>
					fs->wflag = 1;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2201      	movs	r2, #1
 80084b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fb4b 	bl	8005b50 <sync_fs>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7d1b      	ldrb	r3, [r3, #20]
 80084c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff ff7b 	bl	80083da <f_sync>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d118      	bne.n	8008520 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f107 0208 	add.w	r2, r7, #8
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fa34 	bl	8007964 <validate>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10c      	bne.n	8008520 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd fa4e 	bl	80059ac <dec_lock>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b090      	sub	sp, #64	; 0x40
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	1d3b      	adds	r3, r7, #4
 800853a:	2200      	movs	r2, #0
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe ff89 	bl	8007454 <find_volume>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800854c:	2b00      	cmp	r3, #0
 800854e:	d11f      	bne.n	8008590 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fe6b 	bl	8007234 <follow_path>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008564:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008568:	2b00      	cmp	r3, #0
 800856a:	d111      	bne.n	8008590 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800856c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008570:	b25b      	sxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	da03      	bge.n	800857e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008576:	2306      	movs	r3, #6
 8008578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800857c:	e008      	b.n	8008590 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <f_stat+0x66>
 8008584:	f107 0308 	add.w	r3, r7, #8
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fbbc 	bl	8006d08 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008590:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008594:	4618      	mov	r0, r3
 8008596:	3740      	adds	r7, #64	; 0x40
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b098      	sub	sp, #96	; 0x60
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80085a4:	f107 010c 	add.w	r1, r7, #12
 80085a8:	1d3b      	adds	r3, r7, #4
 80085aa:	2202      	movs	r2, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe ff51 	bl	8007454 <find_volume>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80085bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 80f2 	bne.w	80087aa <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fe30 	bl	8007234 <follow_path>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80085da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <f_mkdir+0x4c>
 80085e2:	2308      	movs	r3, #8
 80085e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80085e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	f040 80dc 	bne.w	80087aa <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80085f2:	f107 0310 	add.w	r3, r7, #16
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd fd8d 	bl	8006118 <create_chain>
 80085fe:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	895b      	ldrh	r3, [r3, #10]
 8008604:	461a      	mov	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	899b      	ldrh	r3, [r3, #12]
 800860a:	fb03 f302 	mul.w	r3, r3, r2
 800860e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <f_mkdir+0x86>
 800861c:	2307      	movs	r3, #7
 800861e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8008622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d102      	bne.n	800862e <f_mkdir+0x92>
 8008628:	2302      	movs	r3, #2
 800862a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800862e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008634:	d102      	bne.n	800863c <f_mkdir+0xa0>
 8008636:	2301      	movs	r3, #1
 8008638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800863c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <f_mkdir+0xb6>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fa10 	bl	8005a6c <sync_window>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8008652:	f7fc fd49 	bl	80050e8 <get_fattime>
 8008656:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8008658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800865c:	2b00      	cmp	r3, #0
 800865e:	d16c      	bne.n	800873a <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd fae3 	bl	8005c30 <clust2sect>
 800866a:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3338      	adds	r3, #56	; 0x38
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	899b      	ldrh	r3, [r3, #12]
 8008676:	461a      	mov	r2, r3
 8008678:	2100      	movs	r1, #0
 800867a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800867c:	f7fd f82d 	bl	80056da <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8008680:	220b      	movs	r2, #11
 8008682:	2120      	movs	r1, #32
 8008684:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008686:	f7fd f828 	bl	80056da <mem_set>
					dir[DIR_Name] = '.';
 800868a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868c:	222e      	movs	r2, #46	; 0x2e
 800868e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	330b      	adds	r3, #11
 8008694:	2210      	movs	r2, #16
 8008696:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869a:	3316      	adds	r3, #22
 800869c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fc ffce 	bl	8005640 <st_dword>
					st_clust(fs, dir, dcl);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd ffc9 	bl	8006642 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80086b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b2:	3320      	adds	r3, #32
 80086b4:	2220      	movs	r2, #32
 80086b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fc ffed 	bl	8005698 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80086be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c0:	3321      	adds	r3, #33	; 0x21
 80086c2:	222e      	movs	r2, #46	; 0x2e
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d106      	bne.n	80086e0 <f_mkdir+0x144>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086d8:	429a      	cmp	r2, r3
 80086da:	d101      	bne.n	80086e0 <f_mkdir+0x144>
 80086dc:	2300      	movs	r3, #0
 80086de:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e4:	3320      	adds	r3, #32
 80086e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086e8:	4619      	mov	r1, r3
 80086ea:	f7fd ffaa 	bl	8006642 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	895b      	ldrh	r3, [r3, #10]
 80086f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086f4:	e01c      	b.n	8008730 <f_mkdir+0x194>
					fs->winsect = dsc++;
 80086f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	657a      	str	r2, [r7, #84]	; 0x54
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd f9af 	bl	8005a6c <sync_window>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8008714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	899b      	ldrh	r3, [r3, #12]
 8008720:	461a      	mov	r2, r3
 8008722:	2100      	movs	r1, #0
 8008724:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008726:	f7fc ffd8 	bl	80056da <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800872a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800872c:	3b01      	subs	r3, #1
 800872e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1df      	bne.n	80086f6 <f_mkdir+0x15a>
 8008736:	e000      	b.n	800873a <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8008738:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800873a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800873e:	2b00      	cmp	r3, #0
 8008740:	d107      	bne.n	8008752 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8008742:	f107 0310 	add.w	r3, r7, #16
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe f9e6 	bl	8006b18 <dir_register>
 800874c:	4603      	mov	r3, r0
 800874e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8008752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008756:	2b00      	cmp	r3, #0
 8008758:	d120      	bne.n	800879c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800875e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008760:	3316      	adds	r3, #22
 8008762:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008764:	4618      	mov	r0, r3
 8008766:	f7fc ff6b 	bl	8005640 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800876e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008770:	4618      	mov	r0, r3
 8008772:	f7fd ff66 	bl	8006642 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	330b      	adds	r3, #11
 800877a:	2210      	movs	r2, #16
 800877c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8008784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10e      	bne.n	80087aa <f_mkdir+0x20e>
					res = sync_fs(fs);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd f9de 	bl	8005b50 <sync_fs>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800879a:	e006      	b.n	80087aa <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800879c:	f107 0310 	add.w	r3, r7, #16
 80087a0:	2200      	movs	r2, #0
 80087a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fc52 	bl	800604e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80087aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3760      	adds	r7, #96	; 0x60
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80087c6:	2301      	movs	r3, #1
 80087c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80087ce:	4b1f      	ldr	r3, [pc, #124]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087d0:	7a5b      	ldrb	r3, [r3, #9]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d131      	bne.n	800883c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80087d8:	4b1c      	ldr	r3, [pc, #112]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087da:	7a5b      	ldrb	r3, [r3, #9]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	4b1a      	ldr	r3, [pc, #104]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087e2:	2100      	movs	r1, #0
 80087e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80087e6:	4b19      	ldr	r3, [pc, #100]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087e8:	7a5b      	ldrb	r3, [r3, #9]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	4a17      	ldr	r2, [pc, #92]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80087f6:	4b15      	ldr	r3, [pc, #84]	; (800884c <FATFS_LinkDriverEx+0x94>)
 80087f8:	7a5b      	ldrb	r3, [r3, #9]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <FATFS_LinkDriverEx+0x94>)
 8008800:	4413      	add	r3, r2
 8008802:	79fa      	ldrb	r2, [r7, #7]
 8008804:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <FATFS_LinkDriverEx+0x94>)
 8008808:	7a5b      	ldrb	r3, [r3, #9]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	b2d1      	uxtb	r1, r2
 8008810:	4a0e      	ldr	r2, [pc, #56]	; (800884c <FATFS_LinkDriverEx+0x94>)
 8008812:	7251      	strb	r1, [r2, #9]
 8008814:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008816:	7dbb      	ldrb	r3, [r7, #22]
 8008818:	3330      	adds	r3, #48	; 0x30
 800881a:	b2da      	uxtb	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	3301      	adds	r3, #1
 8008824:	223a      	movs	r2, #58	; 0x3a
 8008826:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3302      	adds	r3, #2
 800882c:	222f      	movs	r2, #47	; 0x2f
 800882e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	3303      	adds	r3, #3
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
}
 800883e:	4618      	mov	r0, r3
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	20000250 	.word	0x20000250

08008850 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff ffaa 	bl	80087b8 <FATFS_LinkDriverEx>
 8008864:	4603      	mov	r3, r0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	2b7f      	cmp	r3, #127	; 0x7f
 8008880:	d802      	bhi.n	8008888 <ff_convert+0x18>
		c = chr;
 8008882:	88fb      	ldrh	r3, [r7, #6]
 8008884:	81fb      	strh	r3, [r7, #14]
 8008886:	e025      	b.n	80088d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	2bff      	cmp	r3, #255	; 0xff
 8008892:	d805      	bhi.n	80088a0 <ff_convert+0x30>
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	3b80      	subs	r3, #128	; 0x80
 8008898:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <ff_convert+0x74>)
 800889a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889e:	e000      	b.n	80088a2 <ff_convert+0x32>
 80088a0:	2300      	movs	r3, #0
 80088a2:	81fb      	strh	r3, [r7, #14]
 80088a4:	e016      	b.n	80088d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80088a6:	2300      	movs	r3, #0
 80088a8:	81fb      	strh	r3, [r7, #14]
 80088aa:	e009      	b.n	80088c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	4a0d      	ldr	r2, [pc, #52]	; (80088e4 <ff_convert+0x74>)
 80088b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b4:	88fa      	ldrh	r2, [r7, #6]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d006      	beq.n	80088c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80088ba:	89fb      	ldrh	r3, [r7, #14]
 80088bc:	3301      	adds	r3, #1
 80088be:	81fb      	strh	r3, [r7, #14]
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	2b7f      	cmp	r3, #127	; 0x7f
 80088c4:	d9f2      	bls.n	80088ac <ff_convert+0x3c>
 80088c6:	e000      	b.n	80088ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80088c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80088ca:	89fb      	ldrh	r3, [r7, #14]
 80088cc:	3380      	adds	r3, #128	; 0x80
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80088d4:	89fb      	ldrh	r3, [r7, #14]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	08008bfc 	.word	0x08008bfc

080088e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f8:	d201      	bcs.n	80088fe <ff_wtoupper+0x16>
 80088fa:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <ff_wtoupper+0x10c>)
 80088fc:	e000      	b.n	8008900 <ff_wtoupper+0x18>
 80088fe:	4b3e      	ldr	r3, [pc, #248]	; (80089f8 <ff_wtoupper+0x110>)
 8008900:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1c9a      	adds	r2, r3, #2
 8008906:	617a      	str	r2, [r7, #20]
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800890c:	8a7b      	ldrh	r3, [r7, #18]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d068      	beq.n	80089e4 <ff_wtoupper+0xfc>
 8008912:	88fa      	ldrh	r2, [r7, #6]
 8008914:	8a7b      	ldrh	r3, [r7, #18]
 8008916:	429a      	cmp	r2, r3
 8008918:	d364      	bcc.n	80089e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1c9a      	adds	r2, r3, #2
 800891e:	617a      	str	r2, [r7, #20]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	823b      	strh	r3, [r7, #16]
 8008924:	8a3b      	ldrh	r3, [r7, #16]
 8008926:	0a1b      	lsrs	r3, r3, #8
 8008928:	81fb      	strh	r3, [r7, #14]
 800892a:	8a3b      	ldrh	r3, [r7, #16]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008930:	88fa      	ldrh	r2, [r7, #6]
 8008932:	8a79      	ldrh	r1, [r7, #18]
 8008934:	8a3b      	ldrh	r3, [r7, #16]
 8008936:	440b      	add	r3, r1
 8008938:	429a      	cmp	r2, r3
 800893a:	da49      	bge.n	80089d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	2b08      	cmp	r3, #8
 8008940:	d84f      	bhi.n	80089e2 <ff_wtoupper+0xfa>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <ff_wtoupper+0x60>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800896d 	.word	0x0800896d
 800894c:	0800897f 	.word	0x0800897f
 8008950:	08008995 	.word	0x08008995
 8008954:	0800899d 	.word	0x0800899d
 8008958:	080089a5 	.word	0x080089a5
 800895c:	080089ad 	.word	0x080089ad
 8008960:	080089b5 	.word	0x080089b5
 8008964:	080089bd 	.word	0x080089bd
 8008968:	080089c5 	.word	0x080089c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800896c:	88fa      	ldrh	r2, [r7, #6]
 800896e:	8a7b      	ldrh	r3, [r7, #18]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	80fb      	strh	r3, [r7, #6]
 800897c:	e027      	b.n	80089ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800897e:	88fa      	ldrh	r2, [r7, #6]
 8008980:	8a7b      	ldrh	r3, [r7, #18]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	b29b      	uxth	r3, r3
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	80fb      	strh	r3, [r7, #6]
 8008992:	e01c      	b.n	80089ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	3b10      	subs	r3, #16
 8008998:	80fb      	strh	r3, [r7, #6]
 800899a:	e018      	b.n	80089ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	3b20      	subs	r3, #32
 80089a0:	80fb      	strh	r3, [r7, #6]
 80089a2:	e014      	b.n	80089ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	3b30      	subs	r3, #48	; 0x30
 80089a8:	80fb      	strh	r3, [r7, #6]
 80089aa:	e010      	b.n	80089ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	3b1a      	subs	r3, #26
 80089b0:	80fb      	strh	r3, [r7, #6]
 80089b2:	e00c      	b.n	80089ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	3308      	adds	r3, #8
 80089b8:	80fb      	strh	r3, [r7, #6]
 80089ba:	e008      	b.n	80089ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	3b50      	subs	r3, #80	; 0x50
 80089c0:	80fb      	strh	r3, [r7, #6]
 80089c2:	e004      	b.n	80089ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80089ca:	80fb      	strh	r3, [r7, #6]
 80089cc:	bf00      	nop
			}
			break;
 80089ce:	e008      	b.n	80089e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d195      	bne.n	8008902 <ff_wtoupper+0x1a>
 80089d6:	8a3b      	ldrh	r3, [r7, #16]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80089e0:	e78f      	b.n	8008902 <ff_wtoupper+0x1a>
			break;
 80089e2:	bf00      	nop
	}

	return chr;
 80089e4:	88fb      	ldrh	r3, [r7, #6]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	08008cfc 	.word	0x08008cfc
 80089f8:	08008ef0 	.word	0x08008ef0

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f820 	bl	8008a54 <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008fac 	.word	0x08008fac
 8008a38:	08008fac 	.word	0x08008fac
 8008a3c:	08008fac 	.word	0x08008fac
 8008a40:	08008fb0 	.word	0x08008fb0

08008a44 <memset>:
 8008a44:	4402      	add	r2, r0
 8008a46:	4603      	mov	r3, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <_init>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr

08008a60 <_fini>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	bf00      	nop
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr
