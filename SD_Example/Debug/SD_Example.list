
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008984  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c74  08008c74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008c74  08008c74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c74  08008c74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000000c  08008c88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  200005dc  08008c88  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145e6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b97  00000000  00000000  00034622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000371c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00037f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278d2  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112fa  00000000  00000000  0006048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8b9  00000000  00000000  00071784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c03d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  0015c090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008af4 	.word	0x08008af4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008af4 	.word	0x08008af4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80001de:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; //fatfs function common result code
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "STM32 FATFS works great!"; //file buffer
 80001e0:	4b40      	ldr	r3, [pc, #256]	; (80002e4 <main+0x10c>)
 80001e2:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f0:	c403      	stmia	r4!, {r0, r1}
 80001f2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fb1b 	bl	800082e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f87e 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f938 	bl	8000470 <MX_GPIO_Init>
  MX_DMA_Init();
 8000200:	f000 f910 	bl	8000424 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000204:	f000 f8ee 	bl	80003e4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000208:	f005 fb4a 	bl	80058a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //mount SD card
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 800020c:	2200      	movs	r2, #0
 800020e:	4936      	ldr	r1, [pc, #216]	; (80002e8 <main+0x110>)
 8000210:	4836      	ldr	r0, [pc, #216]	; (80002ec <main+0x114>)
 8000212:	f007 fa5b 	bl	80076cc <f_mount>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <main+0x4a>
	  Error_Handler();
 800021c:	f000 f96c 	bl	80004f8 <Error_Handler>
 8000220:	e018      	b.n	8000254 <main+0x7c>
  }
  else {
	  //make file system
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK) {
 8000222:	463b      	mov	r3, r7
 8000224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000228:	9200      	str	r2, [sp, #0]
 800022a:	2200      	movs	r2, #0
 800022c:	2107      	movs	r1, #7
 800022e:	482e      	ldr	r0, [pc, #184]	; (80002e8 <main+0x110>)
 8000230:	f007 ffac 	bl	800818c <f_mkfs>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <main+0x68>
		  Error_Handler();
 800023a:	f000 f95d 	bl	80004f8 <Error_Handler>
 800023e:	e009      	b.n	8000254 <main+0x7c>
	  } else {
		  //open file for writing using create
		  if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8000240:	220a      	movs	r2, #10
 8000242:	492b      	ldr	r1, [pc, #172]	; (80002f0 <main+0x118>)
 8000244:	482b      	ldr	r0, [pc, #172]	; (80002f4 <main+0x11c>)
 8000246:	f007 fa87 	bl	8007758 <f_open>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <main+0x7c>
			  Error_Handler();
 8000250:	f000 f952 	bl	80004f8 <Error_Handler>
		  }
	  }
  }

  //write to the text file
  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffb5 	bl	80001c8 <strlen>
 800025e:	4602      	mov	r2, r0
 8000260:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000264:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000268:	4822      	ldr	r0, [pc, #136]	; (80002f4 <main+0x11c>)
 800026a:	f007 fd72 	bl	8007d52 <f_write>
 800026e:	4603      	mov	r3, r0
 8000270:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
  if((byteswritten == 0) || (res != FR_OK)) {
 8000274:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000278:	2b00      	cmp	r3, #0
 800027a:	d003      	beq.n	8000284 <main+0xac>
 800027c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <main+0xb2>
	  Error_Handler();
 8000284:	f000 f938 	bl	80004f8 <Error_Handler>
 8000288:	e026      	b.n	80002d8 <main+0x100>
  } else {
	  f_close(&SDFile);
 800028a:	481a      	ldr	r0, [pc, #104]	; (80002f4 <main+0x11c>)
 800028c:	f007 ff54 	bl	8008138 <f_close>

	  //test read the file
	  f_open(&SDFile, "STM32.TXT", FA_READ);
 8000290:	2201      	movs	r2, #1
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <main+0x118>)
 8000294:	4817      	ldr	r0, [pc, #92]	; (80002f4 <main+0x11c>)
 8000296:	f007 fa5f 	bl	8007758 <f_open>
	  memset(rtext, 0, sizeof(rtext));
 800029a:	463b      	mov	r3, r7
 800029c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f008 fc1e 	bl	8008ae4 <memset>
	  res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80002a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80002ac:	4639      	mov	r1, r7
 80002ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b2:	4810      	ldr	r0, [pc, #64]	; (80002f4 <main+0x11c>)
 80002b4:	f007 fc0e 	bl	8007ad4 <f_read>
 80002b8:	4603      	mov	r3, r0
 80002ba:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	  if((bytesread == 0) || (res == FR_OK)) {
 80002be:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d003      	beq.n	80002ce <main+0xf6>
 80002c6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d101      	bne.n	80002d2 <main+0xfa>
		  Error_Handler();
 80002ce:	f000 f913 	bl	80004f8 <Error_Handler>
	  }
	  f_close(&SDFile);
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0x11c>)
 80002d4:	f007 ff30 	bl	8008138 <f_close>
  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80002d8:	2200      	movs	r2, #0
 80002da:	2100      	movs	r1, #0
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <main+0x114>)
 80002de:	f007 f9f5 	bl	80076cc <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <main+0x10a>
 80002e4:	08008b18 	.word	0x08008b18
 80002e8:	20000178 	.word	0x20000178
 80002ec:	200003ac 	.word	0x200003ac
 80002f0:	08008b0c 	.word	0x08008b0c
 80002f4:	2000017c 	.word	0x2000017c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0b8      	sub	sp, #224	; 0xe0
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000302:	2244      	movs	r2, #68	; 0x44
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f008 fbec 	bl	8008ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2288      	movs	r2, #136	; 0x88
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f008 fbde 	bl	8008ae4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000328:	2310      	movs	r3, #16
 800032a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800033a:	2360      	movs	r3, #96	; 0x60
 800033c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800034a:	4618      	mov	r0, r3
 800034c:	f000 ffe8 	bl	8001320 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000356:	f000 f8cf 	bl	80004f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fbb4 	bl	8001aec <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800038a:	f000 f8b5 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800038e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000392:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000398:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800039a:	2301      	movs	r3, #1
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80003a2:	2310      	movs	r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003a6:	2307      	movs	r3, #7
 80003a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003b6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b8:	463b      	mov	r3, r7
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fd9c 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003c6:	f000 f897 	bl	80004f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ce:	f000 ff51 	bl	8001274 <HAL_PWREx_ControlVoltageScaling>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80003d8:	f000 f88e 	bl	80004f8 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	37e0      	adds	r7, #224	; 0xe0
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <MX_SDMMC1_SD_Init+0x3c>)
 80003ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	2000005c 	.word	0x2000005c
 8000420:	40012800 	.word	0x40012800

08000424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_DMA_Init+0x48>)
 800042c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042e:	4a0f      	ldr	r2, [pc, #60]	; (800046c <MX_DMA_Init+0x48>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	6493      	str	r3, [r2, #72]	; 0x48
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <MX_DMA_Init+0x48>)
 8000438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	203b      	movs	r0, #59	; 0x3b
 8000448:	f000 fb65 	bl	8000b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800044c:	203b      	movs	r0, #59	; 0x3b
 800044e:	f000 fb7e 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2100      	movs	r1, #0
 8000456:	203c      	movs	r0, #60	; 0x3c
 8000458:	f000 fb5d 	bl	8000b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800045c:	203c      	movs	r0, #60	; 0x3c
 800045e:	f000 fb76 	bl	8000b4e <HAL_NVIC_EnableIRQ>

}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0x84>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <MX_GPIO_Init+0x84>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0x84>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004bc:	f043 0308 	orr.w	r3, r3, #8
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_GPIO_Init+0x84>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0308 	and.w	r3, r3, #8
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 80004ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fcf5 	bl	8000ed4 <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x44>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6613      	str	r3, [r2, #96]	; 0x60
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x44>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_MspInit+0x44>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_MspInit+0x44>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a55      	ldr	r2, [pc, #340]	; (80006c0 <HAL_SD_MspInit+0x174>)
 800056a:	4293      	cmp	r3, r2
 800056c:	f040 80a3 	bne.w	80006b6 <HAL_SD_MspInit+0x16a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000570:	4b54      	ldr	r3, [pc, #336]	; (80006c4 <HAL_SD_MspInit+0x178>)
 8000572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000574:	4a53      	ldr	r2, [pc, #332]	; (80006c4 <HAL_SD_MspInit+0x178>)
 8000576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057a:	6613      	str	r3, [r2, #96]	; 0x60
 800057c:	4b51      	ldr	r3, [pc, #324]	; (80006c4 <HAL_SD_MspInit+0x178>)
 800057e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b4e      	ldr	r3, [pc, #312]	; (80006c4 <HAL_SD_MspInit+0x178>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	4a4d      	ldr	r2, [pc, #308]	; (80006c4 <HAL_SD_MspInit+0x178>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000594:	4b4b      	ldr	r3, [pc, #300]	; (80006c4 <HAL_SD_MspInit+0x178>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <HAL_SD_MspInit+0x178>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	4a47      	ldr	r2, [pc, #284]	; (80006c4 <HAL_SD_MspInit+0x178>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <HAL_SD_MspInit+0x178>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80005b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80005bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005ca:	230c      	movs	r3, #12
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	483c      	ldr	r0, [pc, #240]	; (80006c8 <HAL_SD_MspInit+0x17c>)
 80005d6:	f000 fc7d 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005da:	2304      	movs	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005ea:	230c      	movs	r3, #12
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4835      	ldr	r0, [pc, #212]	; (80006cc <HAL_SD_MspInit+0x180>)
 80005f6:	f000 fc6d 	bl	8000ed4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <HAL_SD_MspInit+0x184>)
 80005fc:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <HAL_SD_MspInit+0x188>)
 80005fe:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000602:	2207      	movs	r2, #7
 8000604:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800060c:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <HAL_SD_MspInit+0x184>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000612:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <HAL_SD_MspInit+0x184>)
 800061a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800061e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000626:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <HAL_SD_MspInit+0x184>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000634:	4826      	ldr	r0, [pc, #152]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000636:	f000 faa5 	bl	8000b84 <HAL_DMA_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 8000640:	f7ff ff5a 	bl	80004f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a22      	ldr	r2, [pc, #136]	; (80006d0 <HAL_SD_MspInit+0x184>)
 8000648:	641a      	str	r2, [r3, #64]	; 0x40
 800064a:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <HAL_SD_MspInit+0x184>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000652:	4a22      	ldr	r2, [pc, #136]	; (80006dc <HAL_SD_MspInit+0x190>)
 8000654:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000658:	2207      	movs	r2, #7
 800065a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 800065e:	2210      	movs	r2, #16
 8000660:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800067c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 800068c:	f000 fa7a 	bl	8000b84 <HAL_DMA_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_SD_MspInit+0x14e>
    {
      Error_Handler();
 8000696:	f7ff ff2f 	bl	80004f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <HAL_SD_MspInit+0x18c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2031      	movs	r0, #49	; 0x31
 80006ac:	f000 fa33 	bl	8000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006b0:	2031      	movs	r0, #49	; 0x31
 80006b2:	f000 fa4c 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	; 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012800 	.word	0x40012800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000800 	.word	0x48000800
 80006cc:	48000c00 	.word	0x48000c00
 80006d0:	200000e0 	.word	0x200000e0
 80006d4:	40020444 	.word	0x40020444
 80006d8:	20000128 	.word	0x20000128
 80006dc:	40020458 	.word	0x40020458

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f8d4 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <SDMMC1_IRQHandler+0x10>)
 800073a:	f003 fb3f 	bl	8003dbc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000005c 	.word	0x2000005c

08000748 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <DMA2_Channel4_IRQHandler+0x10>)
 800074e:	f000 fb12 	bl	8000d76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000e0 	.word	0x200000e0

0800075c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <DMA2_Channel5_IRQHandler+0x10>)
 8000762:	f000 fb08 	bl	8000d76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000128 	.word	0x20000128

08000770 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <SystemInit+0x64>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <SystemInit+0x64>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <SystemInit+0x68>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <SystemInit+0x68>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <SystemInit+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <SystemInit+0x68>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <SystemInit+0x68>)
 800079c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <SystemInit+0x68>)
 80007a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <SystemInit+0x68>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <SystemInit+0x68>)
 80007b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <SystemInit+0x68>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SystemInit+0x64>)
 80007c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c6:	609a      	str	r2, [r3, #8]
#endif
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	40021000 	.word	0x40021000

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff ffc6 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <LoopForever+0xa>)
	ldr	r3, =_edata
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
	ldr	r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LoopForever+0x16>)
	cmp	r2, r3
 8000806:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f008 f947 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fce3 	bl	80001d8 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000814:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000818:	08008c7c 	.word	0x08008c7c
	ldr	r0, =_sdata
 800081c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000820:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000828:	200005dc 	.word	0x200005dc

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>

0800082e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f961 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f80e 	bl	8000860 <HAL_InitTick>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	e001      	b.n	8000854 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000850:	f7ff fe58 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_InitTick+0x6c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d023      	beq.n	80008bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_InitTick+0x70>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_InitTick+0x6c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	fbb3 f3f1 	udiv	r3, r3, r1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f96d 	bl	8000b6a <HAL_SYSTICK_Config>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10f      	bne.n	80008b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d809      	bhi.n	80008b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	f000 f937 	bl	8000b16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_InitTick+0x74>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e007      	b.n	80008c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e004      	b.n	80008c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e001      	b.n	80008c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000170 	.word	0x20000170

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000170 	.word	0x20000170

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffde 	bl	8000900 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff29 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff3e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff31 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e098      	b.n	8000cc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <HAL_DMA_Init+0x150>)
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d80f      	bhi.n	8000bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <HAL_DMA_Init+0x154>)
 8000baa:	4413      	add	r3, r2
 8000bac:	4a4b      	ldr	r2, [pc, #300]	; (8000cdc <HAL_DMA_Init+0x158>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <HAL_DMA_Init+0x15c>)
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc0:	e00e      	b.n	8000be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <HAL_DMA_Init+0x160>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <HAL_DMA_Init+0x158>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	009a      	lsls	r2, r3, #2
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a42      	ldr	r2, [pc, #264]	; (8000ce8 <HAL_DMA_Init+0x164>)
 8000bde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3a:	d039      	beq.n	8000cb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <HAL_DMA_Init+0x15c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d11a      	bne.n	8000c7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <HAL_DMA_Init+0x168>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f003 031c 	and.w	r3, r3, #28
 8000c52:	210f      	movs	r1, #15
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4924      	ldr	r1, [pc, #144]	; (8000cec <HAL_DMA_Init+0x168>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_DMA_Init+0x168>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	f003 031c 	and.w	r3, r3, #28
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	491d      	ldr	r1, [pc, #116]	; (8000cec <HAL_DMA_Init+0x168>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
 8000c7a:	e019      	b.n	8000cb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_DMA_Init+0x16c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	f003 031c 	and.w	r3, r3, #28
 8000c88:	210f      	movs	r1, #15
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4917      	ldr	r1, [pc, #92]	; (8000cf0 <HAL_DMA_Init+0x16c>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_DMA_Init+0x16c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6859      	ldr	r1, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 031c 	and.w	r3, r3, #28
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <HAL_DMA_Init+0x16c>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40020407 	.word	0x40020407
 8000cd8:	bffdfff8 	.word	0xbffdfff8
 8000cdc:	cccccccd 	.word	0xcccccccd
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	bffdfbf8 	.word	0xbffdfbf8
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	400200a8 	.word	0x400200a8
 8000cf0:	400204a8 	.word	0x400204a8

08000cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d005      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e029      	b.n	8000d6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020e 	bic.w	r2, r2, #14
 8000d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 021c 	and.w	r2, r3, #28
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3
    }
  }
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f003 031c 	and.w	r3, r3, #28
 8000d96:	2204      	movs	r2, #4
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d026      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x7a>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d021      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d107      	bne.n	8000dca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0204 	bic.w	r2, r2, #4
 8000dc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f003 021c 	and.w	r2, r3, #28
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d071      	beq.n	8000eca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000dee:	e06c      	b.n	8000eca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f003 031c 	and.w	r3, r3, #28
 8000df8:	2202      	movs	r2, #2
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d02e      	beq.n	8000e62 <HAL_DMA_IRQHandler+0xec>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d029      	beq.n	8000e62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10b      	bne.n	8000e34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 020a 	bic.w	r2, r2, #10
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	f003 021c 	and.w	r2, r3, #28
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	2102      	movs	r1, #2
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d038      	beq.n	8000eca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e60:	e033      	b.n	8000eca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f003 031c 	and.w	r3, r3, #28
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d02a      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x156>
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d025      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 020e 	bic.w	r2, r2, #14
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	f003 021c 	and.w	r2, r3, #28
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
}
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e17f      	b.n	80011e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8171 	beq.w	80011de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d00b      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f10:	2b11      	cmp	r3, #17
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d118      	bne.n	8000fbc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x128>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b12      	cmp	r3, #18
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	6939      	ldr	r1, [r7, #16]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80ac 	beq.w	80011de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <HAL_GPIO_Init+0x330>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a5e      	ldr	r2, [pc, #376]	; (8001204 <HAL_GPIO_Init+0x330>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b5c      	ldr	r3, [pc, #368]	; (8001204 <HAL_GPIO_Init+0x330>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800109e:	4a5a      	ldr	r2, [pc, #360]	; (8001208 <HAL_GPIO_Init+0x334>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x242>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_GPIO_Init+0x338>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x23e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_GPIO_Init+0x33c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x23a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <HAL_GPIO_Init+0x340>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x236>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x344>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x232>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	; (800121c <HAL_GPIO_Init+0x348>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x22e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x34c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x22a>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x244>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x244>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x244>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x244>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x244>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x244>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x244>
 8001116:	2300      	movs	r3, #0
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001128:	4937      	ldr	r1, [pc, #220]	; (8001208 <HAL_GPIO_Init+0x334>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_GPIO_Init+0x350>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_GPIO_Init+0x350>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_GPIO_Init+0x350>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_GPIO_Init+0x350>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_GPIO_Init+0x350>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_GPIO_Init+0x350>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x350>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_GPIO_Init+0x350>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f47f ae78 	bne.w	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800
 8001214:	48000c00 	.word	0x48000c00
 8001218:	48001000 	.word	0x48001000
 800121c:	48001400 	.word	0x48001400
 8001220:	48001800 	.word	0x48001800
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_PWREx_GetVoltageRange+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001282:	d130      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800128c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001290:	d038      	beq.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2232      	movs	r2, #50	; 0x32
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b8:	e002      	b.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012cc:	d102      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f2      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d110      	bne.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e00f      	b.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d007      	beq.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000
 8001318:	20000000 	.word	0x20000000
 800131c:	431bde83 	.word	0x431bde83

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e3d4      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001332:	4ba1      	ldr	r3, [pc, #644]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800133c:	4b9e      	ldr	r3, [pc, #632]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80e4 	beq.w	800151c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_RCC_OscConfig+0x4a>
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	f040 808b 	bne.w	8001478 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b01      	cmp	r3, #1
 8001366:	f040 8087 	bne.w	8001478 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136a:	4b93      	ldr	r3, [pc, #588]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x62>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e3ac      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_RCC_OscConfig+0x7c>
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139a:	e005      	b.n	80013a8 <HAL_RCC_OscConfig+0x88>
 800139c:	4b86      	ldr	r3, [pc, #536]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800139e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d223      	bcs.n	80013f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fd41 	bl	8001e38 <RCC_SetFlashLatencyFromMSIRange>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e38d      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7c      	ldr	r2, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b7a      	ldr	r3, [pc, #488]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4977      	ldr	r1, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4972      	ldr	r1, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e025      	b.n	8001440 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6f      	ldr	r2, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	496a      	ldr	r1, [pc, #424]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4965      	ldr	r1, [pc, #404]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fd01 	bl	8001e38 <RCC_SetFlashLatencyFromMSIRange>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e34d      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001440:	f000 fc36 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	495a      	ldr	r1, [pc, #360]	; (80015bc <HAL_RCC_OscConfig+0x29c>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x2a0>)
 800145e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001460:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <HAL_RCC_OscConfig+0x2a4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f9fb 	bl	8000860 <HAL_InitTick>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d052      	beq.n	800151a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	e331      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d032      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001480:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148c:	f7ff fa38 	bl	8000900 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001494:	f7ff fa34 	bl	8000900 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e31a      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a6:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a40      	ldr	r2, [pc, #256]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	493b      	ldr	r1, [pc, #236]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e01a      	b.n	800151c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa05 	bl	8000900 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff fa01 	bl	8000900 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e2e7      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x1da>
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d074      	beq.n	8001612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b08      	cmp	r3, #8
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x21a>
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d10e      	bne.n	8001552 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d10b      	bne.n	8001552 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d064      	beq.n	8001610 <HAL_RCC_OscConfig+0x2f0>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d160      	bne.n	8001610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e2c4      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x24a>
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e01d      	b.n	80015a6 <HAL_RCC_OscConfig+0x286>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x26e>
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e00b      	b.n	80015a6 <HAL_RCC_OscConfig+0x286>
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 8001594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_RCC_OscConfig+0x298>)
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff f9a7 	bl	8000900 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b4:	e011      	b.n	80015da <HAL_RCC_OscConfig+0x2ba>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08008b78 	.word	0x08008b78
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff f99a 	bl	8000900 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e280      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	4baf      	ldr	r3, [pc, #700]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2a8>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff f98a 	bl	8000900 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff f986 	bl	8000900 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e26c      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001602:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2d0>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d060      	beq.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d005      	beq.n	8001630 <HAL_RCC_OscConfig+0x310>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d119      	bne.n	800165e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d116      	bne.n	800165e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0x328>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e249      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b93      	ldr	r3, [pc, #588]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	4990      	ldr	r1, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165c:	e040      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d023      	beq.n	80016ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001666:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a8b      	ldr	r2, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff f945 	bl	8000900 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff f941 	bl	8000900 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e227      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168c:	4b82      	ldr	r3, [pc, #520]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b7f      	ldr	r3, [pc, #508]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	497c      	ldr	r1, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
 80016ac:	e018      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a79      	ldr	r2, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff f921 	bl	8000900 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff f91d 	bl	8000900 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e203      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03c      	beq.n	8001766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	4a67      	ldr	r2, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff f8fc 	bl	8000900 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff f8f8 	bl	8000900 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1de      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ef      	beq.n	800170c <HAL_RCC_OscConfig+0x3ec>
 800172c:	e01b      	b.n	8001766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172e:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001734:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff f8df 	bl	8000900 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff f8db 	bl	8000900 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1c1      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001758:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1ef      	bne.n	8001746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80a6 	beq.w	80018c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	4a43      	ldr	r2, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6593      	str	r3, [r2, #88]	; 0x58
 8001790:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179c:	2301      	movs	r3, #1
 800179e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a0:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_OscConfig+0x57c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d118      	bne.n	80017de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_OscConfig+0x57c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x57c>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b8:	f7ff f8a2 	bl	8000900 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7ff f89e 	bl	8000900 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e184      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x57c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4d8>
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	e024      	b.n	8001842 <HAL_RCC_OscConfig+0x522>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d110      	bne.n	8001822 <HAL_RCC_OscConfig+0x502>
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001820:	e00f      	b.n	8001842 <HAL_RCC_OscConfig+0x522>
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 8001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d016      	beq.n	8001878 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff f859 	bl	8000900 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f855 	bl	8000900 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e139      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x578>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ed      	beq.n	8001852 <HAL_RCC_OscConfig+0x532>
 8001876:	e01a      	b.n	80018ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f842 	bl	8000900 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff f83e 	bl	8000900 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d906      	bls.n	80018a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e122      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a0:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1e8      	bne.n	8001880 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b4:	4b8b      	ldr	r3, [pc, #556]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	4a8a      	ldr	r2, [pc, #552]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80018ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8108 	beq.w	8001ada <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f040 80d0 	bne.w	8001a74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d4:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d130      	bne.n	800194a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	3b01      	subs	r3, #1
 80018f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d127      	bne.n	800194a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d11f      	bne.n	800194a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001914:	2a07      	cmp	r2, #7
 8001916:	bf14      	ite	ne
 8001918:	2201      	movne	r2, #1
 800191a:	2200      	moveq	r2, #0
 800191c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191e:	4293      	cmp	r3, r2
 8001920:	d113      	bne.n	800194a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d109      	bne.n	800194a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d06e      	beq.n	8001a28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d069      	beq.n	8001a24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b7      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001978:	f7fe ffc2 	bl	8000900 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7fe ffbe 	bl	8000900 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0a4      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199e:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <HAL_RCC_OscConfig+0x7c8>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019ae:	3a01      	subs	r2, #1
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019b8:	0212      	lsls	r2, r2, #8
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019c0:	0852      	lsrs	r2, r2, #1
 80019c2:	3a01      	subs	r2, #1
 80019c4:	0552      	lsls	r2, r2, #21
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019cc:	0852      	lsrs	r2, r2, #1
 80019ce:	3a01      	subs	r2, #1
 80019d0:	0652      	lsls	r2, r2, #25
 80019d2:	4311      	orrs	r1, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d8:	0912      	lsrs	r2, r2, #4
 80019da:	0452      	lsls	r2, r2, #17
 80019dc:	430a      	orrs	r2, r1
 80019de:	4941      	ldr	r1, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019fc:	f7fe ff80 	bl	8000900 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ff7c 	bl	8000900 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e062      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a22:	e05a      	b.n	8001ada <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e059      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d152      	bne.n	8001ada <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a4c:	f7fe ff58 	bl	8000900 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7fe ff54 	bl	8000900 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e03a      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x734>
 8001a72:	e032      	b.n	8001ada <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d02d      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001a98:	f023 0303 	bic.w	r3, r3, #3
 8001a9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001aa4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7fe ff27 	bl	8000900 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe ff23 	bl	8000900 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x7c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x796>
 8001ad4:	e001      	b.n	8001ada <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	f99d808c 	.word	0xf99d808c

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0c8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d910      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4961      	ldr	r1, [pc, #388]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b0      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d04c      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d121      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e09e      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d115      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e092      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e086      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e07e      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 0203 	bic.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	493f      	ldr	r1, [pc, #252]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba6:	f7fe feab 	bl	8000900 <HAL_GetTick>
 8001baa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe fea7 	bl	8000900 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e066      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 020c 	and.w	r2, r3, #12
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d1eb      	bne.n	8001bae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d210      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4924      	ldr	r1, [pc, #144]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e036      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4910      	ldr	r1, [pc, #64]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c62:	f000 f825 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fdea 	bl	8000860 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c90:	7afb      	ldrb	r3, [r7, #11]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08008b78 	.word	0x08008b78
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d121      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d11e      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	e004      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d134      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d003      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0xac>
 8001d54:	e005      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5e:	617b      	str	r3, [r7, #20]
      break;
 8001d60:	e002      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	617b      	str	r3, [r7, #20]
      break;
 8001d66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	3301      	adds	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	fb02 f203 	mul.w	r2, r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0e5b      	lsrs	r3, r3, #25
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001da8:	69bb      	ldr	r3, [r7, #24]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08008b90 	.word	0x08008b90
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	007a1200 	.word	0x007a1200

08001dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08008b88 	.word	0x08008b88

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e10:	f7ff ffda 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0adb      	lsrs	r3, r3, #11
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4904      	ldr	r1, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08008b88 	.word	0x08008b88

08001e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff fa02 	bl	8001258 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
 8001e56:	e014      	b.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e70:	f7ff f9f2 	bl	8001258 <HAL_PWREx_GetVoltageRange>
 8001e74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e88:	d10b      	bne.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d919      	bls.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2ba0      	cmp	r3, #160	; 0xa0
 8001e94:	d902      	bls.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e96:	2302      	movs	r3, #2
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e013      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e010      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d902      	bls.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e00a      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d102      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e004      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b70      	cmp	r3, #112	; 0x70
 8001ebe:	d101      	bne.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f00:	2300      	movs	r3, #0
 8001f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f04:	2300      	movs	r3, #0
 8001f06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d041      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f1c:	d02a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f22:	d824      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f2e:	d81e      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f38:	d010      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f3c:	4b86      	ldr	r3, [pc, #536]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a85      	ldr	r2, [pc, #532]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f48:	e015      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f825 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5a:	e00c      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3320      	adds	r3, #32
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 f910 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e003      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	74fb      	strb	r3, [r7, #19]
      break;
 8001f72:	e000      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7c:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f8a:	4973      	ldr	r1, [pc, #460]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f92:	e001      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d041      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fac:	d02a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fb2:	d824      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fbe:	d81e      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d010      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fca:	e018      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fcc:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a61      	ldr	r2, [pc, #388]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd8:	e015      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 ffdd 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3320      	adds	r3, #32
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f8c8 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffc:	e003      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	74fb      	strb	r3, [r7, #19]
      break;
 8002002:	e000      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800200c:	4b52      	ldr	r3, [pc, #328]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201a:	494f      	ldr	r1, [pc, #316]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002022:	e001      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a0 	beq.w	8002176 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3a      	ldr	r2, [pc, #232]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002078:	f7fe fc42 	bl	8000900 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800207e:	e009      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe fc3e 	bl	8000900 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d902      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	74fb      	strb	r3, [r7, #19]
        break;
 8002092:	e005      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d15c      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01f      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d019      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fbfd 	bl	8000900 <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002108:	e00b      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fbf9 	bl	8000900 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d902      	bls.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	74fb      	strb	r3, [r7, #19]
            break;
 8002120:	e006      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ec      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002146:	4904      	ldr	r1, [pc, #16]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800214e:	e009      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
 8002154:	e006      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002164:	7c7b      	ldrb	r3, [r7, #17]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216a:	4b9e      	ldr	r3, [pc, #632]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	4a9d      	ldr	r2, [pc, #628]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002174:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002182:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f023 0203 	bic.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	4994      	ldr	r1, [pc, #592]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a4:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 020c 	bic.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	498c      	ldr	r1, [pc, #560]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021c6:	4b87      	ldr	r3, [pc, #540]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4983      	ldr	r1, [pc, #524]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	497b      	ldr	r1, [pc, #492]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800220a:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	4972      	ldr	r1, [pc, #456]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	496a      	ldr	r1, [pc, #424]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	4961      	ldr	r1, [pc, #388]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	4959      	ldr	r1, [pc, #356]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	4950      	ldr	r1, [pc, #320]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	4948      	ldr	r1, [pc, #288]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	493f      	ldr	r1, [pc, #252]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	4937      	ldr	r1, [pc, #220]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002316:	d106      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	60d3      	str	r3, [r2, #12]
 8002324:	e011      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232e:	d10c      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fe32 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	491f      	ldr	r1, [pc, #124]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002374:	d106      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002380:	60d3      	str	r3, [r2, #12]
 8002382:	e011      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fe03 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02b      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d2:	d109      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
 80023e0:	e014      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023f0:	d10c      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fdd1 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02f      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002426:	4928      	ldr	r1, [pc, #160]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002436:	d10d      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	2102      	movs	r1, #2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fdae 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d014      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	74bb      	strb	r3, [r7, #18]
 8002452:	e011      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245c:	d10c      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3320      	adds	r3, #32
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fe8f 	bl	8003188 <RCCEx_PLLSAI2_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b6:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024be:	7cbb      	ldrb	r3, [r7, #18]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024de:	d13e      	bne.n	800255e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80024e0:	4bbe      	ldr	r3, [pc, #760]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f2:	d028      	beq.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024fa:	f200 853e 	bhi.w	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002504:	d005      	beq.n	8002512 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	d00e      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800250e:	f000 bd34 	b.w	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002512:	4bb2      	ldr	r3, [pc, #712]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b02      	cmp	r3, #2
 800251e:	f040 852e 	bne.w	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	61fb      	str	r3, [r7, #28]
      break;
 8002528:	f000 bd29 	b.w	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800252c:	4bab      	ldr	r3, [pc, #684]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 8523 	bne.w	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 800253c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002540:	61fb      	str	r3, [r7, #28]
      break;
 8002542:	f000 bd1e 	b.w	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002546:	4ba5      	ldr	r3, [pc, #660]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002552:	f040 8518 	bne.w	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 8002556:	4ba2      	ldr	r3, [pc, #648]	; (80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002558:	61fb      	str	r3, [r7, #28]
      break;
 800255a:	f000 bd14 	b.w	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255e:	4b9f      	ldr	r3, [pc, #636]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d036      	beq.n	80025dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d840      	bhi.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d003      	beq.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d020      	beq.n	80025c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002580:	e039      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002582:	4b96      	ldr	r3, [pc, #600]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d116      	bne.n	80025bc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800258e:	4b93      	ldr	r3, [pc, #588]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800259a:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	e005      	b.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80025a6:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a8c      	ldr	r2, [pc, #560]	; (80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80025ba:	e01f      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
      break;
 80025c0:	e01c      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80025c2:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d102      	bne.n	80025d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80025d0:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80025d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80025d4:	e012      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
      break;
 80025da:	e00f      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025dc:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e8:	d102      	bne.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80025ea:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 80025ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80025ee:	e005      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
      break;
 80025f4:	e002      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
      break;
 80025fa:	bf00      	nop
    }

    switch(PeriphClk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002602:	f000 80d2 	beq.w	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800260c:	f200 84bd 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002616:	f000 80c8 	beq.w	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002620:	f200 84b3 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	f000 835b 	beq.w	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	f200 84a9 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263e:	f000 847f 	beq.w	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002648:	f200 849f 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002652:	f000 82ce 	beq.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800265c:	f200 8495 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	f000 80a0 	beq.w	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	f200 848b 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267a:	f000 808f 	beq.w	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	f200 8481 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268e:	d07e      	beq.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002696:	f200 8478 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a0:	f000 8404 	beq.w	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	f200 846e 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	f000 83b0 	beq.w	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026be:	f200 8464 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c8:	f000 837a 	beq.w	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d2:	f200 845a 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	f000 8345 	beq.w	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	f200 8452 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d84b      	bhi.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 844b 	beq.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	2b1f      	cmp	r3, #31
 80026fa:	f200 8446 	bhi.w	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80026fe:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	080028ef 	.word	0x080028ef
 8002708:	0800295f 	.word	0x0800295f
 800270c:	08002f8b 	.word	0x08002f8b
 8002710:	080029f3 	.word	0x080029f3
 8002714:	08002f8b 	.word	0x08002f8b
 8002718:	08002f8b 	.word	0x08002f8b
 800271c:	08002f8b 	.word	0x08002f8b
 8002720:	08002a6b 	.word	0x08002a6b
 8002724:	08002f8b 	.word	0x08002f8b
 8002728:	08002f8b 	.word	0x08002f8b
 800272c:	08002f8b 	.word	0x08002f8b
 8002730:	08002f8b 	.word	0x08002f8b
 8002734:	08002f8b 	.word	0x08002f8b
 8002738:	08002f8b 	.word	0x08002f8b
 800273c:	08002f8b 	.word	0x08002f8b
 8002740:	08002aef 	.word	0x08002aef
 8002744:	08002f8b 	.word	0x08002f8b
 8002748:	08002f8b 	.word	0x08002f8b
 800274c:	08002f8b 	.word	0x08002f8b
 8002750:	08002f8b 	.word	0x08002f8b
 8002754:	08002f8b 	.word	0x08002f8b
 8002758:	08002f8b 	.word	0x08002f8b
 800275c:	08002f8b 	.word	0x08002f8b
 8002760:	08002f8b 	.word	0x08002f8b
 8002764:	08002f8b 	.word	0x08002f8b
 8002768:	08002f8b 	.word	0x08002f8b
 800276c:	08002f8b 	.word	0x08002f8b
 8002770:	08002f8b 	.word	0x08002f8b
 8002774:	08002f8b 	.word	0x08002f8b
 8002778:	08002f8b 	.word	0x08002f8b
 800277c:	08002f8b 	.word	0x08002f8b
 8002780:	08002b71 	.word	0x08002b71
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	f000 82bd 	beq.w	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800278c:	e3fd      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002794:	f000 fdd6 	bl	8003344 <RCCEx_GetSAIxPeriphCLKFreq>
 8002798:	61f8      	str	r0, [r7, #28]
      break;
 800279a:	e3f7      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800279c:	69b9      	ldr	r1, [r7, #24]
 800279e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027a2:	f000 fdcf 	bl	8003344 <RCCEx_GetSAIxPeriphCLKFreq>
 80027a6:	61f8      	str	r0, [r7, #28]
      break;
 80027a8:	e3f0      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027bc:	d018      	beq.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027c4:	f200 808b 	bhi.w	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ce:	d059      	beq.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d6:	d028      	beq.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 80027d8:	e081      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	0003d090 	.word	0x0003d090
 80027e4:	08008b90 	.word	0x08008b90
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80027f0:	4bae      	ldr	r3, [pc, #696]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d172      	bne.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80027fc:	4bab      	ldr	r3, [pc, #684]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002808:	4ba8      	ldr	r3, [pc, #672]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	e005      	b.n	8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002814:	4ba5      	ldr	r3, [pc, #660]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4aa3      	ldr	r2, [pc, #652]	; (8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61fb      	str	r3, [r7, #28]
          break;
 8002828:	e05b      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800282a:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002836:	d156      	bne.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002838:	4b9c      	ldr	r3, [pc, #624]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002844:	d14f      	bne.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002846:	4b99      	ldr	r3, [pc, #612]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002850:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fb02 f203 	mul.w	r2, r2, r3
 800285a:	4b94      	ldr	r3, [pc, #592]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	3301      	adds	r3, #1
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800286c:	4b8f      	ldr	r3, [pc, #572]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	61fb      	str	r3, [r7, #28]
          break;
 8002882:	e030      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002890:	d12b      	bne.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002892:	4b86      	ldr	r3, [pc, #536]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289e:	d124      	bne.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	fb02 f203 	mul.w	r2, r2, r3
 80028b4:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	3301      	adds	r3, #1
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80028c6:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	0d5b      	lsrs	r3, r3, #21
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	3301      	adds	r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	61fb      	str	r3, [r7, #28]
          break;
 80028dc:	e005      	b.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 80028de:	bf00      	nop
 80028e0:	e354      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80028e2:	bf00      	nop
 80028e4:	e352      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80028e6:	bf00      	nop
 80028e8:	e350      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80028ea:	bf00      	nop
        break;
 80028ec:	e34e      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80028ee:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d828      	bhi.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	08002921 	.word	0x08002921
 8002910:	08002929 	.word	0x08002929
 8002914:	0800293d 	.word	0x0800293d
          frequency = HAL_RCC_GetPCLK2Freq();
 8002918:	f7ff fa78 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 800291c:	61f8      	str	r0, [r7, #28]
          break;
 800291e:	e01d      	b.n	800295c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002920:	f7ff f9c6 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002924:	61f8      	str	r0, [r7, #28]
          break;
 8002926:	e019      	b.n	800295c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002928:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d10f      	bne.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002938:	61fb      	str	r3, [r7, #28]
          break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800293c:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294e:	61fb      	str	r3, [r7, #28]
          break;
 8002950:	e003      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002952:	bf00      	nop
 8002954:	e31a      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002956:	bf00      	nop
 8002958:	e318      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800295a:	bf00      	nop
        break;
 800295c:	e316      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800295e:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d83a      	bhi.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	080029ad 	.word	0x080029ad
 800297c:	080029e7 	.word	0x080029e7
 8002980:	080029e7 	.word	0x080029e7
 8002984:	080029e7 	.word	0x080029e7
 8002988:	080029b5 	.word	0x080029b5
 800298c:	080029e7 	.word	0x080029e7
 8002990:	080029e7 	.word	0x080029e7
 8002994:	080029e7 	.word	0x080029e7
 8002998:	080029bd 	.word	0x080029bd
 800299c:	080029e7 	.word	0x080029e7
 80029a0:	080029e7 	.word	0x080029e7
 80029a4:	080029e7 	.word	0x080029e7
 80029a8:	080029d1 	.word	0x080029d1
          frequency = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff fa18 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 80029b0:	61f8      	str	r0, [r7, #28]
          break;
 80029b2:	e01d      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 80029b4:	f7ff f97c 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 80029b8:	61f8      	str	r0, [r7, #28]
          break;
 80029ba:	e019      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	d10f      	bne.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80029cc:	61fb      	str	r3, [r7, #28]
          break;
 80029ce:	e00c      	b.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 80029de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e2:	61fb      	str	r3, [r7, #28]
          break;
 80029e4:	e003      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 80029e6:	bf00      	nop
 80029e8:	e2d0      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029ea:	bf00      	nop
 80029ec:	e2ce      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029ee:	bf00      	nop
        break;
 80029f0:	e2cc      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d021      	beq.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b30      	cmp	r3, #48	; 0x30
 8002a08:	d829      	bhi.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d011      	beq.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d823      	bhi.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d004      	beq.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002a22:	e01c      	b.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a24:	f7ff f9dc 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002a28:	61f8      	str	r0, [r7, #28]
          break;
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a2c:	f7ff f940 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002a30:	61f8      	str	r0, [r7, #28]
          break;
 8002a32:	e019      	b.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a40:	d10f      	bne.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002a44:	61fb      	str	r3, [r7, #28]
          break;
 8002a46:	e00c      	b.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5a:	61fb      	str	r3, [r7, #28]
          break;
 8002a5c:	e003      	b.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002a5e:	bf00      	nop
 8002a60:	e294      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a62:	bf00      	nop
 8002a64:	e292      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a66:	bf00      	nop
        break;
 8002a68:	e290      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2bc0      	cmp	r3, #192	; 0xc0
 8002a7a:	d027      	beq.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a80:	d82f      	bhi.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d017      	beq.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d829      	bhi.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d004      	beq.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002a9a:	e022      	b.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff f9a0 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	61f8      	str	r0, [r7, #28]
          break;
 8002aa2:	e023      	b.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002aa4:	f7ff f904 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002aa8:	61f8      	str	r0, [r7, #28]
          break;
 8002aaa:	e01f      	b.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08008b90 	.word	0x08008b90
 8002ab4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ab8:	4ba9      	ldr	r3, [pc, #676]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8002ac6:	4ba7      	ldr	r3, [pc, #668]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002ac8:	61fb      	str	r3, [r7, #28]
          break;
 8002aca:	e00c      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002acc:	4ba4      	ldr	r3, [pc, #656]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d107      	bne.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	61fb      	str	r3, [r7, #28]
          break;
 8002ae0:	e003      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002ae2:	bf00      	nop
 8002ae4:	e252      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ae6:	bf00      	nop
 8002ae8:	e250      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002aea:	bf00      	nop
        break;
 8002aec:	e24e      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002aee:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b00:	d025      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b08:	d82c      	bhi.n	8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b10:	d013      	beq.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d824      	bhi.n	8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	d004      	beq.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8002b28:	e01c      	b.n	8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b2a:	f7ff f959 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002b2e:	61f8      	str	r0, [r7, #28]
          break;
 8002b30:	e01d      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b32:	f7ff f8bd 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002b36:	61f8      	str	r0, [r7, #28]
          break;
 8002b38:	e019      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b3a:	4b89      	ldr	r3, [pc, #548]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d10f      	bne.n	8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8002b48:	4b86      	ldr	r3, [pc, #536]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002b4a:	61fb      	str	r3, [r7, #28]
          break;
 8002b4c:	e00c      	b.n	8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b4e:	4b84      	ldr	r3, [pc, #528]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8002b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b60:	61fb      	str	r3, [r7, #28]
          break;
 8002b62:	e003      	b.n	8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8002b64:	bf00      	nop
 8002b66:	e211      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b68:	bf00      	nop
 8002b6a:	e20f      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b6c:	bf00      	nop
        break;
 8002b6e:	e20d      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002b70:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b82:	d025      	beq.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8a:	d82c      	bhi.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b92:	d013      	beq.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9a:	d824      	bhi.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d004      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 8002baa:	e01c      	b.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002bac:	f7ff f918 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	61f8      	str	r0, [r7, #28]
          break;
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8002bb4:	f7ff f87c 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002bb8:	61f8      	str	r0, [r7, #28]
          break;
 8002bba:	e019      	b.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc8:	d10f      	bne.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 8002bca:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002bcc:	61fb      	str	r3, [r7, #28]
          break;
 8002bce:	e00c      	b.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002bd0:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d107      	bne.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8002bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be2:	61fb      	str	r3, [r7, #28]
          break;
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8002be6:	bf00      	nop
 8002be8:	e1d0      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bea:	bf00      	nop
 8002bec:	e1ce      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bee:	bf00      	nop
        break;
 8002bf0:	e1cc      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c04:	d00c      	beq.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c0c:	d864      	bhi.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c14:	d008      	beq.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1c:	d030      	beq.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8002c1e:	e05b      	b.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c20:	f7ff f846 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002c24:	61f8      	str	r0, [r7, #28]
          break;
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002c28:	4b4d      	ldr	r3, [pc, #308]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c34:	d152      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8002c36:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04c      	beq.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c4c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	fb02 f203 	mul.w	r2, r2, r3
 8002c56:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	3301      	adds	r3, #1
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002c68:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	0e5b      	lsrs	r3, r3, #25
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	3301      	adds	r3, #1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	61fb      	str	r3, [r7, #28]
          break;
 8002c7e:	e02d      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8c:	d128      	bne.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d022      	beq.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	fb02 f203 	mul.w	r2, r2, r3
 8002cae:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	3301      	adds	r3, #1
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	0e5b      	lsrs	r3, r3, #25
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]
          break;
 8002cd6:	e003      	b.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 8002cd8:	bf00      	nop
 8002cda:	e157      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002cdc:	bf00      	nop
 8002cde:	e155      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ce0:	bf00      	nop
        break;
 8002ce2:	e153      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002cf6:	f7ff f889 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002cfa:	61f8      	str	r0, [r7, #28]
        break;
 8002cfc:	e146      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002cfe:	f7fe ffd7 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002d02:	61f8      	str	r0, [r7, #28]
        break;
 8002d04:	e142      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d18:	d013      	beq.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d20:	d819      	bhi.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8002d30:	e011      	b.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d32:	f7ff f855 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002d36:	61f8      	str	r0, [r7, #28]
          break;
 8002d38:	e010      	b.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7fe ffb9 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002d3e:	61f8      	str	r0, [r7, #28]
          break;
 8002d40:	e00c      	b.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d104      	bne.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002d52:	61fb      	str	r3, [r7, #28]
          break;
 8002d54:	e001      	b.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8002d56:	bf00      	nop
 8002d58:	e118      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002d5a:	bf00      	nop
        break;
 8002d5c:	e116      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d82:	d819      	bhi.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d90:	d004      	beq.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8002d92:	e011      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d94:	f7ff f824 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002d98:	61f8      	str	r0, [r7, #28]
          break;
 8002d9a:	e010      	b.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d9c:	f7fe ff88 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002da0:	61f8      	str	r0, [r7, #28]
          break;
 8002da2:	e00c      	b.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002da4:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d104      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002db2:	4b7a      	ldr	r3, [pc, #488]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002db4:	61fb      	str	r3, [r7, #28]
          break;
 8002db6:	e001      	b.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8002db8:	bf00      	nop
 8002dba:	e0e7      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dbc:	bf00      	nop
        break;
 8002dbe:	e0e5      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002dc0:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dda:	d819      	bhi.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d004      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 8002dea:	e011      	b.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7fe fff8 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002df0:	61f8      	str	r0, [r7, #28]
          break;
 8002df2:	e010      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002df4:	f7fe ff5c 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002df8:	61f8      	str	r0, [r7, #28]
          break;
 8002dfa:	e00c      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	d104      	bne.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8002e0a:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002e0c:	61fb      	str	r3, [r7, #28]
          break;
 8002e0e:	e001      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8002e10:	bf00      	nop
 8002e12:	e0bb      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e14:	bf00      	nop
        break;
 8002e16:	e0b9      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002e18:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e2a:	d02c      	beq.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e32:	d833      	bhi.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e3a:	d01a      	beq.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e42:	d82b      	bhi.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e50:	d004      	beq.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8002e52:	e023      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7fe ffc4 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002e58:	61f8      	str	r0, [r7, #28]
          break;
 8002e5a:	e026      	b.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002e5c:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8002e6a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002e6e:	61fb      	str	r3, [r7, #28]
          break;
 8002e70:	e016      	b.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e72:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002e82:	61fb      	str	r3, [r7, #28]
          break;
 8002e84:	e00e      	b.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e86:	4b44      	ldr	r3, [pc, #272]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8002e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e98:	61fb      	str	r3, [r7, #28]
          break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8002e9c:	bf00      	nop
 8002e9e:	e075      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ea0:	bf00      	nop
 8002ea2:	e073      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ea4:	bf00      	nop
 8002ea6:	e071      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ea8:	bf00      	nop
        break;
 8002eaa:	e06f      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ebe:	d02c      	beq.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ec6:	d833      	bhi.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ece:	d01a      	beq.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed6:	d82b      	bhi.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee4:	d004      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8002ee6:	e023      	b.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7fe ff7a 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002eec:	61f8      	str	r0, [r7, #28]
          break;
 8002eee:	e026      	b.n	8002f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8002efe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002f02:	61fb      	str	r3, [r7, #28]
          break;
 8002f04:	e016      	b.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d111      	bne.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002f16:	61fb      	str	r3, [r7, #28]
          break;
 8002f18:	e00e      	b.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d109      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8002f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2c:	61fb      	str	r3, [r7, #28]
          break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8002f30:	bf00      	nop
 8002f32:	e02b      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f34:	bf00      	nop
 8002f36:	e029      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f38:	bf00      	nop
 8002f3a:	e027      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f3c:	bf00      	nop
        break;
 8002f3e:	e025      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d004      	beq.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8002f5a:	e00d      	b.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7fe ff40 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002f60:	61f8      	str	r0, [r7, #28]
          break;
 8002f62:	e009      	b.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d101      	bne.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002f74:	61fb      	str	r3, [r7, #28]
          break;
 8002f76:	bf00      	nop
        break;
 8002f78:	e008      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002f8a:	bf00      	nop
    }
  }

  return(frequency);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	00f42400 	.word	0x00f42400

08002fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fae:	4b75      	ldr	r3, [pc, #468]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d018      	beq.n	8002fec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fba:	4b72      	ldr	r3, [pc, #456]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10d      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d047      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e044      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d018      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x86>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d825      	bhi.n	8003044 <RCCEx_PLLSAI1_Config+0xa4>
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d002      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x62>
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d009      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0x74>
 8003000:	e020      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11d      	bne.n	800304a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003012:	e01a      	b.n	800304a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003014:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d116      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e013      	b.n	800304e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003026:	4b57      	ldr	r3, [pc, #348]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003032:	4b54      	ldr	r3, [pc, #336]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003042:	e006      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	e004      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003052:	bf00      	nop
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	430b      	orrs	r3, r1
 8003070:	4944      	ldr	r1, [pc, #272]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d17d      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a40      	ldr	r2, [pc, #256]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fd fc3a 	bl	8000900 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800308e:	e009      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003090:	f7fd fc36 	bl	8000900 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	73fb      	strb	r3, [r7, #15]
        break;
 80030a2:	e005      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ef      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d160      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030bc:	4b31      	ldr	r3, [pc, #196]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6892      	ldr	r2, [r2, #8]
 80030cc:	0211      	lsls	r1, r2, #8
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	0912      	lsrs	r2, r2, #4
 80030d4:	0452      	lsls	r2, r2, #17
 80030d6:	430a      	orrs	r2, r1
 80030d8:	492a      	ldr	r1, [pc, #168]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	610b      	str	r3, [r1, #16]
 80030de:	e027      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d112      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6892      	ldr	r2, [r2, #8]
 80030f6:	0211      	lsls	r1, r2, #8
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6912      	ldr	r2, [r2, #16]
 80030fc:	0852      	lsrs	r2, r2, #1
 80030fe:	3a01      	subs	r2, #1
 8003100:	0552      	lsls	r2, r2, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	491f      	ldr	r1, [pc, #124]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	610b      	str	r3, [r1, #16]
 800310a:	e011      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003114:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6892      	ldr	r2, [r2, #8]
 800311c:	0211      	lsls	r1, r2, #8
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6952      	ldr	r2, [r2, #20]
 8003122:	0852      	lsrs	r2, r2, #1
 8003124:	3a01      	subs	r2, #1
 8003126:	0652      	lsls	r2, r2, #25
 8003128:	430a      	orrs	r2, r1
 800312a:	4916      	ldr	r1, [pc, #88]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fd fbe0 	bl	8000900 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fd fbdc 	bl	8000900 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
          break;
 8003156:	e005      	b.n	8003164 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	4904      	ldr	r1, [pc, #16]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003196:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10d      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
       ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031ba:	4b61      	ldr	r3, [pc, #388]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d047      	beq.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e044      	b.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d018      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x86>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d825      	bhi.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d002      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x62>
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d009      	beq.n	80031fc <RCCEx_PLLSAI2_Config+0x74>
 80031e8:	e020      	b.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ea:	4b55      	ldr	r3, [pc, #340]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11d      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fa:	e01a      	b.n	8003232 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320c:	e013      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320e:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322a:	e006      	b.n	800323a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e004      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800323a:	bf00      	nop
    }

    if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	430b      	orrs	r3, r1
 8003258:	4939      	ldr	r1, [pc, #228]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d167      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a35      	ldr	r2, [pc, #212]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fd fb46 	bl	8000900 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003276:	e009      	b.n	800328c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003278:	f7fd fb42 	bl	8000900 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d902      	bls.n	800328c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	73fb      	strb	r3, [r7, #15]
        break;
 800328a:	e005      	b.n	8003298 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ef      	bne.n	8003278 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d14a      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d111      	bne.n	80032c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	0211      	lsls	r1, r2, #8
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	0912      	lsrs	r2, r2, #4
 80032bc:	0452      	lsls	r2, r2, #17
 80032be:	430a      	orrs	r2, r1
 80032c0:	491f      	ldr	r1, [pc, #124]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	614b      	str	r3, [r1, #20]
 80032c6:	e011      	b.n	80032ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6912      	ldr	r2, [r2, #16]
 80032de:	0852      	lsrs	r2, r2, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0652      	lsls	r2, r2, #25
 80032e4:	430a      	orrs	r2, r1
 80032e6:	4916      	ldr	r1, [pc, #88]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd fb02 	bl	8000900 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003300:	f7fd fafe 	bl	8000900 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	73fb      	strb	r3, [r7, #15]
          break;
 8003312:	e005      	b.n	8003320 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4904      	ldr	r1, [pc, #16]	; (8003340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000

08003344 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d10c      	bne.n	800337c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800336c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003374:	d112      	bne.n	800339c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e00f      	b.n	800339c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	d10b      	bne.n	800339c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003384:	4b65      	ldr	r3, [pc, #404]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800338e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003396:	d101      	bne.n	800339c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800339a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80b4 	bne.w	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ae:	d003      	beq.n	80033b8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033b6:	d135      	bne.n	8003424 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c4:	f040 80a1 	bne.w	800350a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80033c8:	4b54      	ldr	r3, [pc, #336]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 809a 	beq.w	800350a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	3301      	adds	r3, #1
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80033ea:	4b4c      	ldr	r3, [pc, #304]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80033fc:	4b47      	ldr	r3, [pc, #284]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003408:	2311      	movs	r3, #17
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e001      	b.n	8003412 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800340e:	2307      	movs	r3, #7
 8003410:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	fb02 f203 	mul.w	r2, r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003422:	e072      	b.n	800350a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d133      	bne.n	8003492 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800342a:	4b3c      	ldr	r3, [pc, #240]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003436:	d169      	bne.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003438:	4b38      	ldr	r3, [pc, #224]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d063      	beq.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003444:	4b35      	ldr	r3, [pc, #212]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	3301      	adds	r3, #1
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003458:	4b30      	ldr	r3, [pc, #192]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003462:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800346a:	4b2c      	ldr	r3, [pc, #176]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003476:	2311      	movs	r3, #17
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e001      	b.n	8003480 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800347c:	2307      	movs	r3, #7
 800347e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	fb02 f203 	mul.w	r2, r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e03c      	b.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003498:	d003      	beq.n	80034a2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a0:	d134      	bne.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80034a2:	4b1e      	ldr	r3, [pc, #120]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ae:	d12d      	bne.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d027      	beq.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	3301      	adds	r3, #1
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80034ee:	2311      	movs	r3, #17
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e001      	b.n	80034f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80034f4:	2307      	movs	r3, #7
 80034f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	fb02 f203 	mul.w	r2, r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e000      	b.n	800350c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800350a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800350c:	69fb      	ldr	r3, [r7, #28]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	001fff68 	.word	0x001fff68

08003524 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e022      	b.n	800357c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fc ffff 	bl	800054c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f814 	bl	8003584 <HAL_SD_InitCard>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e00a      	b.n	800357c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b090      	sub	sp, #64	; 0x40
 8003588:	af04      	add	r7, sp, #16
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80035a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035a4:	f7fe ff92 	bl	80024cc <HAL_RCCEx_GetPeriphCLKFreq>
 80035a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e08d      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk/400000U) - 2U);
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	09db      	lsrs	r3, r3, #7
 80035c8:	4a47      	ldr	r2, [pc, #284]	; (80036e8 <HAL_SD_InitCard+0x164>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	3b02      	subs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681d      	ldr	r5, [r3, #0]
 80035d8:	466c      	mov	r4, sp
 80035da:	f107 0318 	add.w	r3, r7, #24
 80035de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ec:	4628      	mov	r0, r5
 80035ee:	f001 fbe1 	bl	8004db4 <SDMMC_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80035f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e06d      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003612:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fc16 	bl	8004e4a <SDMMC_PowerState_ON>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e057      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	3302      	adds	r3, #2
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_SD_InitCard+0x168>)
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	3301      	adds	r3, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd f95e 	bl	8000918 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f001 f8ed 	bl	800483c <SD_PowerON>
 8003662:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02e      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 f80e 	bl	80046a4 <SD_InitCard>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e01b      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fc5d 	bl	8004f70 <SDMMC_CmdBlockLength>
 80036b6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00f      	beq.n	80036de <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <HAL_SD_InitCard+0x16c>)
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3730      	adds	r7, #48	; 0x30
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bdb0      	pop	{r4, r5, r7, pc}
 80036e8:	014f8b59 	.word	0x014f8b59
 80036ec:	00012110 	.word	0x00012110
 80036f0:	004005ff 	.word	0x004005ff

080036f4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b092      	sub	sp, #72	; 0x48
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003702:	f7fd f8fd 	bl	8000900 <HAL_GetTick>
 8003706:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1bd      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	f040 81b0 	bne.w	8003a94 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	429a      	cmp	r2, r3
 8003746:	d907      	bls.n	8003758 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e1a4      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	2b01      	cmp	r3, #1
 800376e:	d002      	beq.n	8003776 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	025b      	lsls	r3, r3, #9
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003782:	2390      	movs	r3, #144	; 0x90
 8003784:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003786:	2302      	movs	r3, #2
 8003788:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800378e:	2301      	movs	r3, #1
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f107 0214 	add.w	r2, r7, #20
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fbbb 	bl	8004f18 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d90a      	bls.n	80037be <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2202      	movs	r2, #2
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fc1f 	bl	8004ff8 <SDMMC_CmdReadMultiBlock>
 80037ba:	6478      	str	r0, [r7, #68]	; 0x44
 80037bc:	e009      	b.n	80037d2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fbf2 	bl	8004fb4 <SDMMC_CmdReadSingleBlock>
 80037d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80037d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e151      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003802:	e061      	b.n	80038c8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03c      	beq.n	800388c <HAL_SD_ReadBlocks+0x198>
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d039      	beq.n	800388c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003818:	2300      	movs	r3, #0
 800381a:	643b      	str	r3, [r7, #64]	; 0x40
 800381c:	e033      	b.n	8003886 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f001 faf3 	bl	8004e0e <SDMMC_ReadFIFO>
 8003828:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	b2da      	uxtb	r2, r3
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	3301      	adds	r3, #1
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	3b01      	subs	r3, #1
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	b2da      	uxtb	r2, r3
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	3301      	adds	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	3b01      	subs	r3, #1
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2da      	uxtb	r2, r3
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	3301      	adds	r3, #1
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003866:	3b01      	subs	r3, #1
 8003868:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	b2da      	uxtb	r2, r3
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	3301      	adds	r3, #1
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387c:	3b01      	subs	r3, #1
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	3301      	adds	r3, #1
 8003884:	643b      	str	r3, [r7, #64]	; 0x40
 8003886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003888:	2b07      	cmp	r3, #7
 800388a:	d9c8      	bls.n	800381e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800388c:	f7fd f838 	bl	8000900 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003898:	429a      	cmp	r2, r3
 800389a:	d902      	bls.n	80038a2 <HAL_SD_ReadBlocks+0x1ae>
 800389c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d112      	bne.n	80038c8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0ec      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d096      	beq.n	8003804 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d022      	beq.n	800392a <HAL_SD_ReadBlocks+0x236>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d91f      	bls.n	800392a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d01b      	beq.n	800392a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fbe4 	bl	80050c4 <SDMMC_CmdStopTransfer>
 80038fc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0bb      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d012      	beq.n	800395e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	f043 0208 	orr.w	r2, r3, #8
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0a1      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	f043 0202 	orr.w	r2, r3, #2
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e087      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d064      	beq.n	8003a6a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_SD_ReadBlocks+0x2d4>)
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06d      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
 80039c6:	bf00      	nop
 80039c8:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fa1c 	bl	8004e0e <SDMMC_ReadFIFO>
 80039d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	3301      	adds	r3, #1
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	3b01      	subs	r3, #1
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80039f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f8:	3301      	adds	r3, #1
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	3b01      	subs	r3, #1
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	3301      	adds	r3, #1
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a14:	3b01      	subs	r3, #1
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	0e1b      	lsrs	r3, r3, #24
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	3301      	adds	r3, #1
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a2e:	f7fc ff67 	bl	8000900 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d902      	bls.n	8003a44 <HAL_SD_ReadBlocks+0x350>
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d112      	bne.n	8003a6a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_SD_ReadBlocks+0x3b8>)
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01b      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SD_ReadBlocks+0x38a>
 8003a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1a6      	bne.n	80039cc <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e006      	b.n	8003aa2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3748      	adds	r7, #72	; 0x48
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	004005ff 	.word	0x004005ff

08003ab0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b092      	sub	sp, #72	; 0x48
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003abe:	f7fc ff1f 	bl	8000900 <HAL_GetTick>
 8003ac2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e165      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	f040 8158 	bne.w	8003da0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d907      	bls.n	8003b14 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e14c      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	025b      	lsls	r3, r3, #9
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b36:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003b3e:	2390      	movs	r3, #144	; 0x90
 8003b40:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f107 0218 	add.w	r2, r7, #24
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 f9dd 	bl	8004f18 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d90a      	bls.n	8003b7a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fa85 	bl	8005080 <SDMMC_CmdWriteMultiBlock>
 8003b76:	6478      	str	r0, [r7, #68]	; 0x44
 8003b78:	e009      	b.n	8003b8e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa58 	bl	800503c <SDMMC_CmdWriteSingleBlock>
 8003b8c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a87      	ldr	r2, [pc, #540]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0f9      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003bbe:	e065      	b.n	8003c8c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d040      	beq.n	8003c50 <HAL_SD_WriteBlocks+0x1a0>
 8003bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03d      	beq.n	8003c50 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd8:	e037      	b.n	8003c4a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	3301      	adds	r3, #1
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be8:	3b01      	subs	r3, #1
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	3b01      	subs	r3, #1
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	3301      	adds	r3, #1
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	3b01      	subs	r3, #1
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f107 0214 	add.w	r2, r7, #20
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f8f2 	bl	8004e28 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c46:	3301      	adds	r3, #1
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d9c4      	bls.n	8003bda <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c50:	f7fc fe56 	bl	8000900 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <HAL_SD_WriteBlocks+0x1b6>
 8003c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d112      	bne.n	8003c8c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a53      	ldr	r2, [pc, #332]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e090      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d092      	beq.n	8003bc0 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d022      	beq.n	8003cee <HAL_SD_WriteBlocks+0x23e>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d91f      	bls.n	8003cee <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d01b      	beq.n	8003cee <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fa02 	bl	80050c4 <SDMMC_CmdStopTransfer>
 8003cc0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3a      	ldr	r2, [pc, #232]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e05f      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	f043 0208 	orr.w	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e045      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e02b      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <HAL_SD_WriteBlocks+0x308>)
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	f043 0210 	orr.w	r2, r3, #16
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e011      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e006      	b.n	8003dae <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3748      	adds	r7, #72	; 0x48
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	004005ff 	.word	0x004005ff

08003dbc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_SD_IRQHandler+0x2e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 ff40 	bl	8004c68 <SD_Read_IT>
 8003de8:	e155      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808f 	beq.w	8003f18 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003e12:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003e16:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d039      	beq.n	8003ea6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_SD_IRQHandler+0x8a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f93a 	bl	80050c4 <SDMMC_CmdStopTransfer>
 8003e50:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f91f 	bl	80040a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_SD_IRQHandler+0xda>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f001 fdb0 	bl	80059fc <HAL_SD_RxCpltCallback>
 8003e9c:	e0fb      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f001 fda2 	bl	80059e8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003ea4:	e0f7      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80f2 	beq.w	8004096 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d011      	beq.n	8003ee0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f8ff 	bl	80050c4 <SDMMC_CmdStopTransfer>
 8003ec6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8e4 	bl	80040a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 80d5 	bne.w	8004096 <HAL_SD_IRQHandler+0x2da>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80cf 	bne.w	8004096 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0208 	bic.w	r2, r2, #8
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f001 fd69 	bl	80059e8 <HAL_SD_TxCpltCallback>
}
 8003f16:	e0be      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_SD_IRQHandler+0x17c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 feea 	bl	8004d0a <SD_Write_IT>
 8003f36:	e0ae      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a7 	beq.w	8004096 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f043 0202 	orr.w	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	f043 0208 	orr.w	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	f043 0210 	orr.w	r2, r3, #16
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f878 	bl	80050c4 <SDMMC_CmdStopTransfer>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f855 	bl	80040a8 <HAL_SD_ErrorCallback>
}
 8003ffe:	e04a      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	2b00      	cmp	r3, #0
 8004008:	d045      	beq.n	8004096 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_SD_IRQHandler+0x262>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d011      	beq.n	8004042 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_SD_IRQHandler+0x2e4>)
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc fe62 	bl	8000cf4 <HAL_DMA_Abort_IT>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02f      	beq.n	8004096 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fac4 	bl	80045c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004040:	e029      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_SD_IRQHandler+0x29a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d011      	beq.n	800407a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_SD_IRQHandler+0x2e8>)
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fe46 	bl	8000cf4 <HAL_DMA_Abort_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d013      	beq.n	8004096 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fadf 	bl	8004636 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004078:	e00d      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 fca0 	bl	80059d4 <HAL_SD_AbortCallback>
}
 8004094:	e7ff      	b.n	8004096 <HAL_SD_IRQHandler+0x2da>
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	080045c9 	.word	0x080045c9
 80040a4:	08004637 	.word	0x08004637

080040a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ca:	0f9b      	lsrs	r3, r3, #30
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d6:	0e9b      	lsrs	r3, r3, #26
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e8:	0e1b      	lsrs	r3, r3, #24
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	b2da      	uxtb	r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	b29a      	uxth	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	b2da      	uxtb	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413a:	0bdb      	lsrs	r3, r3, #15
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	0b9b      	lsrs	r3, r3, #14
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004170:	0b1b      	lsrs	r3, r3, #12
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	2b00      	cmp	r3, #0
 800418a:	d163      	bne.n	8004254 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004190:	009a      	lsls	r2, r3, #2
 8004192:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004196:	4013      	ands	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800419c:	0f92      	lsrs	r2, r2, #30
 800419e:	431a      	orrs	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a8:	0edb      	lsrs	r3, r3, #27
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ba:	0e1b      	lsrs	r3, r3, #24
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041cc:	0d5b      	lsrs	r3, r3, #21
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f0:	0bdb      	lsrs	r3, r3, #15
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	3302      	adds	r3, #2
 8004214:	2201      	movs	r2, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800421e:	fb02 f203 	mul.w	r2, r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7a1b      	ldrb	r3, [r3, #8]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	2201      	movs	r2, #1
 8004232:	409a      	lsls	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004240:	0a52      	lsrs	r2, r2, #9
 8004242:	fb02 f203 	mul.w	r2, r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004250:	661a      	str	r2, [r3, #96]	; 0x60
 8004252:	e031      	b.n	80042b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	2b01      	cmp	r3, #1
 800425a:	d11d      	bne.n	8004298 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	3301      	adds	r3, #1
 8004278:	029a      	lsls	r2, r3, #10
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	661a      	str	r2, [r3, #96]	; 0x60
 8004296:	e00f      	b.n	80042b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_SD_GetCardCSD+0x344>)
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e09d      	b.n	80043f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042bc:	0b9b      	lsrs	r3, r3, #14
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	09db      	lsrs	r3, r3, #7
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	0fdb      	lsrs	r3, r3, #31
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	0f5b      	lsrs	r3, r3, #29
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	b2da      	uxtb	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	b2da      	uxtb	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	0d9b      	lsrs	r3, r3, #22
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	0d5b      	lsrs	r3, r3, #21
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	0bdb      	lsrs	r3, r3, #15
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	0b9b      	lsrs	r3, r3, #14
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	0b5b      	lsrs	r3, r3, #13
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	0b1b      	lsrs	r3, r3, #12
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	004005ff 	.word	0x004005ff

08004404 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af04      	add	r7, sp, #16
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	2b03      	cmp	r3, #3
 800447a:	d02e      	beq.n	80044da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d106      	bne.n	8004492 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
 8004490:	e029      	b.n	80044e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004498:	d10a      	bne.n	80044b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa84 	bl	80049a8 <SD_WideBus_Enable>
 80044a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
 80044ae:	e01a      	b.n	80044e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fac1 	bl	8004a3e <SD_WideBus_Disable>
 80044bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
 80044ca:	e00c      	b.n	80044e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
 80044d8:	e005      	b.n	80044e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_SD_ConfigWideBusOperation+0x128>)
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044fc:	e01f      	b.n	800453e <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681d      	ldr	r5, [r3, #0]
 8004524:	466c      	mov	r4, sp
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800452e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004538:	4628      	mov	r0, r5
 800453a:	f000 fc3b 	bl	8004db4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fd12 	bl	8004f70 <SDMMC_CmdBlockLength>
 800454c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_SD_ConfigWideBusOperation+0x128>)
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800457a:	4618      	mov	r0, r3
 800457c:	3728      	adds	r7, #40	; 0x28
 800457e:	46bd      	mov	sp, r7
 8004580:	bdb0      	pop	{r4, r5, r7, pc}
 8004582:	bf00      	nop
 8004584:	004005ff 	.word	0x004005ff

08004588 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9dc 	bl	8004958 <SD_SendStatus>
 80045a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	0a5b      	lsrs	r3, r3, #9
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045be:	693b      	ldr	r3, [r7, #16]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f240 523a 	movw	r2, #1338	; 0x53a
 80045de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ffd1 	bl	8004588 <HAL_SD_GetCardState>
 80045e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d002      	beq.n	8004602 <SD_DMATxAbort+0x3a>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d10a      	bne.n	8004618 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fd5c 	bl	80050c4 <SDMMC_CmdStopTransfer>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	431a      	orrs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f001 f9d7 	bl	80059d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004626:	e002      	b.n	800462e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff fd3d 	bl	80040a8 <HAL_SD_ErrorCallback>
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f240 523a 	movw	r2, #1338	; 0x53a
 800464c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff9a 	bl	8004588 <HAL_SD_GetCardState>
 8004654:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d002      	beq.n	8004670 <SD_DMARxAbort+0x3a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d10a      	bne.n	8004686 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fd25 	bl	80050c4 <SDMMC_CmdStopTransfer>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f001 f9a0 	bl	80059d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004694:	e002      	b.n	800469c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f7ff fd06 	bl	80040a8 <HAL_SD_ErrorCallback>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	b094      	sub	sp, #80	; 0x50
 80046a8:	af04      	add	r7, sp, #16
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fbd7 	bl	8004e68 <SDMMC_GetPowerState>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046c4:	e0b6      	b.n	8004834 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d02f      	beq.n	800472e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fe00 	bl	80052d8 <SDMMC_CmdSendCID>
 80046d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	e0a7      	b.n	8004834 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fc01 	bl	8004ef2 <SDMMC_GetResponse>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2104      	movs	r1, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fbf8 	bl	8004ef2 <SDMMC_GetResponse>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2108      	movs	r1, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fbef 	bl	8004ef2 <SDMMC_GetResponse>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	210c      	movs	r1, #12
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fbe6 	bl	8004ef2 <SDMMC_GetResponse>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	2b03      	cmp	r3, #3
 8004734:	d00d      	beq.n	8004752 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f107 020e 	add.w	r2, r7, #14
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fe06 	bl	8005352 <SDMMC_CmdSetRelAdd>
 8004746:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SD_InitCard+0xae>
    {
      return errorstate;
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	e070      	b.n	8004834 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	2b03      	cmp	r3, #3
 8004758:	d036      	beq.n	80047c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 fdd0 	bl	8005314 <SDMMC_CmdSendCSD>
 8004774:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <SD_InitCard+0xdc>
    {
      return errorstate;
 800477c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477e:	e059      	b.n	8004834 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fbb3 	bl	8004ef2 <SDMMC_GetResponse>
 800478c:	4602      	mov	r2, r0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2104      	movs	r1, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fbaa 	bl	8004ef2 <SDMMC_GetResponse>
 800479e:	4602      	mov	r2, r0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2108      	movs	r1, #8
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fba1 	bl	8004ef2 <SDMMC_GetResponse>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	210c      	movs	r1, #12
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fb98 	bl	8004ef2 <SDMMC_GetResponse>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2104      	movs	r1, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb8f 	bl	8004ef2 <SDMMC_GetResponse>
 80047d4:	4603      	mov	r3, r0
 80047d6:	0d1a      	lsrs	r2, r3, #20
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fc6a 	bl	80040bc <HAL_SD_GetCardCSD>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047f2:	e01f      	b.n	8004834 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	4608      	mov	r0, r1
 8004806:	f000 fc7f 	bl	8005108 <SDMMC_CmdSelDesel>
 800480a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SD_InitCard+0x172>
  {
    return errorstate;
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	e00e      	b.n	8004834 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681d      	ldr	r5, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	466c      	mov	r4, sp
 800481e:	f103 0210 	add.w	r2, r3, #16
 8004822:	ca07      	ldmia	r2, {r0, r1, r2}
 8004824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004828:	3304      	adds	r3, #4
 800482a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fac1 	bl	8004db4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3740      	adds	r7, #64	; 0x40
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}

0800483c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc7a 	bl	800514e <SDMMC_CmdGoIdleState>
 800485a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	e072      	b.n	800494c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fc8d 	bl	800518a <SDMMC_CmdOperCond>
 8004870:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fc63 	bl	800514e <SDMMC_CmdGoIdleState>
 8004888:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	e05b      	b.n	800494c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d137      	bne.n	8004912 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fc8d 	bl	80051c8 <SDMMC_CmdAppCommand>
 80048ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02d      	beq.n	8004912 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048ba:	e047      	b.n	800494c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fc80 	bl	80051c8 <SDMMC_CmdAppCommand>
 80048c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	e03b      	b.n	800494c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	491e      	ldr	r1, [pc, #120]	; (8004954 <SD_PowerON+0x118>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fc96 	bl	800520c <SDMMC_CmdAppOperCommand>
 80048e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048ec:	e02e      	b.n	800494c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fafc 	bl	8004ef2 <SDMMC_GetResponse>
 80048fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	0fdb      	lsrs	r3, r3, #31
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <SD_PowerON+0xcc>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <SD_PowerON+0xce>
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]

    count++;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3301      	adds	r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004918:	4293      	cmp	r3, r2
 800491a:	d802      	bhi.n	8004922 <SD_PowerON+0xe6>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0cc      	beq.n	80048bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004928:	4293      	cmp	r3, r2
 800492a:	d902      	bls.n	8004932 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800492c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004930:	e00c      	b.n	800494c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
 8004942:	e002      	b.n	800494a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	c1100000 	.word	0xc1100000

08004958 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800496c:	e018      	b.n	80049a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 fd0a 	bl	8005394 <SDMMC_CmdSendStatus>
 8004980:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	e009      	b.n	80049a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f000 faad 	bl	8004ef2 <SDMMC_GetResponse>
 8004998:	4602      	mov	r2, r0
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa97 	bl	8004ef2 <SDMMC_GetResponse>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ce:	d102      	bne.n	80049d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049d4:	e02f      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f879 	bl	8004ad4 <SD_FindSCR>
 80049e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	e023      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01c      	beq.n	8004a32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fbdf 	bl	80051c8 <SDMMC_CmdAppCommand>
 8004a0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e00f      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fc18 	bl	8005252 <SDMMC_CmdBusWidth>
 8004a22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	e003      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e001      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa4c 	bl	8004ef2 <SDMMC_GetResponse>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a64:	d102      	bne.n	8004a6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a6a:	e02f      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f82e 	bl	8004ad4 <SD_FindSCR>
 8004a78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	e023      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01c      	beq.n	8004ac8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 fb94 	bl	80051c8 <SDMMC_CmdAppCommand>
 8004aa0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	e00f      	b.n	8004acc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fbcd 	bl	8005252 <SDMMC_CmdBusWidth>
 8004ab8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	e003      	b.n	8004acc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e001      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b08f      	sub	sp, #60	; 0x3c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ade:	f7fb ff0f 	bl	8000900 <HAL_GetTick>
 8004ae2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2108      	movs	r1, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa38 	bl	8004f70 <SDMMC_CmdBlockLength>
 8004b00:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	e0a9      	b.n	8004c60 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 fb55 	bl	80051c8 <SDMMC_CmdAppCommand>
 8004b1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	e09a      	b.n	8004c60 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004b30:	2308      	movs	r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b34:	2330      	movs	r3, #48	; 0x30
 8004b36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f107 0210 	add.w	r2, r7, #16
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f9e2 	bl	8004f18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb9c 	bl	8005296 <SDMMC_CmdSendSCR>
 8004b5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d022      	beq.n	8004bac <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	e07a      	b.n	8004c60 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f107 0208 	add.w	r2, r7, #8
 8004b84:	18d4      	adds	r4, r2, r3
 8004b86:	4608      	mov	r0, r1
 8004b88:	f000 f941 	bl	8004e0e <SDMMC_ReadFIFO>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	6023      	str	r3, [r4, #0]
      index++;
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	3301      	adds	r3, #1
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b96:	f7fb feb3 	bl	8000900 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba4:	d102      	bne.n	8004bac <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004baa:	e059      	b.n	8004c60 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb2:	f240 432a 	movw	r3, #1066	; 0x42a
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0d6      	beq.n	8004b6a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	e044      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2202      	movs	r2, #2
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bec:	2302      	movs	r3, #2
 8004bee:	e037      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2220      	movs	r2, #32
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e02a      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	061a      	lsls	r2, r3, #24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0e1b      	lsrs	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	601a      	str	r2, [r3, #0]
    scr++;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	3304      	adds	r3, #4
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	061a      	lsls	r2, r3, #24
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	373c      	adds	r7, #60	; 0x3c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd90      	pop	{r4, r7, pc}

08004c68 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d03f      	beq.n	8004d02 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e033      	b.n	8004cf0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f8be 	bl	8004e0e <SDMMC_ReadFIFO>
 8004c92:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	0e1b      	lsrs	r3, r3, #24
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	3301      	adds	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b07      	cmp	r3, #7
 8004cf4:	d9c8      	bls.n	8004c88 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d043      	beq.n	8004dac <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e037      	b.n	8004d9a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	021a      	lsls	r2, r3, #8
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	061a      	lsls	r2, r3, #24
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f107 0208 	add.w	r2, r7, #8
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f84a 	bl	8004e28 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b07      	cmp	r3, #7
 8004d9e:	d9c4      	bls.n	8004d2a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 001c 	add.w	r0, r7, #28
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004dd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8004dd6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004dda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004dde:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004de2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	b004      	add	sp, #16
 8004e0c:	4770      	bx	lr

08004e0e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2203      	movs	r2, #3
 8004e56:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004e58:	2002      	movs	r0, #2
 8004e5a:	f7fb fd5d 	bl	8000918 <HAL_Delay>

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0303 	and.w	r3, r3, #3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ea2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ea8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004eae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	b2db      	uxtb	r3, r3
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3314      	adds	r3, #20
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0

}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f7e:	2310      	movs	r3, #16
 8004f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f82:	2340      	movs	r3, #64	; 0x40
 8004f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f90:	f107 0308 	add.w	r3, r7, #8
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff74 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa18 	bl	80053d8 <SDMMC_GetCmdResp1>
 8004fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004faa:	69fb      	ldr	r3, [r7, #28]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004fc2:	2311      	movs	r3, #17
 8004fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff52 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	2111      	movs	r1, #17
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9f6 	bl	80053d8 <SDMMC_GetCmdResp1>
 8004fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fee:	69fb      	ldr	r3, [r7, #28]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005006:	2312      	movs	r3, #18
 8005008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff ff30 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	2112      	movs	r1, #18
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9d4 	bl	80053d8 <SDMMC_GetCmdResp1>
 8005030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005032:	69fb      	ldr	r3, [r7, #28]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800504a:	2318      	movs	r3, #24
 800504c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff0e 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	2118      	movs	r1, #24
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9b2 	bl	80053d8 <SDMMC_GetCmdResp1>
 8005074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005076:	69fb      	ldr	r3, [r7, #28]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800508e:	2319      	movs	r3, #25
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff feec 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	2119      	movs	r1, #25
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f990 	bl	80053d8 <SDMMC_GetCmdResp1>
 80050b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80050d0:	230c      	movs	r3, #12
 80050d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fecb 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <SDMMC_CmdStopTransfer+0x40>)
 80050f0:	210c      	movs	r1, #12
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f970 	bl	80053d8 <SDMMC_GetCmdResp1>
 80050f8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80050fa:	69fb      	ldr	r3, [r7, #28]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	05f5e100 	.word	0x05f5e100

08005108 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005118:	2307      	movs	r3, #7
 800511a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005128:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800512a:	f107 0310 	add.w	r3, r7, #16
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fea7 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	2107      	movs	r1, #7
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f94b 	bl	80053d8 <SDMMC_GetCmdResp1>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b088      	sub	sp, #32
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe86 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb65 	bl	8005848 <SDMMC_GetCmdError>
 800517e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005180:	69fb      	ldr	r3, [r7, #28]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b088      	sub	sp, #32
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005192:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005198:	2308      	movs	r3, #8
 800519a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe67 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 faf8 	bl	80057ac <SDMMC_GetCmdResp7>
 80051bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051be:	69fb      	ldr	r3, [r7, #28]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051d6:	2337      	movs	r3, #55	; 0x37
 80051d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fe48 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80051f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f8:	2137      	movs	r1, #55	; 0x37
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8ec 	bl	80053d8 <SDMMC_GetCmdResp1>
 8005200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005202:	69fb      	ldr	r3, [r7, #28]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005220:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005222:	2329      	movs	r3, #41	; 0x29
 8005224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005226:	2340      	movs	r3, #64	; 0x40
 8005228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800522e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005232:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fe22 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f9ff 	bl	8005644 <SDMMC_GetCmdResp3>
 8005246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005248:	69fb      	ldr	r3, [r7, #28]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b088      	sub	sp, #32
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005260:	2306      	movs	r3, #6
 8005262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800526c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fe03 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	2106      	movs	r1, #6
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8a7 	bl	80053d8 <SDMMC_GetCmdResp1>
 800528a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80052a2:	2333      	movs	r3, #51	; 0x33
 80052a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fde2 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	2133      	movs	r1, #51	; 0x33
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f886 	bl	80053d8 <SDMMC_GetCmdResp1>
 80052cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ce:	69fb      	ldr	r3, [r7, #28]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80052e4:	2302      	movs	r3, #2
 80052e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80052e8:	23c0      	movs	r3, #192	; 0xc0
 80052ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fdc1 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f956 	bl	80055b4 <SDMMC_GetCmdResp2>
 8005308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800530a:	69fb      	ldr	r3, [r7, #28]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005322:	2309      	movs	r3, #9
 8005324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005326:	23c0      	movs	r3, #192	; 0xc0
 8005328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800532e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005334:	f107 0308 	add.w	r3, r7, #8
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff fda2 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f937 	bl	80055b4 <SDMMC_GetCmdResp2>
 8005346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005348:	69fb      	ldr	r3, [r7, #28]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005360:	2303      	movs	r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005372:	f107 0308 	add.w	r3, r7, #8
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fd83 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	2103      	movs	r1, #3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f99c 	bl	80056c0 <SDMMC_GetCmdResp6>
 8005388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800538a:	69fb      	ldr	r3, [r7, #28]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80053a2:	230d      	movs	r3, #13
 80053a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fd62 	bl	8004e84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c4:	210d      	movs	r1, #13
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f806 	bl	80053d8 <SDMMC_GetCmdResp1>
 80053cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ce:	69fb      	ldr	r3, [r7, #28]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	460b      	mov	r3, r1
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053e6:	4b70      	ldr	r3, [pc, #448]	; (80055a8 <SDMMC_GetCmdResp1+0x1d0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a70      	ldr	r2, [pc, #448]	; (80055ac <SDMMC_GetCmdResp1+0x1d4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	0a5a      	lsrs	r2, r3, #9
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	1e5a      	subs	r2, r3, #1
 80053fe:	61fa      	str	r2, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005408:	e0c9      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0ef      	beq.n	80053fa <SDMMC_GetCmdResp1+0x22>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ea      	bne.n	80053fa <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2204      	movs	r2, #4
 8005434:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005436:	2304      	movs	r3, #4
 8005438:	e0b1      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800544c:	2301      	movs	r3, #1
 800544e:	e0a6      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	22c5      	movs	r2, #197	; 0xc5
 8005454:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fd3e 	bl	8004ed8 <SDMMC_GetCommandResponse>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	4293      	cmp	r3, r2
 8005464:	d001      	beq.n	800546a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005466:	2301      	movs	r3, #1
 8005468:	e099      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800546a:	2100      	movs	r1, #0
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fd40 	bl	8004ef2 <SDMMC_GetResponse>
 8005472:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4b4e      	ldr	r3, [pc, #312]	; (80055b0 <SDMMC_GetCmdResp1+0x1d8>)
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800547e:	2300      	movs	r3, #0
 8005480:	e08d      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	da02      	bge.n	800548e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800548c:	e087      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	e080      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	e079      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80054b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054b8:	e071      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80054c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c8:	e069      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d8:	e061      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054e8:	e059      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f8:	e051      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005508:	e049      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005518:	e041      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005528:	e039      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005538:	e031      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005544:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005548:	e029      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005558:	e021      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005564:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005568:	e019      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005574:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005578:	e011      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005588:	e009      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005594:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005598:	e001      	b.n	800559e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800559a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000000 	.word	0x20000000
 80055ac:	10624dd3 	.word	0x10624dd3
 80055b0:	fdffe008 	.word	0xfdffe008

080055b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <SDMMC_GetCmdResp2+0x88>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <SDMMC_GetCmdResp2+0x8c>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	0a5b      	lsrs	r3, r3, #9
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	60fa      	str	r2, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055e0:	e026      	b.n	8005630 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ef      	beq.n	80055d2 <SDMMC_GetCmdResp2+0x1e>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ea      	bne.n	80055d2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800560e:	2304      	movs	r3, #4
 8005610:	e00e      	b.n	8005630 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005624:	2301      	movs	r3, #1
 8005626:	e003      	b.n	8005630 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	22c5      	movs	r2, #197	; 0xc5
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000000 	.word	0x20000000
 8005640:	10624dd3 	.word	0x10624dd3

08005644 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <SDMMC_GetCmdResp3+0x74>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <SDMMC_GetCmdResp3+0x78>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	60fa      	str	r2, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800566c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005670:	e01b      	b.n	80056aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ef      	beq.n	8005662 <SDMMC_GetCmdResp3+0x1e>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ea      	bne.n	8005662 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2204      	movs	r2, #4
 800569c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800569e:	2304      	movs	r3, #4
 80056a0:	e003      	b.n	80056aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	22c5      	movs	r2, #197	; 0xc5
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000000 	.word	0x20000000
 80056bc:	10624dd3 	.word	0x10624dd3

080056c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	460b      	mov	r3, r1
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056ce:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <SDMMC_GetCmdResp6+0xe4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <SDMMC_GetCmdResp6+0xe8>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0a5b      	lsrs	r3, r3, #9
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056f2:	e052      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ef      	beq.n	80056e4 <SDMMC_GetCmdResp6+0x24>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ea      	bne.n	80056e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2204      	movs	r2, #4
 800571e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005720:	2304      	movs	r3, #4
 8005722:	e03a      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005736:	2301      	movs	r3, #1
 8005738:	e02f      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fbcc 	bl	8004ed8 <SDMMC_GetCommandResponse>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	4293      	cmp	r3, r2
 8005748:	d001      	beq.n	800574e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800574a:	2301      	movs	r3, #1
 800574c:	e025      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	22c5      	movs	r2, #197	; 0xc5
 8005752:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005754:	2100      	movs	r1, #0
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fbcb 	bl	8004ef2 <SDMMC_GetResponse>
 800575c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005772:	2300      	movs	r3, #0
 8005774:	e011      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005784:	e009      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005794:	e001      	b.n	800579a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000
 80057a8:	10624dd3 	.word	0x10624dd3

080057ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <SDMMC_GetCmdResp7+0x94>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a22      	ldr	r2, [pc, #136]	; (8005844 <SDMMC_GetCmdResp7+0x98>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a5b      	lsrs	r3, r3, #9
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	60fa      	str	r2, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057d8:	e02c      	b.n	8005834 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ef      	beq.n	80057ca <SDMMC_GetCmdResp7+0x1e>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ea      	bne.n	80057ca <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005806:	2304      	movs	r3, #4
 8005808:	e014      	b.n	8005834 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800581c:	2301      	movs	r3, #1
 800581e:	e009      	b.n	8005834 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2240      	movs	r2, #64	; 0x40
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005832:	2300      	movs	r3, #0

}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000000 	.word	0x20000000
 8005844:	10624dd3 	.word	0x10624dd3

08005848 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <SDMMC_GetCmdError+0x50>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <SDMMC_GetCmdError+0x54>)
 8005856:	fba2 2303 	umull	r2, r3, r2, r3
 800585a:	0a5b      	lsrs	r3, r3, #9
 800585c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	60fa      	str	r2, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005874:	e009      	b.n	800588a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f1      	beq.n	8005866 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	22c5      	movs	r2, #197	; 0xc5
 8005886:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000000 	.word	0x20000000
 800589c:	10624dd3 	.word	0x10624dd3

080058a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80058a4:	4904      	ldr	r1, [pc, #16]	; (80058b8 <MX_FATFS_Init+0x18>)
 80058a6:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_FATFS_Init+0x1c>)
 80058a8:	f003 f8e8 	bl	8008a7c <FATFS_LinkDriver>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <MX_FATFS_Init+0x20>)
 80058b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000178 	.word	0x20000178
 80058bc:	08008bc0 	.word	0x08008bc0
 80058c0:	20000174 	.word	0x20000174

080058c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80058c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80058de:	f000 f8ac 	bl	8005a3a <BSP_SD_IsDetected>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d001      	beq.n	80058ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80058e8:	2302      	movs	r3, #2
 80058ea:	e012      	b.n	8005912 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80058ec:	480b      	ldr	r0, [pc, #44]	; (800591c <BSP_SD_Init+0x48>)
 80058ee:	f7fd fe19 	bl	8003524 <HAL_SD_Init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80058fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <BSP_SD_Init+0x48>)
 8005902:	f7fe fdab 	bl	800445c <HAL_SD_ConfigWideBusOperation>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005910:	79fb      	ldrb	r3, [r7, #7]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	2000005c 	.word	0x2000005c

08005920 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	4806      	ldr	r0, [pc, #24]	; (8005958 <BSP_SD_ReadBlocks+0x38>)
 800593e:	f7fd fed9 	bl	80036f4 <HAL_SD_ReadBlocks>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000005c 	.word	0x2000005c

0800595c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	4806      	ldr	r0, [pc, #24]	; (8005994 <BSP_SD_WriteBlocks+0x38>)
 800597a:	f7fe f899 	bl	8003ab0 <HAL_SD_WriteBlocks>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000005c 	.word	0x2000005c

08005998 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800599c:	4805      	ldr	r0, [pc, #20]	; (80059b4 <BSP_SD_GetCardState+0x1c>)
 800599e:	f7fe fdf3 	bl	8004588 <HAL_SD_GetCardState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2000005c 	.word	0x2000005c

080059b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4803      	ldr	r0, [pc, #12]	; (80059d0 <BSP_SD_GetCardInfo+0x18>)
 80059c4:	f7fe fd1e 	bl	8004404 <HAL_SD_GetCardInfo>
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000005c 	.word	0x2000005c

080059d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80059dc:	f000 f818 	bl	8005a10 <BSP_SD_AbortCallback>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80059f0:	f000 f815 	bl	8005a1e <BSP_SD_WriteCpltCallback>
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005a04:	f000 f812 	bl	8005a2c <BSP_SD_ReadCpltCallback>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0

}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0

}
 8005a22:	bf00      	nop
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0

}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005a40:	2301      	movs	r3, #1
 8005a42:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005a44:	f000 f80b 	bl	8005a5e <BSP_PlatformIsDetected>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	b2db      	uxtb	r3, r3
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005a64:	2301      	movs	r3, #1
 8005a66:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a70:	f7fb fbda 	bl	8001228 <HAL_GPIO_ReadPin>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <SD_CheckStatus+0x38>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005a98:	f7ff ff7e 	bl	8005998 <BSP_SD_GetCardState>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d107      	bne.n	8005ab2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <SD_CheckStatus+0x38>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <SD_CheckStatus+0x38>)
 8005ab0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005ab2:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <SD_CheckStatus+0x38>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000009 	.word	0x20000009

08005ac4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <SD_initialize+0x38>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005ad4:	f7ff fefe 	bl	80058d4 <BSP_SD_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ffd1 	bl	8005a88 <SD_CheckStatus>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b04      	ldr	r3, [pc, #16]	; (8005afc <SD_initialize+0x38>)
 8005aec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005aee:	4b03      	ldr	r3, [pc, #12]	; (8005afc <SD_initialize+0x38>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b2db      	uxtb	r3, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000009 	.word	0x20000009

08005b00 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ffbb 	bl	8005a88 <SD_CheckStatus>
 8005b12:	4603      	mov	r3, r0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68b8      	ldr	r0, [r7, #8]
 8005b3a:	f7ff fef1 	bl	8005920 <BSP_SD_ReadBlocks>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b44:	bf00      	nop
 8005b46:	f7ff ff27 	bl	8005998 <BSP_SD_GetCardState>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1fa      	bne.n	8005b46 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b086      	sub	sp, #24
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	68b8      	ldr	r0, [r7, #8]
 8005b7c:	f7ff feee 	bl	800595c <BSP_SD_WriteBlocks>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005b86:	bf00      	nop
 8005b88:	f7ff ff06 	bl	8005998 <BSP_SD_GetCardState>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1fa      	bne.n	8005b88 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	603a      	str	r2, [r7, #0]
 8005baa:	71fb      	strb	r3, [r7, #7]
 8005bac:	460b      	mov	r3, r1
 8005bae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <SD_ioctl+0xac>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <SD_ioctl+0x28>
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e03c      	b.n	8005c42 <SD_ioctl+0xa2>

  switch (cmd)
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d834      	bhi.n	8005c38 <SD_ioctl+0x98>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <SD_ioctl+0x34>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bed 	.word	0x08005bed
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c1f 	.word	0x08005c1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bea:	e028      	b.n	8005c3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bec:	f107 030c 	add.w	r3, r7, #12
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff fee1 	bl	80059b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c02:	e01c      	b.n	8005c3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff fed5 	bl	80059b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c1c:	e00f      	b.n	8005c3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fec8 	bl	80059b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	0a5a      	lsrs	r2, r3, #9
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c36:	e002      	b.n	8005c3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3730      	adds	r7, #48	; 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000009 	.word	0x20000009

08005c50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <disk_status+0x30>)
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	79fa      	ldrb	r2, [r7, #7]
 8005c68:	4905      	ldr	r1, [pc, #20]	; (8005c80 <disk_status+0x30>)
 8005c6a:	440a      	add	r2, r1
 8005c6c:	7a12      	ldrb	r2, [r2, #8]
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4798      	blx	r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000050 	.word	0x20000050

08005c84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <disk_initialize+0x48>)
 8005c96:	5cd3      	ldrb	r3, [r2, r3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <disk_initialize+0x48>)
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <disk_initialize+0x48>)
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	79fa      	ldrb	r2, [r7, #7]
 8005cb2:	4906      	ldr	r1, [pc, #24]	; (8005ccc <disk_initialize+0x48>)
 8005cb4:	440a      	add	r2, r1
 8005cb6:	7a12      	ldrb	r2, [r2, #8]
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000050 	.word	0x20000050

08005cd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4603      	mov	r3, r0
 8005cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <disk_read+0x3c>)
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	689c      	ldr	r4, [r3, #8]
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <disk_read+0x3c>)
 8005cf0:	4413      	add	r3, r2
 8005cf2:	7a18      	ldrb	r0, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	47a0      	blx	r4
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000050 	.word	0x20000050

08005d10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <disk_write+0x3c>)
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	68dc      	ldr	r4, [r3, #12]
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <disk_write+0x3c>)
 8005d30:	4413      	add	r3, r2
 8005d32:	7a18      	ldrb	r0, [r3, #8]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	47a0      	blx	r4
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000050 	.word	0x20000050

08005d50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	603a      	str	r2, [r7, #0]
 8005d5a:	71fb      	strb	r3, [r7, #7]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <disk_ioctl+0x38>)
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	79fa      	ldrb	r2, [r7, #7]
 8005d6e:	4906      	ldr	r1, [pc, #24]	; (8005d88 <disk_ioctl+0x38>)
 8005d70:	440a      	add	r2, r1
 8005d72:	7a10      	ldrb	r0, [r2, #8]
 8005d74:	79b9      	ldrb	r1, [r7, #6]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4798      	blx	r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000050 	.word	0x20000050

08005d8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3301      	adds	r3, #1
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	b21a      	sxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b21b      	sxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005dae:	89fb      	ldrh	r3, [r7, #14]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3303      	adds	r3, #3
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	3202      	adds	r2, #2
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	3201      	adds	r2, #1
 8005de2:	7812      	ldrb	r2, [r2, #0]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005df4:	68fb      	ldr	r3, [r7, #12]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	887a      	ldrh	r2, [r7, #2]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	887b      	ldrh	r3, [r7, #2]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	0a1b      	lsrs	r3, r3, #8
 8005e76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	1c53      	adds	r3, r2, #1
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6179      	str	r1, [r7, #20]
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f1      	bne.n	8005eaa <mem_cpy+0x1a>
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	617a      	str	r2, [r7, #20]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f3      	bne.n	8005ee2 <mem_set+0x10>
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	61fa      	str	r2, [r7, #28]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	61ba      	str	r2, [r7, #24]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	1acb      	subs	r3, r1, r3
 8005f34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <mem_cmp+0x40>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0eb      	beq.n	8005f20 <mem_cmp+0x18>

	return r;
 8005f48:	697b      	ldr	r3, [r7, #20]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f60:	e002      	b.n	8005f68 <chk_chr+0x12>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3301      	adds	r3, #1
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <chk_chr+0x26>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d1f2      	bne.n	8005f62 <chk_chr+0xc>
	return *str;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e029      	b.n	8005ff4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005fa0:	4a27      	ldr	r2, [pc, #156]	; (8006040 <chk_lock+0xb4>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	4413      	add	r3, r2
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01d      	beq.n	8005fea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fae:	4a24      	ldr	r2, [pc, #144]	; (8006040 <chk_lock+0xb4>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d116      	bne.n	8005fee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <chk_lock+0xb4>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3304      	adds	r3, #4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d10c      	bne.n	8005fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <chk_lock+0xb4>)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	3308      	adds	r3, #8
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d102      	bne.n	8005fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fe8:	e007      	b.n	8005ffa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005fea:	2301      	movs	r3, #1
 8005fec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d9d2      	bls.n	8005fa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d109      	bne.n	8006014 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <chk_lock+0x80>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d101      	bne.n	8006010 <chk_lock+0x84>
 800600c:	2300      	movs	r3, #0
 800600e:	e010      	b.n	8006032 <chk_lock+0xa6>
 8006010:	2312      	movs	r3, #18
 8006012:	e00e      	b.n	8006032 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d108      	bne.n	800602c <chk_lock+0xa0>
 800601a:	4a09      	ldr	r2, [pc, #36]	; (8006040 <chk_lock+0xb4>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	4413      	add	r3, r2
 8006022:	330c      	adds	r3, #12
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	d101      	bne.n	8006030 <chk_lock+0xa4>
 800602c:	2310      	movs	r3, #16
 800602e:	e000      	b.n	8006032 <chk_lock+0xa6>
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000030 	.word	0x20000030

08006044 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	e002      	b.n	8006056 <enq_lock+0x12>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3301      	adds	r3, #1
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d806      	bhi.n	800606a <enq_lock+0x26>
 800605c:	4a09      	ldr	r2, [pc, #36]	; (8006084 <enq_lock+0x40>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4413      	add	r3, r2
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f2      	bne.n	8006050 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b02      	cmp	r3, #2
 800606e:	bf14      	ite	ne
 8006070:	2301      	movne	r3, #1
 8006072:	2300      	moveq	r3, #0
 8006074:	b2db      	uxtb	r3, r3
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000030 	.word	0x20000030

08006088 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e01f      	b.n	80060d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006098:	4a41      	ldr	r2, [pc, #260]	; (80061a0 <inc_lock+0x118>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	4413      	add	r3, r2
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d113      	bne.n	80060d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060aa:	4a3d      	ldr	r2, [pc, #244]	; (80061a0 <inc_lock+0x118>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d109      	bne.n	80060d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80060be:	4a38      	ldr	r2, [pc, #224]	; (80061a0 <inc_lock+0x118>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	3308      	adds	r3, #8
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d006      	beq.n	80060e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d9dc      	bls.n	8006098 <inc_lock+0x10>
 80060de:	e000      	b.n	80060e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80060e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d132      	bne.n	800614e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e002      	b.n	80060f4 <inc_lock+0x6c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3301      	adds	r3, #1
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d806      	bhi.n	8006108 <inc_lock+0x80>
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <inc_lock+0x118>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4413      	add	r3, r2
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f2      	bne.n	80060ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d101      	bne.n	8006112 <inc_lock+0x8a>
 800610e:	2300      	movs	r3, #0
 8006110:	e040      	b.n	8006194 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4922      	ldr	r1, [pc, #136]	; (80061a0 <inc_lock+0x118>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	440b      	add	r3, r1
 800611e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	491e      	ldr	r1, [pc, #120]	; (80061a0 <inc_lock+0x118>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	440b      	add	r3, r1
 800612c:	3304      	adds	r3, #4
 800612e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	491a      	ldr	r1, [pc, #104]	; (80061a0 <inc_lock+0x118>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	440b      	add	r3, r1
 800613c:	3308      	adds	r3, #8
 800613e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006140:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <inc_lock+0x118>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4413      	add	r3, r2
 8006148:	330c      	adds	r3, #12
 800614a:	2200      	movs	r2, #0
 800614c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <inc_lock+0xe0>
 8006154:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <inc_lock+0x118>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	4413      	add	r3, r2
 800615c:	330c      	adds	r3, #12
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <inc_lock+0xe0>
 8006164:	2300      	movs	r3, #0
 8006166:	e015      	b.n	8006194 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <inc_lock+0xf8>
 800616e:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <inc_lock+0x118>)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	4413      	add	r3, r2
 8006176:	330c      	adds	r3, #12
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	e001      	b.n	8006184 <inc_lock+0xfc>
 8006180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006184:	4906      	ldr	r1, [pc, #24]	; (80061a0 <inc_lock+0x118>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	440b      	add	r3, r1
 800618c:	330c      	adds	r3, #12
 800618e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000030 	.word	0x20000030

080061a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d825      	bhi.n	8006204 <dec_lock+0x60>
		n = Files[i].ctr;
 80061b8:	4a17      	ldr	r2, [pc, #92]	; (8006218 <dec_lock+0x74>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	4413      	add	r3, r2
 80061c0:	330c      	adds	r3, #12
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061c6:	89fb      	ldrh	r3, [r7, #14]
 80061c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061cc:	d101      	bne.n	80061d2 <dec_lock+0x2e>
 80061ce:	2300      	movs	r3, #0
 80061d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061d2:	89fb      	ldrh	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <dec_lock+0x3a>
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	3b01      	subs	r3, #1
 80061dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061de:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <dec_lock+0x74>)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	4413      	add	r3, r2
 80061e6:	330c      	adds	r3, #12
 80061e8:	89fa      	ldrh	r2, [r7, #14]
 80061ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061ec:	89fb      	ldrh	r3, [r7, #14]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <dec_lock+0x5a>
 80061f2:	4a09      	ldr	r2, [pc, #36]	; (8006218 <dec_lock+0x74>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4413      	add	r3, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	737b      	strb	r3, [r7, #13]
 8006202:	e001      	b.n	8006208 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006204:	2302      	movs	r3, #2
 8006206:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006208:	7b7b      	ldrb	r3, [r7, #13]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000030 	.word	0x20000030

0800621c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e010      	b.n	800624c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800622a:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <clear_lock+0x44>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	4413      	add	r3, r2
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d105      	bne.n	8006246 <clear_lock+0x2a>
 800623a:	4a09      	ldr	r2, [pc, #36]	; (8006260 <clear_lock+0x44>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	4413      	add	r3, r2
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d9eb      	bls.n	800622a <clear_lock+0xe>
	}
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000030 	.word	0x20000030

08006264 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	78db      	ldrb	r3, [r3, #3]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d034      	beq.n	80062e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7858      	ldrb	r0, [r3, #1]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006288:	2301      	movs	r3, #1
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	f7ff fd40 	bl	8005d10 <disk_write>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006296:	2301      	movs	r3, #1
 8006298:	73fb      	strb	r3, [r7, #15]
 800629a:	e022      	b.n	80062e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d217      	bcs.n	80062e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	789b      	ldrb	r3, [r3, #2]
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	e010      	b.n	80062dc <sync_window+0x78>
					wsect += fs->fsize;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7858      	ldrb	r0, [r3, #1]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062ce:	2301      	movs	r3, #1
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	f7ff fd1d 	bl	8005d10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3b01      	subs	r3, #1
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d8eb      	bhi.n	80062ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d01b      	beq.n	800633c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ffad 	bl	8006264 <sync_window>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d113      	bne.n	800633c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7858      	ldrb	r0, [r3, #1]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800631e:	2301      	movs	r3, #1
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	f7ff fcd5 	bl	8005cd0 <disk_read>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800632c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006330:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ff87 	bl	8006264 <sync_window>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d158      	bne.n	8006412 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d148      	bne.n	80063fa <sync_fs+0xb2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d144      	bne.n	80063fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3330      	adds	r3, #48	; 0x30
 8006374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fda9 	bl	8005ed2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3330      	adds	r3, #48	; 0x30
 8006384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006388:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fd38 	bl	8005e02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3330      	adds	r3, #48	; 0x30
 8006396:	4921      	ldr	r1, [pc, #132]	; (800641c <sync_fs+0xd4>)
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fd4d 	bl	8005e38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3330      	adds	r3, #48	; 0x30
 80063a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063a6:	491e      	ldr	r1, [pc, #120]	; (8006420 <sync_fs+0xd8>)
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fd45 	bl	8005e38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3330      	adds	r3, #48	; 0x30
 80063b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f7ff fd3b 	bl	8005e38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3330      	adds	r3, #48	; 0x30
 80063c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7ff fd31 	bl	8005e38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	7858      	ldrb	r0, [r3, #1]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	2301      	movs	r3, #1
 80063f0:	f7ff fc8e 	bl	8005d10 <disk_write>
			fs->fsi_flag = 0;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fca4 	bl	8005d50 <disk_ioctl>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <sync_fs+0xca>
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	41615252 	.word	0x41615252
 8006420:	61417272 	.word	0x61417272

08006424 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	3b02      	subs	r3, #2
 8006432:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	3b02      	subs	r3, #2
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d301      	bcc.n	8006444 <clust2sect+0x20>
 8006440:	2300      	movs	r3, #0
 8006442:	e008      	b.n	8006456 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	895b      	ldrh	r3, [r3, #10]
 8006448:	461a      	mov	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	fb03 f202 	mul.w	r2, r3, r2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	4413      	add	r3, r2
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b086      	sub	sp, #24
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d904      	bls.n	8006482 <get_fat+0x20>
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e08f      	b.n	80065a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800648c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d062      	beq.n	800655c <get_fat+0xfa>
 8006496:	2b03      	cmp	r3, #3
 8006498:	dc7c      	bgt.n	8006594 <get_fat+0x132>
 800649a:	2b01      	cmp	r3, #1
 800649c:	d002      	beq.n	80064a4 <get_fat+0x42>
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d042      	beq.n	8006528 <get_fat+0xc6>
 80064a2:	e077      	b.n	8006594 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6a1a      	ldr	r2, [r3, #32]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	0a5b      	lsrs	r3, r3, #9
 80064ba:	4413      	add	r3, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	6938      	ldr	r0, [r7, #16]
 80064c0:	f7ff ff14 	bl	80062ec <move_window>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d167      	bne.n	800659a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	60fa      	str	r2, [r7, #12]
 80064d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0a5b      	lsrs	r3, r3, #9
 80064e6:	4413      	add	r3, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7ff fefe 	bl	80062ec <move_window>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d153      	bne.n	800659e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	461a      	mov	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <get_fat+0xbc>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	e002      	b.n	8006524 <get_fat+0xc2>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006524:	617b      	str	r3, [r7, #20]
			break;
 8006526:	e03f      	b.n	80065a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	4413      	add	r3, r2
 8006532:	4619      	mov	r1, r3
 8006534:	6938      	ldr	r0, [r7, #16]
 8006536:	f7ff fed9 	bl	80062ec <move_window>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d130      	bne.n	80065a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800654e:	4413      	add	r3, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fc1b 	bl	8005d8c <ld_word>
 8006556:	4603      	mov	r3, r0
 8006558:	617b      	str	r3, [r7, #20]
			break;
 800655a:	e025      	b.n	80065a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	09db      	lsrs	r3, r3, #7
 8006564:	4413      	add	r3, r2
 8006566:	4619      	mov	r1, r3
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f7ff febf 	bl	80062ec <move_window>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d118      	bne.n	80065a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006582:	4413      	add	r3, r2
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fc19 	bl	8005dbc <ld_dword>
 800658a:	4603      	mov	r3, r0
 800658c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006590:	617b      	str	r3, [r7, #20]
			break;
 8006592:	e009      	b.n	80065a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e006      	b.n	80065a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065a6:	bf00      	nop
		}
	}

	return val;
 80065a8:	697b      	ldr	r3, [r7, #20]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065b2:	b590      	push	{r4, r7, lr}
 80065b4:	b089      	sub	sp, #36	; 0x24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065be:	2302      	movs	r3, #2
 80065c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	f240 80d2 	bls.w	800676e <put_fat+0x1bc>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	f080 80cc 	bcs.w	800676e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	f000 8096 	beq.w	800670c <put_fat+0x15a>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	f300 80cd 	bgt.w	8006780 <put_fat+0x1ce>
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d002      	beq.n	80065f0 <put_fat+0x3e>
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d06e      	beq.n	80066cc <put_fat+0x11a>
 80065ee:	e0c7      	b.n	8006780 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4413      	add	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	0a5b      	lsrs	r3, r3, #9
 8006606:	4413      	add	r3, r2
 8006608:	4619      	mov	r1, r3
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fe6e 	bl	80062ec <move_window>
 8006610:	4603      	mov	r3, r0
 8006612:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006614:	7ffb      	ldrb	r3, [r7, #31]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 80ab 	bne.w	8006772 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	1c59      	adds	r1, r3, #1
 8006626:	61b9      	str	r1, [r7, #24]
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	4413      	add	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <put_fat+0xa4>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b25b      	sxtb	r3, r3
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	b25a      	sxtb	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	b25b      	sxtb	r3, r3
 800664e:	4313      	orrs	r3, r2
 8006650:	b25b      	sxtb	r3, r3
 8006652:	b2db      	uxtb	r3, r3
 8006654:	e001      	b.n	800665a <put_fat+0xa8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	0a5b      	lsrs	r3, r3, #9
 800666c:	4413      	add	r3, r2
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fe3b 	bl	80062ec <move_window>
 8006676:	4603      	mov	r3, r0
 8006678:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800667a:	7ffb      	ldrb	r3, [r7, #31]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d17a      	bne.n	8006776 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668c:	4413      	add	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <put_fat+0xf0>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e00e      	b.n	80066c0 <put_fat+0x10e>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f023 030f 	bic.w	r3, r3, #15
 80066ac:	b25a      	sxtb	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	b25b      	sxtb	r3, r3
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	70da      	strb	r2, [r3, #3]
			break;
 80066ca:	e059      	b.n	8006780 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	4413      	add	r3, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff fe07 	bl	80062ec <move_window>
 80066de:	4603      	mov	r3, r0
 80066e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066e2:	7ffb      	ldrb	r3, [r7, #31]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d148      	bne.n	800677a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066f6:	4413      	add	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	b292      	uxth	r2, r2
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fb7f 	bl	8005e02 <st_word>
			fs->wflag = 1;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	70da      	strb	r2, [r3, #3]
			break;
 800670a:	e039      	b.n	8006780 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	4413      	add	r3, r2
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fde7 	bl	80062ec <move_window>
 800671e:	4603      	mov	r3, r0
 8006720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d12a      	bne.n	800677e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800673c:	4413      	add	r3, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fb3c 	bl	8005dbc <ld_dword>
 8006744:	4603      	mov	r3, r0
 8006746:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800674a:	4323      	orrs	r3, r4
 800674c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800675c:	4413      	add	r3, r2
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fb69 	bl	8005e38 <st_dword>
			fs->wflag = 1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	70da      	strb	r2, [r3, #3]
			break;
 800676c:	e008      	b.n	8006780 <put_fat+0x1ce>
		}
	}
 800676e:	bf00      	nop
 8006770:	e006      	b.n	8006780 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006772:	bf00      	nop
 8006774:	e004      	b.n	8006780 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800677e:	bf00      	nop
	return res;
 8006780:	7ffb      	ldrb	r3, [r7, #31]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}

0800678a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d904      	bls.n	80067b0 <remove_chain+0x26>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d301      	bcc.n	80067b4 <remove_chain+0x2a>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e04b      	b.n	800684c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	69b8      	ldr	r0, [r7, #24]
 80067c2:	f7ff fef6 	bl	80065b2 <put_fat>
 80067c6:	4603      	mov	r3, r0
 80067c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067ca:	7ffb      	ldrb	r3, [r7, #31]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <remove_chain+0x4a>
 80067d0:	7ffb      	ldrb	r3, [r7, #31]
 80067d2:	e03b      	b.n	800684c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fe43 	bl	8006462 <get_fat>
 80067dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d031      	beq.n	8006848 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <remove_chain+0x64>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e02e      	b.n	800684c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f4:	d101      	bne.n	80067fa <remove_chain+0x70>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e028      	b.n	800684c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067fa:	2200      	movs	r2, #0
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f7ff fed7 	bl	80065b2 <put_fat>
 8006804:	4603      	mov	r3, r0
 8006806:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006808:	7ffb      	ldrb	r3, [r7, #31]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <remove_chain+0x88>
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	e01c      	b.n	800684c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	3b02      	subs	r3, #2
 800681c:	429a      	cmp	r2, r3
 800681e:	d20b      	bcs.n	8006838 <remove_chain+0xae>
			fs->free_clst++;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	791b      	ldrb	r3, [r3, #4]
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d3c6      	bcc.n	80067d4 <remove_chain+0x4a>
 8006846:	e000      	b.n	800684a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006848:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <create_chain+0x2c>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	429a      	cmp	r2, r3
 800687e:	d31b      	bcc.n	80068b8 <create_chain+0x64>
 8006880:	2301      	movs	r3, #1
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e018      	b.n	80068b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fdea 	bl	8006462 <get_fat>
 800688e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d801      	bhi.n	800689a <create_chain+0x46>
 8006896:	2301      	movs	r3, #1
 8006898:	e070      	b.n	800697c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a0:	d101      	bne.n	80068a6 <create_chain+0x52>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	e06a      	b.n	800697c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d201      	bcs.n	80068b4 <create_chain+0x60>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e063      	b.n	800697c <create_chain+0x128>
		scl = clst;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d307      	bcc.n	80068dc <create_chain+0x88>
				ncl = 2;
 80068cc:	2302      	movs	r3, #2
 80068ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d901      	bls.n	80068dc <create_chain+0x88>
 80068d8:	2300      	movs	r3, #0
 80068da:	e04f      	b.n	800697c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fdbf 	bl	8006462 <get_fat>
 80068e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d003      	beq.n	80068fa <create_chain+0xa6>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d101      	bne.n	80068fe <create_chain+0xaa>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	e03e      	b.n	800697c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	429a      	cmp	r2, r3
 8006904:	d1da      	bne.n	80068bc <create_chain+0x68>
 8006906:	2300      	movs	r3, #0
 8006908:	e038      	b.n	800697c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800690a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800690c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006910:	69f9      	ldr	r1, [r7, #28]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7ff fe4d 	bl	80065b2 <put_fat>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <create_chain+0xe2>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6938      	ldr	r0, [r7, #16]
 800692e:	f7ff fe40 	bl	80065b2 <put_fat>
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d116      	bne.n	800696a <create_chain+0x116>
		fs->last_clst = ncl;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	3b02      	subs	r3, #2
 800694c:	429a      	cmp	r2, r3
 800694e:	d804      	bhi.n	800695a <create_chain+0x106>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	791b      	ldrb	r3, [r3, #4]
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	711a      	strb	r2, [r3, #4]
 8006968:	e007      	b.n	800697a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d102      	bne.n	8006976 <create_chain+0x122>
 8006970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006974:	e000      	b.n	8006978 <create_chain+0x124>
 8006976:	2301      	movs	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800697a:	69fb      	ldr	r3, [r7, #28]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	3304      	adds	r3, #4
 800699a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	0a5b      	lsrs	r3, r3, #9
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	8952      	ldrh	r2, [r2, #10]
 80069a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	613a      	str	r2, [r7, #16]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <clmt_clust+0x3a>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e010      	b.n	80069e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d307      	bcc.n	80069d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3304      	adds	r3, #4
 80069d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069d4:	e7e9      	b.n	80069aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80069d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a02:	d204      	bcs.n	8006a0e <dir_sdi+0x22>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e063      	b.n	8006ada <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <dir_sdi+0x46>
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d902      	bls.n	8006a32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	8912      	ldrh	r2, [r2, #8]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d301      	bcc.n	8006a48 <dir_sdi+0x5c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e048      	b.n	8006ada <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	61da      	str	r2, [r3, #28]
 8006a50:	e029      	b.n	8006aa6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	895b      	ldrh	r3, [r3, #10]
 8006a56:	025b      	lsls	r3, r3, #9
 8006a58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a5a:	e019      	b.n	8006a90 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6979      	ldr	r1, [r7, #20]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fcfe 	bl	8006462 <get_fat>
 8006a66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a6e:	d101      	bne.n	8006a74 <dir_sdi+0x88>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e032      	b.n	8006ada <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d904      	bls.n	8006a84 <dir_sdi+0x98>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d301      	bcc.n	8006a88 <dir_sdi+0x9c>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e028      	b.n	8006ada <dir_sdi+0xee>
			ofs -= csz;
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d2e1      	bcs.n	8006a5c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f7ff fcc2 	bl	8006424 <clust2sect>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <dir_sdi+0xcc>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e010      	b.n	8006ada <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	441a      	add	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad2:	441a      	add	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	3320      	adds	r3, #32
 8006af8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <dir_next+0x28>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b08:	d301      	bcc.n	8006b0e <dir_next+0x2c>
 8006b0a:	2304      	movs	r3, #4
 8006b0c:	e0aa      	b.n	8006c64 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 8098 	bne.w	8006c4a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	8912      	ldrh	r2, [r2, #8]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	f0c0 8088 	bcc.w	8006c4a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	61da      	str	r2, [r3, #28]
 8006b40:	2304      	movs	r3, #4
 8006b42:	e08f      	b.n	8006c64 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	0a5b      	lsrs	r3, r3, #9
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	8952      	ldrh	r2, [r2, #10]
 8006b4c:	3a01      	subs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d17a      	bne.n	8006c4a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7ff fc80 	bl	8006462 <get_fat>
 8006b62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d801      	bhi.n	8006b6e <dir_next+0x8c>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e07a      	b.n	8006c64 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b74:	d101      	bne.n	8006b7a <dir_next+0x98>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e074      	b.n	8006c64 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d358      	bcc.n	8006c36 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
 8006b90:	2304      	movs	r3, #4
 8006b92:	e067      	b.n	8006c64 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f7ff fe59 	bl	8006854 <create_chain>
 8006ba2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <dir_next+0xcc>
 8006baa:	2307      	movs	r3, #7
 8006bac:	e05a      	b.n	8006c64 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <dir_next+0xd6>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e055      	b.n	8006c64 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bbe:	d101      	bne.n	8006bc4 <dir_next+0xe2>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e04f      	b.n	8006c64 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fb4d 	bl	8006264 <sync_window>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <dir_next+0xf2>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e047      	b.n	8006c64 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3330      	adds	r3, #48	; 0x30
 8006bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff f977 	bl	8005ed2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fc1a 	bl	8006424 <clust2sect>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bf6:	e012      	b.n	8006c1e <dir_next+0x13c>
						fs->wflag = 1;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fb30 	bl	8006264 <sync_window>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <dir_next+0x12c>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e02a      	b.n	8006c64 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	895b      	ldrh	r3, [r3, #10]
 8006c22:	461a      	mov	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d3e6      	bcc.n	8006bf8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fbf0 	bl	8006424 <clust2sect>
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	441a      	add	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff feb4 	bl	80069ec <dir_sdi>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d12b      	bne.n	8006ce6 <dir_alloc+0x7a>
		n = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	4619      	mov	r1, r3
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fb27 	bl	80062ec <move_window>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11d      	bne.n	8006ce4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2be5      	cmp	r3, #229	; 0xe5
 8006cb0:	d004      	beq.n	8006cbc <dir_alloc+0x50>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d107      	bne.n	8006ccc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d102      	bne.n	8006cd0 <dir_alloc+0x64>
 8006cca:	e00c      	b.n	8006ce6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff05 	bl	8006ae2 <dir_next>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0d7      	beq.n	8006c92 <dir_alloc+0x26>
 8006ce2:	e000      	b.n	8006ce6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006ce4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d101      	bne.n	8006cf0 <dir_alloc+0x84>
 8006cec:	2307      	movs	r3, #7
 8006cee:	75fb      	strb	r3, [r7, #23]
	return res;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	331a      	adds	r3, #26
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff f83f 	bl	8005d8c <ld_word>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d109      	bne.n	8006d2e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	3314      	adds	r3, #20
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff f834 	bl	8005d8c <ld_word>
 8006d24:	4603      	mov	r3, r0
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	331a      	adds	r3, #26
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f857 	bl	8005e02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d109      	bne.n	8006d70 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f103 0214 	add.w	r2, r3, #20
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0c1b      	lsrs	r3, r3, #16
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f7ff f849 	bl	8005e02 <st_word>
	}
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d86:	2100      	movs	r1, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fe2f 	bl	80069ec <dir_sdi>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <dir_find+0x24>
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	e03e      	b.n	8006e1a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6938      	ldr	r0, [r7, #16]
 8006da4:	f7ff faa2 	bl	80062ec <move_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d12f      	bne.n	8006e12 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <dir_find+0x4e>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	75fb      	strb	r3, [r7, #23]
 8006dc4:	e028      	b.n	8006e18 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	330b      	adds	r3, #11
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	330b      	adds	r3, #11
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <dir_find+0x86>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a18      	ldr	r0, [r3, #32]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	220b      	movs	r2, #11
 8006df2:	4619      	mov	r1, r3
 8006df4:	f7ff f888 	bl	8005f08 <mem_cmp>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fe6e 	bl	8006ae2 <dir_next>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0c5      	beq.n	8006d9c <dir_find+0x24>
 8006e10:	e002      	b.n	8006e18 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e16:	bf00      	nop

	return res;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff ff1a 	bl	8006c6c <dir_alloc>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d11c      	bne.n	8006e7c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	4619      	mov	r1, r3
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	f7ff fa4f 	bl	80062ec <move_window>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d111      	bne.n	8006e7c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff f836 	bl	8005ed2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a18      	ldr	r0, [r3, #32]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3324      	adds	r3, #36	; 0x24
 8006e6e:	220b      	movs	r2, #11
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7ff f80d 	bl	8005e90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006e9e:	220b      	movs	r2, #11
 8006ea0:	2120      	movs	r1, #32
 8006ea2:	68b8      	ldr	r0, [r7, #8]
 8006ea4:	f7ff f815 	bl	8005ed2 <mem_set>
	si = i = 0; ni = 8;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	61fa      	str	r2, [r7, #28]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ec2:	7efb      	ldrb	r3, [r7, #27]
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d94e      	bls.n	8006f66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ec8:	7efb      	ldrb	r3, [r7, #27]
 8006eca:	2b2f      	cmp	r3, #47	; 0x2f
 8006ecc:	d006      	beq.n	8006edc <create_name+0x54>
 8006ece:	7efb      	ldrb	r3, [r7, #27]
 8006ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ed2:	d110      	bne.n	8006ef6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ed4:	e002      	b.n	8006edc <create_name+0x54>
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ee6:	d0f6      	beq.n	8006ed6 <create_name+0x4e>
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ef2:	d0f0      	beq.n	8006ed6 <create_name+0x4e>
			break;
 8006ef4:	e038      	b.n	8006f68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ef6:	7efb      	ldrb	r3, [r7, #27]
 8006ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8006efa:	d003      	beq.n	8006f04 <create_name+0x7c>
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d30c      	bcc.n	8006f1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d002      	beq.n	8006f10 <create_name+0x88>
 8006f0a:	7efb      	ldrb	r3, [r7, #27]
 8006f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f0e:	d001      	beq.n	8006f14 <create_name+0x8c>
 8006f10:	2306      	movs	r3, #6
 8006f12:	e044      	b.n	8006f9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f14:	2308      	movs	r3, #8
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	230b      	movs	r3, #11
 8006f1a:	617b      	str	r3, [r7, #20]
			continue;
 8006f1c:	e022      	b.n	8006f64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da04      	bge.n	8006f30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006f26:	7efb      	ldrb	r3, [r7, #27]
 8006f28:	3b80      	subs	r3, #128	; 0x80
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <create_name+0x120>)
 8006f2c:	5cd3      	ldrb	r3, [r2, r3]
 8006f2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006f30:	7efb      	ldrb	r3, [r7, #27]
 8006f32:	4619      	mov	r1, r3
 8006f34:	481d      	ldr	r0, [pc, #116]	; (8006fac <create_name+0x124>)
 8006f36:	f7ff f80e 	bl	8005f56 <chk_chr>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <create_name+0xbc>
 8006f40:	2306      	movs	r3, #6
 8006f42:	e02c      	b.n	8006f9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006f44:	7efb      	ldrb	r3, [r7, #27]
 8006f46:	2b60      	cmp	r3, #96	; 0x60
 8006f48:	d905      	bls.n	8006f56 <create_name+0xce>
 8006f4a:	7efb      	ldrb	r3, [r7, #27]
 8006f4c:	2b7a      	cmp	r3, #122	; 0x7a
 8006f4e:	d802      	bhi.n	8006f56 <create_name+0xce>
 8006f50:	7efb      	ldrb	r3, [r7, #27]
 8006f52:	3b20      	subs	r3, #32
 8006f54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	613a      	str	r2, [r7, #16]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	4413      	add	r3, r2
 8006f60:	7efa      	ldrb	r2, [r7, #27]
 8006f62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006f64:	e7a6      	b.n	8006eb4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	441a      	add	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <create_name+0xf4>
 8006f78:	2306      	movs	r3, #6
 8006f7a:	e010      	b.n	8006f9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2be5      	cmp	r3, #229	; 0xe5
 8006f82:	d102      	bne.n	8006f8a <create_name+0x102>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2205      	movs	r2, #5
 8006f88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f8a:	7efb      	ldrb	r3, [r7, #27]
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d801      	bhi.n	8006f94 <create_name+0x10c>
 8006f90:	2204      	movs	r2, #4
 8006f92:	e000      	b.n	8006f96 <create_name+0x10e>
 8006f94:	2200      	movs	r2, #0
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	330b      	adds	r3, #11
 8006f9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	08008bd4 	.word	0x08008bd4
 8006fac:	08008b34 	.word	0x08008b34

08006fb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006fc4:	e002      	b.n	8006fcc <follow_path+0x1c>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8006fd2:	d0f8      	beq.n	8006fc6 <follow_path+0x16>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b5c      	cmp	r3, #92	; 0x5c
 8006fda:	d0f4      	beq.n	8006fc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b1f      	cmp	r3, #31
 8006fe8:	d80a      	bhi.n	8007000 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fcf9 	bl	80069ec <dir_sdi>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]
 8006ffe:	e043      	b.n	8007088 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007000:	463b      	mov	r3, r7
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ff3f 	bl	8006e88 <create_name>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d134      	bne.n	800707e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff feaf 	bl	8006d78 <dir_find>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007024:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	2b04      	cmp	r3, #4
 8007030:	d127      	bne.n	8007082 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d122      	bne.n	8007082 <follow_path+0xd2>
 800703c:	2305      	movs	r3, #5
 800703e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007040:	e01f      	b.n	8007082 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007042:	7afb      	ldrb	r3, [r7, #11]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11c      	bne.n	8007086 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	799b      	ldrb	r3, [r3, #6]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007058:	2305      	movs	r3, #5
 800705a:	75fb      	strb	r3, [r7, #23]
 800705c:	e014      	b.n	8007088 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	4413      	add	r3, r2
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fe42 	bl	8006cfa <ld_clust>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800707c:	e7c0      	b.n	8007000 <follow_path+0x50>
			if (res != FR_OK) break;
 800707e:	bf00      	nop
 8007080:	e002      	b.n	8007088 <follow_path+0xd8>
				break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007086:	bf00      	nop
			}
		}
	}

	return res;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800709e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d031      	beq.n	800710c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e002      	b.n	80070b6 <get_ldnumber+0x24>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3301      	adds	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d903      	bls.n	80070c6 <get_ldnumber+0x34>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b3a      	cmp	r3, #58	; 0x3a
 80070c4:	d1f4      	bne.n	80070b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b3a      	cmp	r3, #58	; 0x3a
 80070cc:	d11c      	bne.n	8007108 <get_ldnumber+0x76>
			tp = *path;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	60fa      	str	r2, [r7, #12]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	3b30      	subs	r3, #48	; 0x30
 80070de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	d80e      	bhi.n	8007104 <get_ldnumber+0x72>
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d10a      	bne.n	8007104 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d107      	bne.n	8007104 <get_ldnumber+0x72>
					vol = (int)i;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3301      	adds	r3, #1
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	e002      	b.n	800710e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800710c:	693b      	ldr	r3, [r7, #16]
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	70da      	strb	r2, [r3, #3]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f8d8 	bl	80062ec <move_window>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <check_fs+0x2a>
 8007142:	2304      	movs	r3, #4
 8007144:	e038      	b.n	80071b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3330      	adds	r3, #48	; 0x30
 800714a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fe1c 	bl	8005d8c <ld_word>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800715c:	429a      	cmp	r2, r3
 800715e:	d001      	beq.n	8007164 <check_fs+0x48>
 8007160:	2303      	movs	r3, #3
 8007162:	e029      	b.n	80071b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800716a:	2be9      	cmp	r3, #233	; 0xe9
 800716c:	d009      	beq.n	8007182 <check_fs+0x66>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007174:	2beb      	cmp	r3, #235	; 0xeb
 8007176:	d11e      	bne.n	80071b6 <check_fs+0x9a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800717e:	2b90      	cmp	r3, #144	; 0x90
 8007180:	d119      	bne.n	80071b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3330      	adds	r3, #48	; 0x30
 8007186:	3336      	adds	r3, #54	; 0x36
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fe17 	bl	8005dbc <ld_dword>
 800718e:	4603      	mov	r3, r0
 8007190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <check_fs+0xa4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d101      	bne.n	800719e <check_fs+0x82>
 800719a:	2300      	movs	r3, #0
 800719c:	e00c      	b.n	80071b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3330      	adds	r3, #48	; 0x30
 80071a2:	3352      	adds	r3, #82	; 0x52
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fe09 	bl	8005dbc <ld_dword>
 80071aa:	4603      	mov	r3, r0
 80071ac:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <check_fs+0xa8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <check_fs+0x9a>
 80071b2:	2300      	movs	r3, #0
 80071b4:	e000      	b.n	80071b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071b6:	2302      	movs	r3, #2
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	00544146 	.word	0x00544146
 80071c4:	33544146 	.word	0x33544146

080071c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b096      	sub	sp, #88	; 0x58
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff58 	bl	8007092 <get_ldnumber>
 80071e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da01      	bge.n	80071ee <find_volume+0x26>
 80071ea:	230b      	movs	r3, #11
 80071ec:	e22e      	b.n	800764c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071ee:	4aa8      	ldr	r2, [pc, #672]	; (8007490 <find_volume+0x2c8>)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <find_volume+0x3a>
 80071fe:	230c      	movs	r3, #12
 8007200:	e224      	b.n	800764c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007206:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01a      	beq.n	800724e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fd17 	bl	8005c50 <disk_status>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10c      	bne.n	800724e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <find_volume+0x82>
 800723a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007246:	230a      	movs	r3, #10
 8007248:	e200      	b.n	800764c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800724a:	2300      	movs	r3, #0
 800724c:	e1fe      	b.n	800764c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007256:	b2da      	uxtb	r2, r3
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fd0f 	bl	8005c84 <disk_initialize>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800726c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007278:	2303      	movs	r3, #3
 800727a:	e1e7      	b.n	800764c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <find_volume+0xca>
 8007282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800728e:	230a      	movs	r3, #10
 8007290:	e1dc      	b.n	800764c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800729a:	f7ff ff3f 	bl	800711c <check_fs>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d14b      	bne.n	8007344 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072ac:	2300      	movs	r3, #0
 80072ae:	643b      	str	r3, [r7, #64]	; 0x40
 80072b0:	e01f      	b.n	80072f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072c0:	4413      	add	r3, r2
 80072c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	3304      	adds	r3, #4
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d006      	beq.n	80072dc <find_volume+0x114>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	3308      	adds	r3, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fd72 	bl	8005dbc <ld_dword>
 80072d8:	4602      	mov	r2, r0
 80072da:	e000      	b.n	80072de <find_volume+0x116>
 80072dc:	2200      	movs	r2, #0
 80072de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80072e6:	440b      	add	r3, r1
 80072e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ee:	3301      	adds	r3, #1
 80072f0:	643b      	str	r3, [r7, #64]	; 0x40
 80072f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d9dc      	bls.n	80072b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80072f8:	2300      	movs	r3, #0
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80072fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <find_volume+0x140>
 8007302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007304:	3b01      	subs	r3, #1
 8007306:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007310:	4413      	add	r3, r2
 8007312:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007316:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <find_volume+0x162>
 800731e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007322:	f7ff fefb 	bl	800711c <check_fs>
 8007326:	4603      	mov	r3, r0
 8007328:	e000      	b.n	800732c <find_volume+0x164>
 800732a:	2303      	movs	r3, #3
 800732c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007334:	2b01      	cmp	r3, #1
 8007336:	d905      	bls.n	8007344 <find_volume+0x17c>
 8007338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733a:	3301      	adds	r3, #1
 800733c:	643b      	str	r3, [r7, #64]	; 0x40
 800733e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007340:	2b03      	cmp	r3, #3
 8007342:	d9e1      	bls.n	8007308 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007348:	2b04      	cmp	r3, #4
 800734a:	d101      	bne.n	8007350 <find_volume+0x188>
 800734c:	2301      	movs	r3, #1
 800734e:	e17d      	b.n	800764c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007354:	2b01      	cmp	r3, #1
 8007356:	d901      	bls.n	800735c <find_volume+0x194>
 8007358:	230d      	movs	r3, #13
 800735a:	e177      	b.n	800764c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	3330      	adds	r3, #48	; 0x30
 8007360:	330b      	adds	r3, #11
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fd12 	bl	8005d8c <ld_word>
 8007368:	4603      	mov	r3, r0
 800736a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800736e:	d001      	beq.n	8007374 <find_volume+0x1ac>
 8007370:	230d      	movs	r3, #13
 8007372:	e16b      	b.n	800764c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	3330      	adds	r3, #48	; 0x30
 8007378:	3316      	adds	r3, #22
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fd06 	bl	8005d8c <ld_word>
 8007380:	4603      	mov	r3, r0
 8007382:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <find_volume+0x1d0>
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	3330      	adds	r3, #48	; 0x30
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fd13 	bl	8005dbc <ld_dword>
 8007396:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800739c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d005      	beq.n	80073bc <find_volume+0x1f4>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	789b      	ldrb	r3, [r3, #2]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d001      	beq.n	80073bc <find_volume+0x1f4>
 80073b8:	230d      	movs	r3, #13
 80073ba:	e147      	b.n	800764c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	789b      	ldrb	r3, [r3, #2]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	895b      	ldrh	r3, [r3, #10]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <find_volume+0x228>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	895b      	ldrh	r3, [r3, #10]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	895b      	ldrh	r3, [r3, #10]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <find_volume+0x22c>
 80073f0:	230d      	movs	r3, #13
 80073f2:	e12b      	b.n	800764c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	3330      	adds	r3, #48	; 0x30
 80073f8:	3311      	adds	r3, #17
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fcc6 	bl	8005d8c <ld_word>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	891b      	ldrh	r3, [r3, #8]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <find_volume+0x252>
 8007416:	230d      	movs	r3, #13
 8007418:	e118      	b.n	800764c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	3330      	adds	r3, #48	; 0x30
 800741e:	3313      	adds	r3, #19
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fcb3 	bl	8005d8c <ld_word>
 8007426:	4603      	mov	r3, r0
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800742a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <find_volume+0x276>
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	3330      	adds	r3, #48	; 0x30
 8007434:	3320      	adds	r3, #32
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fcc0 	bl	8005dbc <ld_dword>
 800743c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	3330      	adds	r3, #48	; 0x30
 8007442:	330e      	adds	r3, #14
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fca1 	bl	8005d8c <ld_word>
 800744a:	4603      	mov	r3, r0
 800744c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800744e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <find_volume+0x290>
 8007454:	230d      	movs	r3, #13
 8007456:	e0f9      	b.n	800764c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007458:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	4413      	add	r3, r2
 800745e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007460:	8912      	ldrh	r2, [r2, #8]
 8007462:	0912      	lsrs	r2, r2, #4
 8007464:	b292      	uxth	r2, r2
 8007466:	4413      	add	r3, r2
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800746a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	429a      	cmp	r2, r3
 8007470:	d201      	bcs.n	8007476 <find_volume+0x2ae>
 8007472:	230d      	movs	r3, #13
 8007474:	e0ea      	b.n	800764c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800747e:	8952      	ldrh	r2, [r2, #10]
 8007480:	fbb3 f3f2 	udiv	r3, r3, r2
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <find_volume+0x2cc>
 800748c:	230d      	movs	r3, #13
 800748e:	e0dd      	b.n	800764c <find_volume+0x484>
 8007490:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 8007494:	2303      	movs	r3, #3
 8007496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d802      	bhi.n	80074aa <find_volume+0x2e2>
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d802      	bhi.n	80074ba <find_volume+0x2f2>
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80074c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074cc:	441a      	add	r2, r3
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80074d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	441a      	add	r2, r3
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80074dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d11e      	bne.n	8007522 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	3330      	adds	r3, #48	; 0x30
 80074e8:	332a      	adds	r3, #42	; 0x2a
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fc4e 	bl	8005d8c <ld_word>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <find_volume+0x332>
 80074f6:	230d      	movs	r3, #13
 80074f8:	e0a8      	b.n	800764c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	891b      	ldrh	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <find_volume+0x33e>
 8007502:	230d      	movs	r3, #13
 8007504:	e0a2      	b.n	800764c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	3330      	adds	r3, #48	; 0x30
 800750a:	332c      	adds	r3, #44	; 0x2c
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fc55 	bl	8005dbc <ld_dword>
 8007512:	4602      	mov	r2, r0
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	647b      	str	r3, [r7, #68]	; 0x44
 8007520:	e01f      	b.n	8007562 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	891b      	ldrh	r3, [r3, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <find_volume+0x366>
 800752a:	230d      	movs	r3, #13
 800752c:	e08e      	b.n	800764c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	6a1a      	ldr	r2, [r3, #32]
 8007532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007534:	441a      	add	r2, r3
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800753a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800753e:	2b02      	cmp	r3, #2
 8007540:	d103      	bne.n	800754a <find_volume+0x382>
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	e00a      	b.n	8007560 <find_volume+0x398>
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	085a      	lsrs	r2, r3, #1
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007560:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800756c:	0a5b      	lsrs	r3, r3, #9
 800756e:	429a      	cmp	r2, r3
 8007570:	d201      	bcs.n	8007576 <find_volume+0x3ae>
 8007572:	230d      	movs	r3, #13
 8007574:	e06a      	b.n	800764c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800757c:	611a      	str	r2, [r3, #16]
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	2280      	movs	r2, #128	; 0x80
 800758a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800758c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007590:	2b03      	cmp	r3, #3
 8007592:	d149      	bne.n	8007628 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	3330      	adds	r3, #48	; 0x30
 8007598:	3330      	adds	r3, #48	; 0x30
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fbf6 	bl	8005d8c <ld_word>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d140      	bne.n	8007628 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80075a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a8:	3301      	adds	r3, #1
 80075aa:	4619      	mov	r1, r3
 80075ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ae:	f7fe fe9d 	bl	80062ec <move_window>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d137      	bne.n	8007628 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	2200      	movs	r2, #0
 80075bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	3330      	adds	r3, #48	; 0x30
 80075c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fbe0 	bl	8005d8c <ld_word>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d127      	bne.n	8007628 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	3330      	adds	r3, #48	; 0x30
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe fbed 	bl	8005dbc <ld_dword>
 80075e2:	4603      	mov	r3, r0
 80075e4:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <find_volume+0x48c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d11e      	bne.n	8007628 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	3330      	adds	r3, #48	; 0x30
 80075ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fbe2 	bl	8005dbc <ld_dword>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <find_volume+0x490>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d113      	bne.n	8007628 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	3330      	adds	r3, #48	; 0x30
 8007604:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe fbd7 	bl	8005dbc <ld_dword>
 800760e:	4602      	mov	r2, r0
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	3330      	adds	r3, #48	; 0x30
 8007618:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe fbcd 	bl	8005dbc <ld_dword>
 8007622:	4602      	mov	r2, r0
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800762e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <find_volume+0x494>)
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	4b08      	ldr	r3, [pc, #32]	; (800765c <find_volume+0x494>)
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <find_volume+0x494>)
 800763e:	881a      	ldrh	r2, [r3, #0]
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007646:	f7fe fde9 	bl	800621c <clear_lock>
#endif
	return FR_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3758      	adds	r7, #88	; 0x58
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	41615252 	.word	0x41615252
 8007658:	61417272 	.word	0x61417272
 800765c:	2000002c 	.word	0x2000002c

08007660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800766a:	2309      	movs	r3, #9
 800766c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01c      	beq.n	80076ae <validate+0x4e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d018      	beq.n	80076ae <validate+0x4e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d013      	beq.n	80076ae <validate+0x4e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	889a      	ldrh	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	429a      	cmp	r2, r3
 8007692:	d10c      	bne.n	80076ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fad8 	bl	8005c50 <disk_status>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <validate+0x4e>
			res = FR_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <validate+0x5a>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	e000      	b.n	80076bc <validate+0x5c>
 80076ba:	2300      	movs	r3, #0
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	6013      	str	r3, [r2, #0]
	return res;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80076de:	f107 0310 	add.w	r3, r7, #16
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fcd5 	bl	8007092 <get_ldnumber>
 80076e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da01      	bge.n	80076f4 <f_mount+0x28>
 80076f0:	230b      	movs	r3, #11
 80076f2:	e02b      	b.n	800774c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80076f4:	4a17      	ldr	r2, [pc, #92]	; (8007754 <f_mount+0x88>)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007704:	69b8      	ldr	r0, [r7, #24]
 8007706:	f7fe fd89 	bl	800621c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	490d      	ldr	r1, [pc, #52]	; (8007754 <f_mount+0x88>)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <f_mount+0x66>
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <f_mount+0x6a>
 8007732:	2300      	movs	r3, #0
 8007734:	e00a      	b.n	800774c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007736:	f107 010c 	add.w	r1, r7, #12
 800773a:	f107 0308 	add.w	r3, r7, #8
 800773e:	2200      	movs	r2, #0
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fd41 	bl	80071c8 <find_volume>
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800774a:	7dfb      	ldrb	r3, [r7, #23]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000028 	.word	0x20000028

08007758 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b098      	sub	sp, #96	; 0x60
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <f_open+0x18>
 800776c:	2309      	movs	r3, #9
 800776e:	e1ad      	b.n	8007acc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007776:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007778:	79fa      	ldrb	r2, [r7, #7]
 800777a:	f107 0110 	add.w	r1, r7, #16
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fd20 	bl	80071c8 <find_volume>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800778e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 8191 	bne.w	8007aba <f_open+0x362>
		dj.obj.fs = fs;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	4611      	mov	r1, r2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff fc03 	bl	8006fb0 <follow_path>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80077b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11a      	bne.n	80077ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80077b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077bc:	b25b      	sxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	da03      	bge.n	80077ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80077c2:	2306      	movs	r3, #6
 80077c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077c8:	e011      	b.n	80077ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fbd2 	bl	8005f8c <chk_lock>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	f003 031c 	and.w	r3, r3, #28
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d07f      	beq.n	80078f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80077f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d017      	beq.n	8007830 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007804:	2b04      	cmp	r3, #4
 8007806:	d10e      	bne.n	8007826 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007808:	f7fe fc1c 	bl	8006044 <enq_lock>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d006      	beq.n	8007820 <f_open+0xc8>
 8007812:	f107 0314 	add.w	r3, r7, #20
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fb03 	bl	8006e22 <dir_register>
 800781c:	4603      	mov	r3, r0
 800781e:	e000      	b.n	8007822 <f_open+0xca>
 8007820:	2312      	movs	r3, #18
 8007822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	f043 0308 	orr.w	r3, r3, #8
 800782c:	71fb      	strb	r3, [r7, #7]
 800782e:	e010      	b.n	8007852 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007830:	7ebb      	ldrb	r3, [r7, #26]
 8007832:	f003 0311 	and.w	r3, r3, #17
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <f_open+0xea>
					res = FR_DENIED;
 800783a:	2307      	movs	r3, #7
 800783c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007840:	e007      	b.n	8007852 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <f_open+0xfa>
 800784c:	2308      	movs	r3, #8
 800784e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007856:	2b00      	cmp	r3, #0
 8007858:	d168      	bne.n	800792c <f_open+0x1d4>
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d063      	beq.n	800792c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007864:	f7fe f82e 	bl	80058c4 <get_fattime>
 8007868:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	330e      	adds	r3, #14
 800786e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fae1 	bl	8005e38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	3316      	adds	r3, #22
 800787a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fadb 	bl	8005e38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	330b      	adds	r3, #11
 8007886:	2220      	movs	r2, #32
 8007888:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fa32 	bl	8006cfa <ld_clust>
 8007896:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800789c:	2200      	movs	r2, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fa4a 	bl	8006d38 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	331c      	adds	r3, #28
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fac4 	bl	8005e38 <st_dword>
					fs->wflag = 1;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2201      	movs	r2, #1
 80078b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80078b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d037      	beq.n	800792c <f_open+0x1d4>
						dw = fs->winsect;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	2200      	movs	r2, #0
 80078c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe ff5d 	bl	800678a <remove_chain>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80078d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d126      	bne.n	800792c <f_open+0x1d4>
							res = move_window(fs, dw);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fd02 	bl	80062ec <move_window>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078f2:	3a01      	subs	r2, #1
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	e019      	b.n	800792c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80078f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d115      	bne.n	800792c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007900:	7ebb      	ldrb	r3, [r7, #26]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <f_open+0x1ba>
					res = FR_NO_FILE;
 800790a:	2304      	movs	r3, #4
 800790c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007910:	e00c      	b.n	800792c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <f_open+0x1d4>
 800791c:	7ebb      	ldrb	r3, [r7, #26]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <f_open+0x1d4>
						res = FR_DENIED;
 8007926:	2307      	movs	r3, #7
 8007928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800792c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007930:	2b00      	cmp	r3, #0
 8007932:	d128      	bne.n	8007986 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007944:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800794e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	f023 0301 	bic.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fb8b 	bl	8006088 <inc_lock>
 8007972:	4602      	mov	r2, r0
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <f_open+0x22e>
 8007980:	2302      	movs	r3, #2
 8007982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 8095 	bne.w	8007aba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff f9af 	bl	8006cfa <ld_clust>
 800799c:	4602      	mov	r2, r0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	331c      	adds	r3, #28
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fa08 	bl	8005dbc <ld_dword>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	88da      	ldrh	r2, [r3, #6]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	79fa      	ldrb	r2, [r7, #7]
 80079ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3330      	adds	r3, #48	; 0x30
 80079e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fa72 	bl	8005ed2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d060      	beq.n	8007aba <f_open+0x362>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d05c      	beq.n	8007aba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	895b      	ldrh	r3, [r3, #10]
 8007a0c:	025b      	lsls	r3, r3, #9
 8007a0e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a1c:	e016      	b.n	8007a4c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fd1d 	bl	8006462 <get_fat>
 8007a28:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d802      	bhi.n	8007a36 <f_open+0x2de>
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a3c:	d102      	bne.n	8007a44 <f_open+0x2ec>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <f_open+0x304>
 8007a54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d8e0      	bhi.n	8007a1e <f_open+0x2c6>
				}
				fp->clust = clst;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d127      	bne.n	8007aba <f_open+0x362>
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d022      	beq.n	8007aba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fcd3 	bl	8006424 <clust2sect>
 8007a7e:	6478      	str	r0, [r7, #68]	; 0x44
 8007a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <f_open+0x336>
						res = FR_INT_ERR;
 8007a86:	2302      	movs	r3, #2
 8007a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a8c:	e015      	b.n	8007aba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a90:	0a5a      	lsrs	r2, r3, #9
 8007a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	7858      	ldrb	r0, [r3, #1]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a1a      	ldr	r2, [r3, #32]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f7fe f911 	bl	8005cd0 <disk_read>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <f_open+0x362>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <f_open+0x370>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3760      	adds	r7, #96	; 0x60
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f107 0214 	add.w	r2, r7, #20
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fdb3 	bl	8007660 <validate>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d107      	bne.n	8007b18 <f_read+0x44>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	7d5b      	ldrb	r3, [r3, #21]
 8007b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <f_read+0x4a>
 8007b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b1c:	e115      	b.n	8007d4a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	7d1b      	ldrb	r3, [r3, #20]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <f_read+0x5a>
 8007b2a:	2307      	movs	r3, #7
 8007b2c:	e10d      	b.n	8007d4a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	f240 80fe 	bls.w	8007d40 <f_read+0x26c>
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007b48:	e0fa      	b.n	8007d40 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 80c6 	bne.w	8007ce4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	0a5b      	lsrs	r3, r3, #9
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	8952      	ldrh	r2, [r2, #10]
 8007b62:	3a01      	subs	r2, #1
 8007b64:	4013      	ands	r3, r2
 8007b66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d12f      	bne.n	8007bce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b7c:	e013      	b.n	8007ba6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7fe fef9 	bl	8006984 <clmt_clust>
 8007b92:	6338      	str	r0, [r7, #48]	; 0x30
 8007b94:	e007      	b.n	8007ba6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fc5f 	bl	8006462 <get_fat>
 8007ba4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d804      	bhi.n	8007bb6 <f_read+0xe2>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	755a      	strb	r2, [r3, #21]
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e0c9      	b.n	8007d4a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bbc:	d104      	bne.n	8007bc8 <f_read+0xf4>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	755a      	strb	r2, [r3, #21]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0c0      	b.n	8007d4a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bcc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fc24 	bl	8006424 <clust2sect>
 8007bdc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <f_read+0x11a>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2202      	movs	r2, #2
 8007be8:	755a      	strb	r2, [r3, #21]
 8007bea:	2302      	movs	r3, #2
 8007bec:	e0ad      	b.n	8007d4a <f_read+0x276>
			sect += csect;
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0a5b      	lsrs	r3, r3, #9
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d039      	beq.n	8007c76 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	4413      	add	r3, r2
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	8952      	ldrh	r2, [r2, #10]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d905      	bls.n	8007c1c <f_read+0x148>
					cc = fs->csize - csect;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	895b      	ldrh	r3, [r3, #10]
 8007c14:	461a      	mov	r2, r3
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	7858      	ldrb	r0, [r3, #1]
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c26:	f7fe f853 	bl	8005cd0 <disk_read>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <f_read+0x166>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	755a      	strb	r2, [r3, #21]
 8007c36:	2301      	movs	r3, #1
 8007c38:	e087      	b.n	8007d4a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	7d1b      	ldrb	r3, [r3, #20]
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da14      	bge.n	8007c6e <f_read+0x19a>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1a      	ldr	r2, [r3, #32]
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d90d      	bls.n	8007c6e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	025b      	lsls	r3, r3, #9
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	18d0      	adds	r0, r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3330      	adds	r3, #48	; 0x30
 8007c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f7fe f911 	bl	8005e90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	025b      	lsls	r3, r3, #9
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007c74:	e050      	b.n	8007d18 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d02e      	beq.n	8007cde <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da18      	bge.n	8007cbc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	7858      	ldrb	r0, [r3, #1]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1a      	ldr	r2, [r3, #32]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f7fe f839 	bl	8005d10 <disk_write>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <f_read+0x1da>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	755a      	strb	r2, [r3, #21]
 8007caa:	2301      	movs	r3, #1
 8007cac:	e04d      	b.n	8007d4a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	7d1b      	ldrb	r3, [r3, #20]
 8007cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	7858      	ldrb	r0, [r3, #1]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	f7fe f801 	bl	8005cd0 <disk_read>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <f_read+0x20a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	755a      	strb	r2, [r3, #21]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e035      	b.n	8007d4a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d901      	bls.n	8007cfe <f_read+0x22a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0c:	4413      	add	r3, r2
 8007d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d10:	4619      	mov	r1, r3
 8007d12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d14:	f7fe f8bc 	bl	8005e90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	699a      	ldr	r2, [r3, #24]
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	619a      	str	r2, [r3, #24]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	441a      	add	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f47f af01 	bne.w	8007b4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3738      	adds	r7, #56	; 0x38
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b08c      	sub	sp, #48	; 0x30
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f107 0210 	add.w	r2, r7, #16
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff fc74 	bl	8007660 <validate>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <f_write+0x44>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	7d5b      	ldrb	r3, [r3, #21]
 8007d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <f_write+0x4a>
 8007d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d9a:	e14b      	b.n	8008034 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	7d1b      	ldrb	r3, [r3, #20]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <f_write+0x5a>
 8007da8:	2307      	movs	r3, #7
 8007daa:	e143      	b.n	8008034 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	f080 812d 	bcs.w	8008018 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007dc6:	e127      	b.n	8008018 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f040 80e3 	bne.w	8007f9c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	0a5b      	lsrs	r3, r3, #9
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	8952      	ldrh	r2, [r2, #10]
 8007de0:	3a01      	subs	r2, #1
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d143      	bne.n	8007e74 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11a      	bne.n	8007e36 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fd25 	bl	8006854 <create_chain>
 8007e0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e0c:	e013      	b.n	8007e36 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7fe fdb1 	bl	8006984 <clmt_clust>
 8007e22:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e24:	e007      	b.n	8007e36 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7fe fd10 	bl	8006854 <create_chain>
 8007e34:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80f2 	beq.w	8008022 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d104      	bne.n	8007e4e <f_write+0xfc>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	755a      	strb	r2, [r3, #21]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e0f2      	b.n	8008034 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e54:	d104      	bne.n	8007e60 <f_write+0x10e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	755a      	strb	r2, [r3, #21]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0e9      	b.n	8008034 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e64:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <f_write+0x122>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e72:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	7d1b      	ldrb	r3, [r3, #20]
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da18      	bge.n	8007eb0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	7858      	ldrb	r0, [r3, #1]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1a      	ldr	r2, [r3, #32]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f7fd ff3f 	bl	8005d10 <disk_write>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <f_write+0x150>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	755a      	strb	r2, [r3, #21]
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e0c8      	b.n	8008034 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	7d1b      	ldrb	r3, [r3, #20]
 8007ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fe fab3 	bl	8006424 <clust2sect>
 8007ebe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <f_write+0x17e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	755a      	strb	r2, [r3, #21]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e0b1      	b.n	8008034 <f_write+0x2e2>
			sect += csect;
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	0a5b      	lsrs	r3, r3, #9
 8007edc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d03c      	beq.n	8007f5e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	4413      	add	r3, r2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	8952      	ldrh	r2, [r2, #10]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d905      	bls.n	8007efe <f_write+0x1ac>
					cc = fs->csize - csect;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	895b      	ldrh	r3, [r3, #10]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	7858      	ldrb	r0, [r3, #1]
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	69f9      	ldr	r1, [r7, #28]
 8007f08:	f7fd ff02 	bl	8005d10 <disk_write>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <f_write+0x1ca>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	755a      	strb	r2, [r3, #21]
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e08b      	b.n	8008034 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d915      	bls.n	8007f56 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	025b      	lsls	r3, r3, #9
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f42:	4619      	mov	r1, r3
 8007f44:	f7fd ffa4 	bl	8005e90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	7d1b      	ldrb	r3, [r3, #20]
 8007f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	025b      	lsls	r3, r3, #9
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007f5c:	e03f      	b.n	8007fde <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d016      	beq.n	8007f96 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d210      	bcs.n	8007f96 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	7858      	ldrb	r0, [r3, #1]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f7e:	2301      	movs	r3, #1
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	f7fd fea5 	bl	8005cd0 <disk_read>
 8007f86:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	755a      	strb	r2, [r3, #21]
 8007f92:	2301      	movs	r3, #1
 8007f94:	e04e      	b.n	8008034 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d901      	bls.n	8007fb6 <f_write+0x264>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc4:	4413      	add	r3, r2
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd ff60 	bl	8005e90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	7d1b      	ldrb	r3, [r3, #20]
 8007fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	4413      	add	r3, r2
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	441a      	add	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	619a      	str	r2, [r3, #24]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	bf38      	it	cc
 8007ffe:	461a      	movcc	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	441a      	add	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f47f aed4 	bne.w	8007dc8 <f_write+0x76>
 8008020:	e000      	b.n	8008024 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008022:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	7d1b      	ldrb	r3, [r3, #20]
 8008028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f107 0208 	add.w	r2, r7, #8
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fb07 	bl	8007660 <validate>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d168      	bne.n	800812e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7d1b      	ldrb	r3, [r3, #20]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d062      	beq.n	800812e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7d1b      	ldrb	r3, [r3, #20]
 800806c:	b25b      	sxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	da15      	bge.n	800809e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	7858      	ldrb	r0, [r3, #1]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	2301      	movs	r3, #1
 8008082:	f7fd fe45 	bl	8005d10 <disk_write>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <f_sync+0x54>
 800808c:	2301      	movs	r3, #1
 800808e:	e04f      	b.n	8008130 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7d1b      	ldrb	r3, [r3, #20]
 8008094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008098:	b2da      	uxtb	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800809e:	f7fd fc11 	bl	80058c4 <get_fattime>
 80080a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7fe f91d 	bl	80062ec <move_window>
 80080b2:	4603      	mov	r3, r0
 80080b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d138      	bne.n	800812e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	330b      	adds	r3, #11
 80080c6:	781a      	ldrb	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	330b      	adds	r3, #11
 80080cc:	f042 0220 	orr.w	r2, r2, #32
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	461a      	mov	r2, r3
 80080de:	68f9      	ldr	r1, [r7, #12]
 80080e0:	f7fe fe2a 	bl	8006d38 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f103 021c 	add.w	r2, r3, #28
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fd fea1 	bl	8005e38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3316      	adds	r3, #22
 80080fa:	6939      	ldr	r1, [r7, #16]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fd fe9b 	bl	8005e38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3312      	adds	r3, #18
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd fe7a 	bl	8005e02 <st_word>
					fs->wflag = 1;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2201      	movs	r2, #1
 8008112:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe f916 	bl	8006348 <sync_fs>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7d1b      	ldrb	r3, [r3, #20]
 8008124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800812e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ff7b 	bl	800803c <f_sync>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d118      	bne.n	8008182 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f107 0208 	add.w	r2, r7, #8
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fa81 	bl	8007660 <validate>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe f819 	bl	80061a4 <dec_lock>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b09d      	sub	sp, #116	; 0x74
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	460b      	mov	r3, r1
 800819a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800819c:	2301      	movs	r3, #1
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80081a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe ff71 	bl	8007092 <get_ldnumber>
 80081b0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da02      	bge.n	80081be <f_mkfs+0x32>
 80081b8:	230b      	movs	r3, #11
 80081ba:	f000 bc0d 	b.w	80089d8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80081be:	4a94      	ldr	r2, [pc, #592]	; (8008410 <f_mkfs+0x284>)
 80081c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <f_mkfs+0x4a>
 80081ca:	4a91      	ldr	r2, [pc, #580]	; (8008410 <f_mkfs+0x284>)
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80081e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fd fd4c 	bl	8005c84 <disk_initialize>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80081f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <f_mkfs+0x76>
 80081fe:	2303      	movs	r3, #3
 8008200:	e3ea      	b.n	80089d8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008202:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <f_mkfs+0x86>
 800820e:	230a      	movs	r3, #10
 8008210:	e3e2      	b.n	80089d8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8008212:	f107 0214 	add.w	r2, r7, #20
 8008216:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800821a:	2103      	movs	r1, #3
 800821c:	4618      	mov	r0, r3
 800821e:	f7fd fd97 	bl	8005d50 <disk_ioctl>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10c      	bne.n	8008242 <f_mkfs+0xb6>
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <f_mkfs+0xb6>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008234:	d805      	bhi.n	8008242 <f_mkfs+0xb6>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <f_mkfs+0xba>
 8008242:	2301      	movs	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <f_mkfs+0xce>
 8008252:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	429a      	cmp	r2, r3
 8008258:	d309      	bcc.n	800826e <f_mkfs+0xe2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008260:	d805      	bhi.n	800826e <f_mkfs+0xe2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1e5a      	subs	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <f_mkfs+0xe6>
 800826e:	2313      	movs	r3, #19
 8008270:	e3b2      	b.n	80089d8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8008272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	fbb2 f3f3 	udiv	r3, r2, r3
 800827a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8008280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800828c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <f_mkfs+0x114>
 800829c:	230e      	movs	r3, #14
 800829e:	e39b      	b.n	80089d8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80082a0:	f107 0210 	add.w	r2, r7, #16
 80082a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80082a8:	2101      	movs	r1, #1
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd fd50 	bl	8005d50 <disk_ioctl>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <f_mkfs+0x12e>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e38e      	b.n	80089d8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <f_mkfs+0x13c>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e000      	b.n	80082ca <f_mkfs+0x13e>
 80082c8:	233f      	movs	r3, #63	; 0x3f
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d901      	bls.n	80082d8 <f_mkfs+0x14c>
 80082d4:	230e      	movs	r3, #14
 80082d6:	e37f      	b.n	80089d8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b7f      	cmp	r3, #127	; 0x7f
 80082e4:	d801      	bhi.n	80082ea <f_mkfs+0x15e>
 80082e6:	230e      	movs	r3, #14
 80082e8:	e376      	b.n	80089d8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b80      	cmp	r3, #128	; 0x80
 80082ee:	d901      	bls.n	80082f4 <f_mkfs+0x168>
 80082f0:	2313      	movs	r3, #19
 80082f2:	e371      	b.n	80089d8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	2b02      	cmp	r3, #2
 8008306:	d004      	beq.n	8008312 <f_mkfs+0x186>
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8008312:	2303      	movs	r3, #3
 8008314:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008318:	e009      	b.n	800832e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <f_mkfs+0x19c>
 8008324:	2313      	movs	r3, #19
 8008326:	e357      	b.n	80089d8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8008328:	2302      	movs	r3, #2
 800832a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8008332:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008336:	2b03      	cmp	r3, #3
 8008338:	d13c      	bne.n	80083b4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800833a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800833c:	2b00      	cmp	r3, #0
 800833e:	d11b      	bne.n	8008378 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	0c5b      	lsrs	r3, r3, #17
 8008344:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008346:	2300      	movs	r3, #0
 8008348:	64bb      	str	r3, [r7, #72]	; 0x48
 800834a:	2301      	movs	r3, #1
 800834c:	653b      	str	r3, [r7, #80]	; 0x50
 800834e:	e005      	b.n	800835c <f_mkfs+0x1d0>
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	3301      	adds	r3, #1
 8008354:	64bb      	str	r3, [r7, #72]	; 0x48
 8008356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	653b      	str	r3, [r7, #80]	; 0x50
 800835c:	4a2d      	ldr	r2, [pc, #180]	; (8008414 <f_mkfs+0x288>)
 800835e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <f_mkfs+0x1ec>
 8008368:	4a2a      	ldr	r2, [pc, #168]	; (8008414 <f_mkfs+0x288>)
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008370:	461a      	mov	r2, r3
 8008372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008374:	4293      	cmp	r3, r2
 8008376:	d2eb      	bcs.n	8008350 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008380:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	3302      	adds	r3, #2
 8008386:	009a      	lsls	r2, r3, #2
 8008388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800838a:	4413      	add	r3, r2
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008390:	fbb2 f3f3 	udiv	r3, r2, r3
 8008394:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8008396:	2320      	movs	r3, #32
 8008398:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800839a:	2300      	movs	r3, #0
 800839c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d903      	bls.n	80083b0 <f_mkfs+0x224>
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <f_mkfs+0x28c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d952      	bls.n	8008456 <f_mkfs+0x2ca>
 80083b0:	230e      	movs	r3, #14
 80083b2:	e311      	b.n	80089d8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80083b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d11b      	bne.n	80083f2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	0b1b      	lsrs	r3, r3, #12
 80083be:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80083c0:	2300      	movs	r3, #0
 80083c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80083c4:	2301      	movs	r3, #1
 80083c6:	653b      	str	r3, [r7, #80]	; 0x50
 80083c8:	e005      	b.n	80083d6 <f_mkfs+0x24a>
 80083ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083cc:	3301      	adds	r3, #1
 80083ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80083d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	653b      	str	r3, [r7, #80]	; 0x50
 80083d6:	4a11      	ldr	r2, [pc, #68]	; (800841c <f_mkfs+0x290>)
 80083d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <f_mkfs+0x266>
 80083e2:	4a0e      	ldr	r2, [pc, #56]	; (800841c <f_mkfs+0x290>)
 80083e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ea:	461a      	mov	r2, r3
 80083ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d2eb      	bcs.n	80083ca <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008402:	4293      	cmp	r3, r2
 8008404:	d90c      	bls.n	8008420 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	3302      	adds	r3, #2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840e:	e012      	b.n	8008436 <f_mkfs+0x2aa>
 8008410:	20000028 	.word	0x20000028
 8008414:	08008c54 	.word	0x08008c54
 8008418:	0ffffff5 	.word	0x0ffffff5
 800841c:	08008c64 	.word	0x08008c64
				} else {
					fmt = FS_FAT12;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8008426:	6a3a      	ldr	r2, [r7, #32]
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	3301      	adds	r3, #1
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	3303      	adds	r3, #3
 8008434:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008436:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843a:	4413      	add	r3, r2
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8008446:	2301      	movs	r3, #1
 8008448:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800844a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800845a:	4413      	add	r3, r2
 800845c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800845e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008462:	fb02 f203 	mul.w	r2, r2, r3
 8008466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008468:	4413      	add	r3, r2
 800846a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800846c:	4413      	add	r3, r2
 800846e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	1e5a      	subs	r2, r3, #1
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	425b      	negs	r3, r3
 800847c:	401a      	ands	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8008484:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008488:	2b03      	cmp	r3, #3
 800848a:	d108      	bne.n	800849e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800848c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800848e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008490:	4413      	add	r3, r2
 8008492:	657b      	str	r3, [r7, #84]	; 0x54
 8008494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008498:	4413      	add	r3, r2
 800849a:	65bb      	str	r3, [r7, #88]	; 0x58
 800849c:	e006      	b.n	80084ac <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800849e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084a8:	4413      	add	r3, r2
 80084aa:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80084ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ae:	011a      	lsls	r2, r3, #4
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	441a      	add	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d901      	bls.n	80084c2 <f_mkfs+0x336>
 80084be:	230e      	movs	r3, #14
 80084c0:	e28a      	b.n	80089d8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c6:	1ad2      	subs	r2, r2, r3
 80084c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084dc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80084de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d10f      	bne.n	8008506 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d80a      	bhi.n	8008506 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <f_mkfs+0x376>
 80084f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d144      	bne.n	800858c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8008502:	230e      	movs	r3, #14
 8008504:	e268      	b.n	80089d8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8008506:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800850a:	2b02      	cmp	r3, #2
 800850c:	d133      	bne.n	8008576 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008514:	4293      	cmp	r3, r2
 8008516:	d91e      	bls.n	8008556 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d107      	bne.n	800852e <f_mkfs+0x3a2>
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d803      	bhi.n	800852e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8008526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	e033      	b.n	8008596 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800852e:	7afb      	ldrb	r3, [r7, #11]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008538:	2303      	movs	r3, #3
 800853a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800853e:	e02a      	b.n	8008596 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <f_mkfs+0x3c6>
 8008546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	607b      	str	r3, [r7, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d91e      	bls.n	8008590 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8008552:	230e      	movs	r3, #14
 8008554:	e240      	b.n	80089d8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f640 72f5 	movw	r2, #4085	; 0xff5
 800855c:	4293      	cmp	r3, r2
 800855e:	d80a      	bhi.n	8008576 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d105      	bne.n	8008572 <f_mkfs+0x3e6>
 8008566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b80      	cmp	r3, #128	; 0x80
 8008570:	d910      	bls.n	8008594 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8008572:	230e      	movs	r3, #14
 8008574:	e230      	b.n	80089d8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8008576:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800857a:	2b01      	cmp	r3, #1
 800857c:	d10c      	bne.n	8008598 <f_mkfs+0x40c>
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008584:	4293      	cmp	r3, r2
 8008586:	d907      	bls.n	8008598 <f_mkfs+0x40c>
 8008588:	230e      	movs	r3, #14
 800858a:	e225      	b.n	80089d8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800858c:	bf00      	nop
 800858e:	e6ce      	b.n	800832e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008590:	bf00      	nop
 8008592:	e6cc      	b.n	800832e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008594:	bf00      	nop
			pau = au;
 8008596:	e6ca      	b.n	800832e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8008598:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800859a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800859c:	461a      	mov	r2, r3
 800859e:	2100      	movs	r1, #0
 80085a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a2:	f7fd fc96 	bl	8005ed2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80085a6:	220b      	movs	r2, #11
 80085a8:	49bc      	ldr	r1, [pc, #752]	; (800889c <f_mkfs+0x710>)
 80085aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ac:	f7fd fc70 	bl	8005e90 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	330b      	adds	r3, #11
 80085b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fd fc22 	bl	8005e02 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	330d      	adds	r3, #13
 80085c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	330e      	adds	r3, #14
 80085cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085ce:	b292      	uxth	r2, r2
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fd fc15 	bl	8005e02 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	3310      	adds	r3, #16
 80085dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	f103 0211 	add.w	r2, r3, #17
 80085e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d002      	beq.n	80085f6 <f_mkfs+0x46a>
 80085f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	e000      	b.n	80085f8 <f_mkfs+0x46c>
 80085f6:	2300      	movs	r3, #0
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fd fc01 	bl	8005e02 <st_word>
		if (sz_vol < 0x10000) {
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008606:	d208      	bcs.n	800861a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	3313      	adds	r3, #19
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	b292      	uxth	r2, r2
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7fd fbf5 	bl	8005e02 <st_word>
 8008618:	e006      	b.n	8008628 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	3320      	adds	r3, #32
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7fd fc08 	bl	8005e38 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	3315      	adds	r3, #21
 800862c:	22f8      	movs	r2, #248	; 0xf8
 800862e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	3318      	adds	r3, #24
 8008634:	213f      	movs	r1, #63	; 0x3f
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd fbe3 	bl	8005e02 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	331a      	adds	r3, #26
 8008640:	21ff      	movs	r1, #255	; 0xff
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd fbdd 	bl	8005e02 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	331c      	adds	r3, #28
 800864c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fbf2 	bl	8005e38 <st_dword>
		if (fmt == FS_FAT32) {
 8008654:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008658:	2b03      	cmp	r3, #3
 800865a:	d131      	bne.n	80086c0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8008662:	f7fd f92f 	bl	80058c4 <get_fattime>
 8008666:	4603      	mov	r3, r0
 8008668:	4619      	mov	r1, r3
 800866a:	4620      	mov	r0, r4
 800866c:	f7fd fbe4 	bl	8005e38 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	3324      	adds	r3, #36	; 0x24
 8008674:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008676:	4618      	mov	r0, r3
 8008678:	f7fd fbde 	bl	8005e38 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	332c      	adds	r3, #44	; 0x2c
 8008680:	2102      	movs	r1, #2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fbd8 	bl	8005e38 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	3330      	adds	r3, #48	; 0x30
 800868c:	2101      	movs	r1, #1
 800868e:	4618      	mov	r0, r3
 8008690:	f7fd fbb7 	bl	8005e02 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	3332      	adds	r3, #50	; 0x32
 8008698:	2106      	movs	r1, #6
 800869a:	4618      	mov	r0, r3
 800869c:	f7fd fbb1 	bl	8005e02 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	3340      	adds	r3, #64	; 0x40
 80086a4:	2280      	movs	r2, #128	; 0x80
 80086a6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	3342      	adds	r3, #66	; 0x42
 80086ac:	2229      	movs	r2, #41	; 0x29
 80086ae:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3347      	adds	r3, #71	; 0x47
 80086b4:	2213      	movs	r2, #19
 80086b6:	497a      	ldr	r1, [pc, #488]	; (80088a0 <f_mkfs+0x714>)
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fd fbe9 	bl	8005e90 <mem_cpy>
 80086be:	e020      	b.n	8008702 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80086c6:	f7fd f8fd 	bl	80058c4 <get_fattime>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4619      	mov	r1, r3
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7fd fbb2 	bl	8005e38 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	3316      	adds	r3, #22
 80086d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086da:	b292      	uxth	r2, r2
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd fb8f 	bl	8005e02 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	3324      	adds	r3, #36	; 0x24
 80086e8:	2280      	movs	r2, #128	; 0x80
 80086ea:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	3326      	adds	r3, #38	; 0x26
 80086f0:	2229      	movs	r2, #41	; 0x29
 80086f2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	332b      	adds	r3, #43	; 0x2b
 80086f8:	2213      	movs	r2, #19
 80086fa:	496a      	ldr	r1, [pc, #424]	; (80088a4 <f_mkfs+0x718>)
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fbc7 	bl	8005e90 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008708:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800870c:	4618      	mov	r0, r3
 800870e:	f7fd fb78 	bl	8005e02 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8008712:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008716:	2301      	movs	r3, #1
 8008718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800871c:	f7fd faf8 	bl	8005d10 <disk_write>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <f_mkfs+0x59e>
 8008726:	2301      	movs	r3, #1
 8008728:	e156      	b.n	80089d8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800872a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800872e:	2b03      	cmp	r3, #3
 8008730:	d140      	bne.n	80087b4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	1d9a      	adds	r2, r3, #6
 8008736:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800873a:	2301      	movs	r3, #1
 800873c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800873e:	f7fd fae7 	bl	8005d10 <disk_write>
			mem_set(buf, 0, ss);
 8008742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008744:	461a      	mov	r2, r3
 8008746:	2100      	movs	r1, #0
 8008748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800874a:	f7fd fbc2 	bl	8005ed2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800874e:	4956      	ldr	r1, [pc, #344]	; (80088a8 <f_mkfs+0x71c>)
 8008750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008752:	f7fd fb71 	bl	8005e38 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800875c:	4953      	ldr	r1, [pc, #332]	; (80088ac <f_mkfs+0x720>)
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd fb6a 	bl	8005e38 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	3b01      	subs	r3, #1
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fd fb61 	bl	8005e38 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800877c:	2102      	movs	r1, #2
 800877e:	4618      	mov	r0, r3
 8008780:	f7fd fb5a 	bl	8005e38 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800878a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd fb37 	bl	8005e02 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	1dda      	adds	r2, r3, #7
 8008798:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800879c:	2301      	movs	r3, #1
 800879e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087a0:	f7fd fab6 	bl	8005d10 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80087ac:	2301      	movs	r3, #1
 80087ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087b0:	f7fd faae 	bl	8005d10 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80087b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b6:	2100      	movs	r1, #0
 80087b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ba:	f7fd fb8a 	bl	8005ed2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80087be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80087c2:	2300      	movs	r3, #0
 80087c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c6:	e04b      	b.n	8008860 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80087c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d113      	bne.n	80087f8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80087d0:	f06f 0107 	mvn.w	r1, #7
 80087d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d6:	f7fd fb2f 	bl	8005e38 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	3304      	adds	r3, #4
 80087de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd fb28 	bl	8005e38 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	3308      	adds	r3, #8
 80087ec:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fb21 	bl	8005e38 <st_dword>
 80087f6:	e00b      	b.n	8008810 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80087f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <f_mkfs+0x678>
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <f_mkfs+0x724>)
 8008802:	e001      	b.n	8008808 <f_mkfs+0x67c>
 8008804:	f06f 0307 	mvn.w	r3, #7
 8008808:	4619      	mov	r1, r3
 800880a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800880c:	f7fd fb14 	bl	8005e38 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008812:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	4293      	cmp	r3, r2
 800881a:	bf28      	it	cs
 800881c:	4613      	movcs	r3, r2
 800881e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008820:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008826:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800882a:	f7fd fa71 	bl	8005d10 <disk_write>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <f_mkfs+0x6ac>
 8008834:	2301      	movs	r3, #1
 8008836:	e0cf      	b.n	80089d8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8008838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800883a:	461a      	mov	r2, r3
 800883c:	2100      	movs	r1, #0
 800883e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008840:	f7fd fb47 	bl	8005ed2 <mem_set>
				sect += n; nsect -= n;
 8008844:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008848:	4413      	add	r3, r2
 800884a:	667b      	str	r3, [r7, #100]	; 0x64
 800884c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800884e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8008854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1dc      	bne.n	8008814 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800885a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885c:	3301      	adds	r3, #1
 800885e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	429a      	cmp	r2, r3
 8008866:	d3af      	bcc.n	80087c8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008868:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800886c:	2b03      	cmp	r3, #3
 800886e:	d101      	bne.n	8008874 <f_mkfs+0x6e8>
 8008870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008872:	e000      	b.n	8008876 <f_mkfs+0x6ea>
 8008874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008876:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8008878:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	4293      	cmp	r3, r2
 800887e:	bf28      	it	cs
 8008880:	4613      	movcs	r3, r2
 8008882:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008884:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800888a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800888c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800888e:	f7fd fa3f 	bl	8005d10 <disk_write>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00d      	beq.n	80088b4 <f_mkfs+0x728>
 8008898:	2301      	movs	r3, #1
 800889a:	e09d      	b.n	80089d8 <f_mkfs+0x84c>
 800889c:	08008b44 	.word	0x08008b44
 80088a0:	08008b50 	.word	0x08008b50
 80088a4:	08008b64 	.word	0x08008b64
 80088a8:	41615252 	.word	0x41615252
 80088ac:	61417272 	.word	0x61417272
 80088b0:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80088b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b8:	4413      	add	r3, r2
 80088ba:	667b      	str	r3, [r7, #100]	; 0x64
 80088bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80088c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1d6      	bne.n	8008878 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80088ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d103      	bne.n	80088da <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80088d2:	230c      	movs	r3, #12
 80088d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80088d8:	e010      	b.n	80088fc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e0:	d303      	bcc.n	80088ea <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80088e2:	2306      	movs	r3, #6
 80088e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80088e8:	e008      	b.n	80088fc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80088ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d101      	bne.n	80088f6 <f_mkfs+0x76a>
 80088f2:	2304      	movs	r3, #4
 80088f4:	e000      	b.n	80088f8 <f_mkfs+0x76c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d15b      	bne.n	80089be <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8008906:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008908:	461a      	mov	r2, r3
 800890a:	2100      	movs	r1, #0
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f7fd fae0 	bl	8005ed2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008918:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800891c:	4618      	mov	r0, r3
 800891e:	f7fd fa70 	bl	8005e02 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008928:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	3301      	adds	r3, #1
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	3302      	adds	r3, #2
 800893c:	2201      	movs	r2, #1
 800893e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	3303      	adds	r3, #3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	3304      	adds	r3, #4
 800894c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8008950:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	441a      	add	r2, r3
 8008958:	4b21      	ldr	r3, [pc, #132]	; (80089e0 <f_mkfs+0x854>)
 800895a:	fba3 1302 	umull	r1, r3, r3, r2
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	0852      	lsrs	r2, r2, #1
 8008962:	4413      	add	r3, r2
 8008964:	0b5b      	lsrs	r3, r3, #13
 8008966:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	3305      	adds	r3, #5
 800896c:	22fe      	movs	r2, #254	; 0xfe
 800896e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8008970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008972:	089b      	lsrs	r3, r3, #2
 8008974:	b2da      	uxtb	r2, r3
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	3306      	adds	r3, #6
 800897a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	3307      	adds	r3, #7
 8008986:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	3308      	adds	r3, #8
 8008990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008992:	4618      	mov	r0, r3
 8008994:	f7fd fa50 	bl	8005e38 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	330c      	adds	r3, #12
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fa49 	bl	8005e38 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80089a6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80089aa:	2301      	movs	r3, #1
 80089ac:	2200      	movs	r2, #0
 80089ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089b0:	f7fd f9ae 	bl	8005d10 <disk_write>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <f_mkfs+0x832>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e00c      	b.n	80089d8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80089be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd f9c2 	bl	8005d50 <disk_ioctl>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <f_mkfs+0x84a>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <f_mkfs+0x84c>

	return FR_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3774      	adds	r7, #116	; 0x74
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd90      	pop	{r4, r7, pc}
 80089e0:	0515565b 	.word	0x0515565b

080089e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 80089fc:	7a5b      	ldrb	r3, [r3, #9]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d131      	bne.n	8008a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a06:	7a5b      	ldrb	r3, [r3, #9]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a12:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a14:	7a5b      	ldrb	r3, [r3, #9]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a24:	7a5b      	ldrb	r3, [r3, #9]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a2c:	4413      	add	r3, r2
 8008a2e:	79fa      	ldrb	r2, [r7, #7]
 8008a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a34:	7a5b      	ldrb	r3, [r3, #9]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	b2d1      	uxtb	r1, r2
 8008a3c:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <FATFS_LinkDriverEx+0x94>)
 8008a3e:	7251      	strb	r1, [r2, #9]
 8008a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a42:	7dbb      	ldrb	r3, [r7, #22]
 8008a44:	3330      	adds	r3, #48	; 0x30
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	223a      	movs	r2, #58	; 0x3a
 8008a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3302      	adds	r3, #2
 8008a58:	222f      	movs	r2, #47	; 0x2f
 8008a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3303      	adds	r3, #3
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	20000050 	.word	0x20000050

08008a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a86:	2200      	movs	r2, #0
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff ffaa 	bl	80089e4 <FATFS_LinkDriverEx>
 8008a90:	4603      	mov	r3, r0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 f820 	bl	8008af4 <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	08008c74 	.word	0x08008c74
 8008ad8:	08008c74 	.word	0x08008c74
 8008adc:	08008c74 	.word	0x08008c74
 8008ae0:	08008c78 	.word	0x08008c78

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <_init>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	bf00      	nop
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr

08008b00 <_fini>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr
